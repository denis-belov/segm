{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/cxx-specific.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/imports.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/memory.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/wasm-wrapper.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread2/thread2.1.worker.js"],"names":["bool","addr","length","arguments","undefined","mem","typed_array_constructor","memory","buffer","char","int","short","long","size_t","uint8_t","Uint8Array","int8_t","Int8Array","uint16_t","Uint16Array","int16_t","Int16Array","uint32_t","Uint32Array","int32_t","Int32Array","uint64_t","BigUint64Array","int64_t","BigInt64Array","float","double","long_double","size","addr2","name","globals","exports","value","getCStringLength","_addr","vend","memory_views","UI8","c_string","c_string2","constructor","convertUint8ArrayToDomString","std_string","result","__getStdStringData","__getStdStringSize","std_string2","std_vector","type","__getStdVectorData","__getStdVectorSize","std_vector_char","std_vector_int","std_vector_short","std_vector_long","std_vector_size_t","std_vector_addr","std_vector_uint8_t","std_vector_int8_t","std_vector_uint16_t","std_vector_int16_t","std_vector_uint32_t","std_vector_int32_t","std_vector_uint64_t","std_vector_int64_t","std_vector_float","std_vector_double","std_vector_long_double","resizeStdVector","__resizeStdVector","updateStdVectorData","_data","set","demangleCxxNames","_this","demangled_name_max_length","demangled_name_addr","__malloc","exports_demangled_reduced","exports_demangled","Object","keys","reduce","_name","startsWith","concat","convertDomStringToUint8Array","demangled_name","__demangleCxxName","replace","Array","isArray","push","first_entry","__free","Class","wasm_wrapper","_Class","_createClass","input","_classCallCheck","_wasm_wrapper$addr","_wasm_wrapper$addr2","_slicedToArray","_defineProperty","self","filter","member_name","includes","forEach","member_name_trimmed","wasm_object","_member_name$match","parameters","match","split","overloaded","prototype","_len","args","_key","apply","_typeof","New","NewWrapper","IDLE_FUNCTION","imports_lib","console_log","types_addr","values_addr","_console","arg_types","any_value_size","__any_value_size","i","type_name","type_names","value_addr","interp_log","console","log","console_log2","_console2","date_now","Date","now","host_loop","function_addr","_function","_len2","_key2","setInterval","host_animation_loop","loop","requestAnimationFrame","_toConsumableArray","rdty_sleep","duration","DATA_ADDR","sleeping","I32","asyncify_start_unwind","setTimeout","asyncify_start_rewind","asyncify_stop_rewind","window","Worker","SharedArrayBuffer","assign","runThread","thread_addr","thread_types_addr","thread_values_addr","threads","thread","Thread2","joinThread","async_count","async_promise","Promise","resolve","async_promise_setter","val","promise","then","async_func","async_args","terminateThread","terminate","Atomics","atomic_lock","atomic_unlock","UNLOCKED","LOCKED","atomic_addr","__atomic_malloc_index","wait","Infinity","compareExchange","store","notify","that","options","thread_stack_size","typed_array_name","_self$typed_array_nam","_inherits","_class","_super","_createSuper","_this2","ArrayBuffer","call","_possibleConstructorReturn","Error","byteOffset","BYTES_PER_ELEMENT","key","free","kind","type_name_index","__sizeof","typed_array_constructor_name","interp_thread","Boolean","interp_arg","str","_regeneratorRuntime","e","t","r","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","err","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","obj","_toPrimitive","String","hint","prim","toPrimitive","res","Number","__CODE_TYPE_BYTECODE__","__CODE_TYPE_FUNCTION__","DEBUG_LOG","bind","ERROR_LOG","content","MISSED_IMPORT_FUNCTION_LOG","DEBUG_INFO","DEBUG_INFO_PUSH","DEBUG_LABEL_LOG","label","navigator","hardwareConcurrency","WasmWrapper","__wasm_wrapper__","ThreadPromiseBunch","running_count","run","callback1","callback2","callback_next1","callback_next2","__initHeapPointer","all","resolves","__resetHeapPointer","runLog","LOG","__heap_pointer","_runAsync","_callee","_this3","_args","_callee$","_context","t0","t1","runAsync","_x","run2","_runAsync2","_callee2","_args2","_callee2$","_context2","runAsync2","_x2","__indirect_function_table","get","_async","_callee3","_args3","_callee3$","_context3","asyncify_stop_unwind","_x3","_instantiate","_callee4","_ref","_this4","wasm_module_imports","imports_custom","wasm_module","code","debug","imports_aggregate","wasm_module_instance","_callee4$","_context4","imports_thread","env","module","import_custom","wasm_module_import","WebAssembly","instantiate","_x4","_init","_callee5","_ref2","_this5","_ref2$memory","_ref2$imports","_ref2$stack_pointer","stack_pointer","_ref2$configureMemory","configureMemory","_ref2$forceLocalMemor","forceLocalMemory","_ref2$memory_params","memory_params","_ref2$initGlobals","initGlobals","_ref2$demangleCxxName","_ref2$debug","_ref2$findOptimalMemo","findOptimalMemorySize","code_type","code_temp","_wasm_module_imports$","_wasm_module_imports$2","imported_memory","shared_memory_allowed","memory_desc","allocate","_wasm_module_imports","_this$demangleCxxName","_callee5$","_context5","imports","minimum","maximum","initial","shared","Function","from","atob","charCodeAt","toString","getImports","compile","Module","import_desc","Memory","evt","byteLength","__main","__thread_id","init","_x5","_this6","prefix_length","export_name","getNewThread","Thread","getNewThread2","getNewThread3","Thread3","_initThreads","_callee6","thread_count","_this7","_callee6$","_context6","fill","map","initThreads","_x6","terminateThreads","uint8_array","text_decoder","decode","text","text_encoder","encode","_testSimd","_callee7","test_simd_wasm_buffer","_callee7$","_context7","testSimd","TextDecoder","TextEncoder","cxx_specific_functions","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","minLen","_arrayLikeToArray","test","len","arr2","wasm","onmessage","data","_data$data","postMessage"],"mappings":";QAAA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA,6BAA6B,0BAA0B;;QAEvD;QACA;QACA;;QAEA;QACA,IAAI;QACJ;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,mDAAmD;QACnD;QACA,IAAI;;QAEJ;;QAEA,sBAAsB,iGAAiG;;QAEvH;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,mDAAmD,kHAAkH;QACrK;QACA;QACA;QACA;QACA,OAAO;QACP,MAAM;QACN;QACA,MAAM;QACN,+CAA+C,wBAAwB,EAAE;QACzE;QACA;QACA,OAAO;QACP;QACA;QACA;QACA,MAAM;QACN;QACA,IAAI;QACJ;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;EACC;EACAA,IAAI,WAAAA,KAAEC,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,CAACL,IAAI,CAACM,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,iBAAAO,KACzGR,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,QAAK,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,gBAAAQ,IAC1GT,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,OAAI,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,kBAAAS,MACtGV,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,SAAM,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,iBAAAU,KAC3GX,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,QAAK,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC/GW,MAAM,WAAAA,OAAEZ,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,CAACQ,MAAM,CAACP,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EACnHD,IAAI,WAAAA,KAAEA,MAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,CAACJ,IAAI,CAACK,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,MAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC/GY,OAAO,WAAAA,QAAEb,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACY,UAAU,CAAC,IAAI,CAACR,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC5Fc,MAAM,WAAAA,OAAEf,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACc,SAAS,CAAC,IAAI,CAACV,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC1FgB,QAAQ,WAAAA,SAAEjB,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACgB,WAAW,CAAC,IAAI,CAACZ,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC9FkB,OAAO,WAAAA,QAAEnB,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACkB,UAAU,CAAC,IAAI,CAACd,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC5FoB,QAAQ,WAAAA,SAAErB,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACoB,WAAW,CAAC,IAAI,CAAChB,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC9FsB,OAAO,WAAAA,QAAEvB,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACsB,UAAU,CAAC,IAAI,CAAClB,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAC5FwB,QAAQ,WAAAA,SAAEzB,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACwB,cAAc,CAAC,IAAI,CAACpB,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EACjG0B,OAAO,WAAAA,QAAE3B,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAAC0B,aAAa,CAAC,IAAI,CAACtB,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,kBAAA4B,MACxF7B,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,SAAM,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EAAA,mBAAA6B,OACzG9B,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACE,GAAG,UAAO,CAACC,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,CAAC;EAAE,CAAC;EACnH8B,WAAW,WAAAA,YAAE/B,IAAI,EAAc;IAAA,IAAZC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,IAAI,CAACY,UAAU,CAAC,IAAI,CAACR,MAAM,CAACC,MAAM,EAAEP,IAAI,EAAEC,MAAM,GAAG,IAAI,CAACG,GAAG,CAAC2B,WAAW,CAACC,IAAI,CAAC;EAAE,CAAC;EAE5HC,KAAK,WAAAA,MAAEC,IAAI,EAAc;IAAA,IAAZjC,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;IAAI,OAAO,IAAI,CAACF,IAAI,CAAC,IAAI,CAACmC,OAAO,CAACD,IAAI,CAAC,IAAI,IAAI,CAACE,OAAO,CAACF,IAAI,CAAC,CAACG,KAAK,EAAEpC,MAAM,CAAC;EAAE,CAAC;EAEtGqC,gBAAgB,WAAAA,iBAAEtC,IAAI,EACtB;IACC,IAAMuC,KAAK,GAAGvC,IAAI;;IAElB;IACA,KAAK,IAAIwC,IAAI,GAAG,CAAC,GAAI,EAAEA,IAAI,EAC3B;MACC;MACA,IAAI,IAAI,CAACC,YAAY,CAACC,GAAG,CAACH,KAAK,GAAGC,IAAI,CAAC,KAAK,CAAC,EAC7C;QACC,OAAOA,IAAI;MACZ;IACD;EACD,CAAC;EAED;EACA;EACA;EACA;EAEAG,QAAQ,WAAAA,SAAE3C,IAAI,EACd;IACC,OAAO,IAAI,QAAK,CAACA,IAAI,EAAE,IAAI,CAACsC,gBAAgB,CAACtC,IAAI,CAAC,CAAC;EACpD,CAAC;EAED4C,SAAS,WAAAA,UAAE5C,IAAI,EACf;IACC;IACA,OAAO,IAAI,CAAC6C,WAAW,CAACC,4BAA4B,CAAC,IAAI,CAACH,QAAQ,CAAC3C,IAAI,CAAC,CAAC;EAC1E,CAAC;EAED+C,UAAU,WAAAA,WAAE/C,IAAI,EAChB;IACC,IAAMgD,MAAM,GACX,IAAI,QAAK,CAER,IAAI,CAACZ,OAAO,CAACa,kBAAkB,CAACjD,IAAI,CAAC,EAErC,IAAI,CAACoC,OAAO,CAACc,kBAAkB,CAAClD,IAAI,CACrC,CAAC;IAEF,OAAOgD,MAAM;EACd,CAAC;EAEDG,WAAW,WAAAA,YAAEnD,IAAI,EACjB;IACC,OAAO,IAAI,CAAC6C,WAAW,CAACC,4BAA4B,CAAC,IAAI,CAACC,UAAU,CAAC/C,IAAI,CAAC,CAAC;EAC5E,CAAC;EAEDoD,UAAU,WAAAA,WAAEpD,IAAI,EAAEqD,IAAI,EACtB;IACC,IAAML,MAAM,GACX,IAAI,CAACK,IAAI,CAAC,CAET,IAAI,CAACjB,OAAO,CAACkB,kBAAkB,CAACtD,IAAI,CAAC,EAErC,IAAI,CAACoC,OAAO,CAACmB,kBAAkB,CAACvD,IAAI,CACrC,CAAC;IAEF,OAAOgD,MAAM;EACd,CAAC;EAED;EACAQ,eAAe,WAAAA,gBAAExD,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,MAAM,CAAC;EAAE,CAAC;EAChEyD,cAAc,WAAAA,eAAEzD,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,KAAK,CAAC;EAAE,CAAC;EAC9D0D,gBAAgB,WAAAA,iBAAE1D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,OAAO,CAAC;EAAE,CAAC;EAClE2D,eAAe,WAAAA,gBAAE3D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,MAAM,CAAC;EAAE,CAAC;EAChE4D,iBAAiB,WAAAA,kBAAE5D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,QAAQ,CAAC;EAAE,CAAC;EACpE6D,eAAe,WAAAA,gBAAE7D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,MAAM,CAAC;EAAE,CAAC;EAChE8D,kBAAkB,WAAAA,mBAAE9D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,SAAS,CAAC;EAAE,CAAC;EACtE+D,iBAAiB,WAAAA,kBAAE/D,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,QAAQ,CAAC;EAAE,CAAC;EACpEgE,mBAAmB,WAAAA,oBAAEhE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,UAAU,CAAC;EAAE,CAAC;EACxEiE,kBAAkB,WAAAA,mBAAEjE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,SAAS,CAAC;EAAE,CAAC;EACtEkE,mBAAmB,WAAAA,oBAAElE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,UAAU,CAAC;EAAE,CAAC;EACxEmE,kBAAkB,WAAAA,mBAAEnE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,SAAS,CAAC;EAAE,CAAC;EACtEoE,mBAAmB,WAAAA,oBAAEpE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,UAAU,CAAC;EAAE,CAAC;EACxEqE,kBAAkB,WAAAA,mBAAErE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,SAAS,CAAC;EAAE,CAAC;EACtEsE,gBAAgB,WAAAA,iBAAEtE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,OAAO,CAAC;EAAE,CAAC;EAClEuE,iBAAiB,WAAAA,kBAAEvE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,QAAQ,CAAC;EAAE,CAAC;EACpEwE,sBAAsB,WAAAA,uBAAExE,IAAI,EAAE;IAAE,OAAO,IAAI,CAACoD,UAAU,CAACpD,IAAI,EAAE,aAAa,CAAC;EAAE,CAAC;EAE9EyE,eAAe,WAAAA,gBAAEzE,IAAI,EAAEgC,IAAI,EAC3B;IACC,IAAI,CAACI,OAAO,CAACsC,iBAAiB,CAAC1E,IAAI,EAAEgC,IAAI,CAAC;EAC3C,CAAC;EAED2C,mBAAmB,WAAAA,oBAAE3E,IAAI,EAAEqD,IAAI,EAAEuB,KAAK,EACtC;IACC,IAAI,CAACxB,UAAU,CAACpD,IAAI,EAAEqD,IAAI,CAAC,CAACwB,GAAG,CAACD,KAAK,CAAC;EACvC,CAAC;EAID;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EAEAE,gBAAgB,WAAAA,iBAAA,EAChB;IAAA,IAAAC,KAAA;IACC,IAAMC,yBAAyB,GAAG,IAAI;IACtC,IAAMC,mBAAmB,GAAG,IAAI,CAAC7C,OAAO,CAAC8C,QAAQ,CAACF,yBAAyB,CAAC;IAE5E,IAAMG,yBAAyB,GAAG,CAAC,CAAC;IAEpC,IAAMC,iBAAiB,GACtBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAClD,OAAO,CAAC,CACvBmD,MAAM,CAEN,UAACH,iBAAiB,EAAEI,KAAK,EACzB;MACC,IAAIA,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC,EAC1B;QACC,IAAMvD,IAAI,MAAAwD,MAAA,CAAOF,KAAK,OAAK;;QAE3B;;QAEAT,KAAI,CAACtC,YAAY,CAACC,GAAG,CAACmC,GAAG,CAACE,KAAI,CAAClC,WAAW,CAAC8C,4BAA4B,CAACzD,IAAI,CAAC,EAAE+C,mBAAmB,CAAC;QAEnG,IAAMW,cAAc,GACnBb,KAAI,CAAClC,WAAW,CAACC,4BAA4B,CAC5CiC,KAAI,CAACpC,QAAQ,CAACoC,KAAI,CAAC3C,OAAO,CAACyD,iBAAiB,CAACZ,mBAAmB,CAAC,CAAC,CAAC,CAClEa,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;QAEtB,IAAIV,iBAAiB,CAACQ,cAAc,CAAC,EACrC;UACC,IAAIG,KAAK,CAACC,OAAO,CAACZ,iBAAiB,CAACQ,cAAc,CAAC,CAAC,EACpD;YACCR,iBAAiB,CAACQ,cAAc,CAAC,CAACK,IAAI,CAAClB,KAAI,CAAC3C,OAAO,CAACoD,KAAK,CAAC,CAAC;YAE3D,OAAOJ,iBAAiB;UACzB;UAEA,IAAMc,WAAW,GAAGd,iBAAiB,CAACQ,cAAc,CAAC;UAErDR,iBAAiB,CAACQ,cAAc,CAAC,GAAG,CAAEM,WAAW,EAAEnB,KAAI,CAAC3C,OAAO,CAACoD,KAAK,CAAC,CAAE;UAExE,OAAOJ,iBAAiB;QACzB;QAEAA,iBAAiB,CAACQ,cAAc,CAAC,GAAGb,KAAI,CAAC3C,OAAO,CAACoD,KAAK,CAAC;QAEvDL,yBAAyB,CAACS,cAAc,CAACE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,GAAGf,KAAI,CAAC3C,OAAO,CAACoD,KAAK,CAAC;MAC1F;MAEA,OAAOJ,iBAAiB;IACzB,CAAC,EAED,CAAC,CACF,CAAC;IAEH,IAAI,CAAChD,OAAO,CAAC+D,MAAM,CAAClB,mBAAmB,CAAC;IAExC,OAAO;MAAEG,iBAAiB,EAAjBA,iBAAiB;MAAED,yBAAyB,EAAzBA;IAA0B,CAAC;EACxD,CAAC;EAIDiB,KAAK,WAAAA,MAAElE,IAAI,EACX;IACC,IAAMmE,YAAY,GAAG,IAAI;IAAC,IAIpBC,MAAM,gBAAAC,YAAA,CAQX,SAAAD,OAAaE,KAAK,EAClB;MAAAC,eAAA,OAAAH,MAAA;MACC,IAAI,OAAOE,KAAK,KAAK,QAAQ,EAC7B;QACC,IAAI,CAACxG,IAAI,GAAGwG,KAAK;MAClB,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAClC;QAAA,IAAAE,kBAAA,GACiBL,YAAY,CAACpE,KAAK,CAACuE,KAAK,CAAC;QAAA,IAAAG,mBAAA,GAAAC,cAAA,CAAAF,kBAAA;QAAvC,IAAI,CAAC1G,IAAI,GAAA2G,mBAAA;MACZ;IACD,CAAC;IAAAE,eAAA,CAlBIP,MAAM,UAEGpE,IAAI;IAAA2E,eAAA,CAFbP,MAAM,gBAIS,CAAC,CAAC;IAiBvBQ,IAAI,CAACzB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,iBAAiB,CAAC,CACtC2B,MAAM,CAEN,UAAAC,WAAW;MAAA,OAAIA,WAAW,CAACC,QAAQ,CAAC/E,IAAI,CAAC;IAAA,CAC1C,CAAC,CACAgF,OAAO,CAEP,UAAAF,WAAW,EACX;MACC,IAAIG,mBAAmB,GAAGH,WAAW,CAAClB,OAAO,IAAAJ,MAAA,CAAKxD,IAAI,SAAO,EAAE,CAAC,CAAC4D,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;;MAExF;MACA,IAAMsB,WAAW,GAChBf,YAAY,CAACjB,iBAAiB,CAAC4B,WAAW,CAAC,CAAC,CAAC,CAAC,IAAIX,YAAY,CAACjB,iBAAiB,CAAC4B,WAAW,CAAC;MAE9F,IAAI,OAAOI,WAAW,KAAK,UAAU,EACrC;QAAA,IAAAC,kBAAA;QACC,IAAMC,UAAU,IAAAD,kBAAA,GACfL,WAAW,CAACO,KAAK,CAAC,UAAU,CAAC,cAAAF,kBAAA,uBAA7BA,kBAAA,CAAgC,CAAC,CAAC,CAACvB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC0B,KAAK,CAAC,GAAG,CAAC;QAExE,IAAIF,UAAU,CAACrH,MAAM,IAAIqH,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,EAC7C;UACCA,UAAU,CAACrH,MAAM,GAAG,CAAC;QACtB;;QAEA;QACA,IAAIqH,UAAU,CAACrH,MAAM,KAAKmH,WAAW,CAACnH,MAAM,EAC5C;UACC,IAAIqG,MAAM,CAACa,mBAAmB,CAAC,EAC/B;YACC,IAAI,CAACb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,EAC3C;cACCb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,GAAG,CAAC;YAC3C;YAEA,EAAEb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC;YAExCA,mBAAmB,SAAAzB,MAAA,CAAUY,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,CAAG;UACvE;UAEAb,MAAM,CAACa,mBAAmB,CAAC,GAAGC,WAAW;QAC1C;;QAEA;QAAA,KAEA;UACC,IAAId,MAAM,CAACoB,SAAS,CAACP,mBAAmB,CAAC,EACzC;YACC,IAAI,CAACb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,EAC3C;cACCb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,GAAG,CAAC;YAC3C;YAEA,EAAEb,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC;YAExCA,mBAAmB,SAAAzB,MAAA,CAAUY,MAAM,CAACmB,UAAU,CAACN,mBAAmB,CAAC,CAAG;UACvE;;UAEA;UACAb,MAAM,UAAAZ,MAAA,CAAWyB,mBAAmB,EAAI,GAAGC,WAAW;UAEtDd,MAAM,CAACoB,SAAS,CAACP,mBAAmB,CAAC,GACpC,YACA;YAAA,SAAAQ,IAAA,GAAAzH,SAAA,CAAAD,MAAA,EADa2H,IAAI,OAAA7B,KAAA,CAAA4B,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;cAAJD,IAAI,CAAAC,IAAA,IAAA3H,SAAA,CAAA2H,IAAA;YAAA;YAEhB,OAAOT,WAAW,CAAAU,KAAA,UAAC,IAAI,CAAC9H,IAAI,EAAA0F,MAAA,CAAKkC,IAAI,EAAC;UACvC,CAAC;QACH;MACD,CAAC,MACI,IAAIG,OAAA,CAAOX,WAAW,MAAK,QAAQ,EACxC;QACCd,MAAM,CAACa,mBAAmB,CAAC,GAAGC,WAAW;MAC1C;IACD,CACD,CAAC;;IAEF;IACA,IAAId,MAAM,CAAC0B,GAAG,EACd;MACC1B,MAAM,CAAC2B,UAAU,GAAG;QAAA,OAAM,IAAI3B,MAAM,CAACA,MAAM,CAAC0B,GAAG,CAAC,CAAC,CAAC;MAAA;IACnD;IAIA,OAAO1B,MAAM;EACd;AACD,CAAC,E;;;;;;;;;;;;;;;;;;;AC7SD,IAAM4B,aAAa,GAAG,SAAhBA,aAAaA,CAAA;EAAA,OAAS,CAAC;AAAA;AAId,yEAAU7B,YAAY,EACrC;EACC,IAAM8B,WAAW,GACjB;IACCC,WAAW,EAAE,SAAAA,YAACpG,IAAI,EAAEqG,UAAU,EAAEC,WAAW,EAC3C;MAAA,IAAAC,QAAA;MACC,IAAMC,SAAS,GAAGnC,YAAY,CAACzF,MAAM,CAACyH,UAAU,EAAErG,IAAI,CAAC;MAEvD,IAAM4F,IAAI,GAAG,IAAI7B,KAAK,CAAC/D,IAAI,CAAC;MAE5B,IAAMyG,cAAc,GAAGpC,YAAY,CAACzF,MAAM,CAACyF,YAAY,CAAClE,OAAO,CAACuG,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAEpF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3G,IAAI,EAAE,EAAE2G,CAAC,EAC7B;QACC,IAAMC,SAAS,GAAGvC,YAAY,CAACwC,UAAU,CAACL,SAAS,CAACG,CAAC,CAAC,CAAC;QAEvD,IAAMG,UAAU,GAAGR,WAAW,GAAIG,cAAc,GAAGE,CAAE;QAErDf,IAAI,CAACe,CAAC,CAAC,GAAGtC,YAAY,CAACjG,GAAG,CAACwI,SAAS,CAAC,CAACG,UAAU,CAACD,UAAU,CAAC;MAC7D;MAEA,CAAAP,QAAA,GAAAS,OAAO,EAACC,GAAG,CAAAnB,KAAA,CAAAS,QAAA,GAAC,SAAS,EAAE,gBAAgB,EAAA7C,MAAA,CAAKkC,IAAI,EAAC;IAClD,CAAC;IAEDsB,YAAY,EAAE,SAAAA,aAAA,EACd;MAAA,IAAAC,SAAA;MAAA,SAAAxB,IAAA,GAAAzH,SAAA,CAAAD,MAAA,EADkB2H,IAAI,OAAA7B,KAAA,CAAA4B,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;QAAJD,IAAI,CAAAC,IAAA,IAAA3H,SAAA,CAAA2H,IAAA;MAAA;MAErB,CAAAsB,SAAA,GAAAH,OAAO,EAACC,GAAG,CAAAnB,KAAA,CAAAqB,SAAA,GAAC,SAAS,EAAE,gBAAgB,EAAAzD,MAAA,CAAKkC,IAAI,EAAC;IAClD,CAAC;IAEDwB,QAAQ,EAAE,SAAAA,SAAA;MAAA,OAAMC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAA;IAE1BC,SAAS,EAAE,SAAAA,UAACC,aAAa,EACzB;MACC,IAAMC,SAAS,GAAGpD,YAAY,YAAS,CAACmD,aAAa,CAAC;;MAEtD;MAAA,SAAAE,KAAA,GAAAxJ,SAAA,CAAAD,MAAA,EAJ6B2H,IAAI,OAAA7B,KAAA,CAAA2D,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJ/B,IAAI,CAAA+B,KAAA,QAAAzJ,SAAA,CAAAyJ,KAAA;MAAA;MAKjCC,WAAW,CAAA9B,KAAA,UAAC2B,SAAS,EAAE,CAAC,EAAA/D,MAAA,CAAKkC,IAAI,EAAC;IACnC,CAAC;IAEDiC,mBAAmB,EAAE,SAAAA,oBAACL,aAAa,EACnC;MACC,IAAMC,SAAS,GAAGpD,YAAY,YAAS,CAACmD,aAAa,CAAC;MAEtD,IAAMM,IAAI,GACT,SADKA,IAAIA,CAAA,EAET;QACCC,qBAAqB,CAACN,SAAS,CAAC;QAEhCA,SAAS,CAAA3B,KAAA,SAAAkC,kBAAA,CAAIpC,IAAI,EAAC;MACnB,CAAC;MAEFkC,IAAI,CAAC,CAAC;IACP,CAAC;IAED;IACA;IACAG,UAAU,EAAE,SAAAA,WAACC,QAAQ,EACrB;MACC;;MAEA,IAAMC,SAAS,GAAG,EAAE;MAEpB,IAAI,CAAC9D,YAAY,CAAC+D,QAAQ,EAC1B;QACC;QACA;QACA;QACA;QACA/D,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,CAACF,SAAS,IAAI,CAAC,CAAC,GAAGA,SAAS,GAAG,CAAC;QAC7D;;QAEA;QACA9D,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,CAACF,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI;QAC/D9D,YAAY,CAACjE,OAAO,CAACkI,qBAAqB,CAACH,SAAS,CAAC;QACrD9D,YAAY,CAAC+D,QAAQ,GAAG,IAAI;;QAE5B;QACAG,UAAU,CAET,YACA;UACC;UACAlE,YAAY,CAACjE,OAAO,CAACoI,qBAAqB,CAACL,SAAS,CAAC;UACrD;UACA;QACD,CAAC,EAEDD,QACD,CAAC;MACF,CAAC,MAED;QACC;QACA;QACA7D,YAAY,CAACjE,OAAO,CAACqI,oBAAoB,CAAC,CAAC;QAC3CpE,YAAY,CAAC+D,QAAQ,GAAG,KAAK;MAC9B;IACD;EACD,CAAC;;EAED;EACA;EACA;EACA,IAECtD,IAAI,CAAC4D,MAAM,IACX5D,IAAI,CAAC6D,MAAM,IACX7D,IAAI,CAAC8D,iBAAiB,EAEvB;IACCvF,MAAM,CAACwF,MAAM,CAEZ1C,WAAW,EAEX;MACC2C,SAAS,EAAE,SAAAA,UAACC,WAAW,EAAEvB,aAAa,EAAEwB,iBAAiB,EAAEC,kBAAkB,EAC7E;QACC,IAAI,CAAC5E,YAAY,CAAC6E,OAAO,EACzB;UACC7E,YAAY,CAAC6E,OAAO,GAAG,CAAC,CAAC;QAC1B;QAEA,IAAMC,MAAM,GACX,IAAI9E,YAAY,CAACxD,WAAW,CAACuI,OAAO,CAEnC/E,YAAY,EAEZ,CACCmD,aAAa,EACbnD,YAAY,CAACjE,OAAO,CAACkB,kBAAkB,CAAC0H,iBAAiB,CAAC,EAC1D3E,YAAY,CAACjE,OAAO,CAACkB,kBAAkB,CAAC2H,kBAAkB,CAAC,CAE7D,CAAC;QAEF5E,YAAY,CAAC6E,OAAO,CAACH,WAAW,CAAC,GAAGI,MAAM;MAC3C,CAAC;MAEDE,UAAU,EAAE,SAAAA,WAACN,WAAW,EACxB;QACC1E,YAAY,CAACiF,WAAW,GAAGjF,YAAY,CAACiF,WAAW,IAAI,CAAC;QAExD,EAAEjF,YAAY,CAACiF,WAAW;QAE1B,IAAIjF,YAAY,CAACiF,WAAW,KAAK,CAAC,EAClC;UACCjF,YAAY,CAACkF,aAAa,GACzB,IAAIC,OAAO,CAEV,UAAAC,OAAO,EACP;YACCpF,YAAY,CAACqF,oBAAoB,GAAG,UAACC,GAAG,EACxC;cACC,IAAIA,GAAG,EACP;gBACCF,OAAO,CAAC,CAAC;cACV;YACD,CAAC;UACF,CACD,CAAC;QACH;QAEA,IAAMtB,SAAS,GAAG,EAAE;QAEpB,IAAI,CAAC9D,YAAY,CAAC+D,QAAQ,EAC1B;UACC/D,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,CAACF,SAAS,IAAI,CAAC,CAAC,GAAGA,SAAS,GAAG,CAAC;UAC7D9D,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,CAACF,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI;UAE/D9D,YAAY,CAACjE,OAAO,CAACkI,qBAAqB,CAACH,SAAS,CAAC;UAErD9D,YAAY,CAAC+D,QAAQ,GAAG,IAAI;UAE5B/D,YAAY,CAAC6E,OAAO,CAACH,WAAW,CAAC,CAACa,OAAO,CACvCC,IAAI,CAEJ,YACA;YACCxF,YAAY,CAACjE,OAAO,CAACoI,qBAAqB,CAACL,SAAS,CAAC;YAErD9D,YAAY,CAACyF,UAAU,CAAAhE,KAAA,CAAvBzB,YAAY,EAAA2D,kBAAA,CAAe3D,YAAY,CAAC0F,UAAU,EAAC;YAEnD,IAAI1F,YAAY,CAACiF,WAAW,GAAG,CAAC,KAAK,CAAC,EACtC;cACCjF,YAAY,CAACqF,oBAAoB,CAAC,IAAI,CAAC;YACxC;UACD,CACD,CAAC;QACH,CAAC,MAED;UACCrF,YAAY,CAACjE,OAAO,CAACqI,oBAAoB,CAAC,CAAC;UAE3CpE,YAAY,CAAC+D,QAAQ,GAAG,KAAK;QAC9B;MACD,CAAC;MAED4B,eAAe,EAAE,SAAAA,gBAACjB,WAAW,EAC7B;QACC1E,YAAY,CAAC6E,OAAO,CAACH,WAAW,CAAC,CAACkB,SAAS,CAAC,CAAC;MAC9C;IACD,CACD,CAAC;EACF;EAEA;EAEC;EACAnF,IAAI,CAAC8D,iBAAiB,IACtB9D,IAAI,CAACoF,OAAO,EAEb;IACC,IAAIpF,IAAI,CAAC4D,MAAM,EACf;MACCrF,MAAM,CAACwF,MAAM,CAEZ1C,WAAW,EAEX;QACCgE,WAAW,EAAEjE,aAAa;QAC1BkE,aAAa,EAAElE;MAChB,CACD,CAAC;IACF,CAAC,MAED;MACC,IAAMmE,QAAQ,GAAG,CAAC;MAClB,IAAMC,MAAM,GAAG,CAAC;MAEhBjH,MAAM,CAACwF,MAAM,CAEZ1C,WAAW,EAEX;QACCgE,WAAW,WAAAA,YAAEI,WAAW,EACxB;UACC,IAAMC,qBAAqB,GAAGD,WAAW,GAAG,CAAC;UAE7C,GAAG;YAAEL,OAAO,CAACO,IAAI,CAACpG,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,EAAEmC,qBAAqB,EAAEF,MAAM,EAAEI,QAAQ,CAAC;UAAC,CAAC,QACpFR,OAAO,CAACS,eAAe,CAACtG,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,EAAEmC,qBAAqB,EAAEH,QAAQ,EAAEC,MAAM,CAAC,KAAKA,MAAM;QAClH,CAAC;QAEDF,aAAa,WAAAA,cAAEG,WAAW,EAC1B;UACC,IAAMC,qBAAqB,GAAGD,WAAW,GAAG,CAAC;UAE7CL,OAAO,CAACU,KAAK,CAACvG,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,EAAEmC,qBAAqB,EAAEH,QAAQ,CAAC;UAC7EH,OAAO,CAACW,MAAM,CAACxG,YAAY,CAAC5D,YAAY,CAAC4H,GAAG,EAAEmC,qBAAqB,EAAE,CAAC,CAAC;QACxE;MACD,CACD,CAAC;IACF;EACD;EAEA,OAAOrE,WAAW;AACnB,CAAC;AAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;AClQc,2EACf;EAAA,IAAApD,KAAA;EACC,IAAM+H,IAAI,GAAG,IAAI;EAIjB,IAAI,CAACC,OAAO,GACX1H,MAAM,CAACwF,MAAM,CAEZ;IACC;IACAmC,iBAAiB,EAAE;EACpB,CAAC,EAED,IAAI,CAACD,OACN,CAAC;EAIF,CACC,YAAY,EACZ,WAAW,EACX,aAAa,EACb,YAAY,EACZ,aAAa,EACb,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,gBAAgB,EAChB,eAAe,EACf,cAAc,EACd,cAAc,CACd,CACC7F,OAAO,CAEP,UAAA+F,gBAAgB,EAChB;IACC,IAAInG,IAAI,CAACmG,gBAAgB,CAAC,EAC1B;MACClI,KAAI,CAACkI,gBAAgB,CAAC,0BAAAC,qBAAA;QAAAC,SAAA,CAAAC,MAAA,EAAAF,qBAAA;QAAA,IAAAG,MAAA,GAAAC,YAAA,CAAAF,MAAA;QAGpB,SAAAA,OAAA,EACA;UAAA,IAAAG,MAAA;UAAA9G,eAAA,OAAA2G,MAAA;UAAA,SAAAzF,IAAA,GAAAzH,SAAA,CAAAD,MAAA,EADgB2H,IAAI,OAAA7B,KAAA,CAAA4B,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;YAAJD,IAAI,CAAAC,IAAA,IAAA3H,SAAA,CAAA2H,IAAA;UAAA;UAEnB;UACA;UACA;UACA;;UAEA,IAAID,IAAI,CAAC,CAAC,CAAC,YAAYd,IAAI,CAAC0G,WAAW,IAAK1G,IAAI,CAAC8D,iBAAiB,IAAIhD,IAAI,CAAC,CAAC,CAAC,YAAYd,IAAI,CAAC8D,iBAAkB,EAChH;YACC,IAAIhD,IAAI,CAAC,CAAC,CAAC,KAAKkF,IAAI,CAACxM,MAAM,CAACC,MAAM,EAClC;cACCgN,MAAA,GAAAF,MAAA,CAAAI,IAAA,CAAA3F,KAAA,CAAAuF,MAAA,SAAA3H,MAAA,CAASkC,IAAI;cAEb,OAAA8F,0BAAA,CAAAH,MAAA;YACD;YAEA,MAAM,IAAII,KAAK,CAAC,4GAA4G,CAAC;UAC9H;UAEA,IAAI1N,MAAM,GAAG,CAAC;UAEd,IAAI8H,OAAA,CAAOH,IAAI,CAAC,CAAC,CAAC,MAAK,QAAQ,EAC/B;YACC;YACG3H,MAAM,GAAK2H,IAAI,CAAC,CAAC,CAAC,CAAlB3H,MAAM;UACV,CAAC,MAED;YACCA,MAAM,GAAG2H,IAAI,CAAC,CAAC,CAAC;UACjB;UAEA,IAAMgG,UAAU,GAAGd,IAAI,CAAC1K,OAAO,CAAC8C,QAAQ,CAACjF,MAAM,GAAG6G,IAAI,CAACmG,gBAAgB,CAAC,CAACY,iBAAiB,CAAC;UAE3FN,MAAA,GAAAF,MAAA,CAAAI,IAAA,OAAMX,IAAI,CAACxM,MAAM,CAACC,MAAM,EAAEqN,UAAU,EAAE3N,MAAM;UAE5C,IAAI8H,OAAA,CAAOH,IAAI,CAAC,CAAC,CAAC,MAAK,QAAQ,EAC/B;YACC2F,MAAA,CAAK1I,GAAG,CAAC+C,IAAI,CAAC,CAAC,CAAC,CAAC;UAClB;UAAC,OAAA8F,0BAAA,CAAAH,MAAA;QACF;QAAChH,YAAA,CAAA6G,MAAA;UAAAU,GAAA;UAAAzL,KAAA,EAED,SAAA0L,KAAA,EAAQ;YAAEjB,IAAI,CAAC1K,OAAO,CAAC+D,MAAM,CAAC,IAAI,CAACyH,UAAU,CAAC;UAAE;;UAEhD;QAAA;QAAA,OAAAR,MAAA;MAAA,EA7CatG,IAAI,CAACmG,gBAAgB,CAAC,CA8CnC;IACH;EACD,CACD,CAAC;EAIF;IACC,IAAI,CAAC7M,GAAG,GACR;MACC,MAAM,EAAE;QAAE4N,IAAI,EAAE;MAAO,CAAC;MACxB,MAAM,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MACxB,KAAK,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MACtB,OAAO,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MACxB,MAAM,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MACvB,QAAQ,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MAC1B,MAAM,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MACxB,SAAS,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MAC3B,QAAQ,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MACzB,UAAU,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MAC5B,SAAS,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MAC1B,UAAU,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MAC5B,SAAS,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MAC1B,UAAU,EAAE;QAAEA,IAAI,EAAE;MAAO,CAAC;MAC5B,SAAS,EAAE;QAAEA,IAAI,EAAE;MAAM,CAAC;MAC1B,OAAO,EAAE;QAAEA,IAAI,EAAE;MAAQ,CAAC;MAC1B,QAAQ,EAAE;QAAEA,IAAI,EAAE;MAAQ,CAAC;MAC3B,aAAa,EAAE;QAAEA,IAAI,EAAE;MAAQ,CAAC;MAChC,UAAU,EAAE,CAAC;IACd,CAAC;IAED,IAAI,CAACnF,UAAU,GAAGxD,MAAM,CAACC,IAAI,CAAC,IAAI,CAAClF,GAAG,CAAC;IAEvC,IAAI,CAACyI,UAAU,CACb3B,OAAO,CAEP,UAAC0B,SAAS,EAAEqF,eAAe,EAC3B;MACC,IAAMjM,IAAI,GAAG+C,KAAI,CAAC3C,OAAO,CAAC8L,QAAQ,CAACD,eAAe,CAAC;MAEnD,IAAIE,4BAA4B,MAAAzI,MAAA,CAAOX,KAAI,CAAC3E,GAAG,CAACwI,SAAS,CAAC,CAACoF,IAAI,EAAAtI,MAAA,CAAK1D,IAAI,GAAG,CAAC,UAAQ;MAEpF,IAAI,CAAC+C,KAAI,CAACoJ,4BAA4B,CAAC,EACvC;QACCA,4BAA4B,SAAAzI,MAAA,CAAUyI,4BAA4B,CAAG;MACtE;MAEA9I,MAAM,CAACwF,MAAM,CAEZ9F,KAAI,CAAC3E,GAAG,CAACwI,SAAS,CAAC,EAEnB;QACC5G,IAAI,EAAJA,IAAI;QACJ3B,uBAAuB,EAAE0E,KAAI,CAACoJ,4BAA4B,CAAC;QAC3DpF,UAAU,EAAE,SAAAA,WAAA/I,IAAI;UAAA,OAAI+E,KAAI,CAAC6D,SAAS,CAAC,CAAC5I,IAAI,CAAC,CAAC,CAAC,CAAC;QAAA;QAC5CoO,aAAa,EAAE,SAAAA,cAAApO,IAAI;UAAA,OAAI+E,KAAI,CAAC6D,SAAS,CAAC,CAAC5I,IAAI,CAAC;QAAA;MAC7C,CACD,CAAC;IACF,CACD,CAAC;IAEF,IAAI,CAACI,GAAG,CAACL,IAAI,CAACgJ,UAAU,GAAG,UAAA/I,IAAI;MAAA,OAAIqO,OAAO,CAACtJ,KAAI,CAAChF,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,GAE9D,IAAI,CAACI,GAAG,CAACuC,QAAQ,CAACoG,UAAU,GAAG,UAAA/I,IAAI;MAAA,OAAI+E,KAAI,CAACnC,SAAS,CAACmC,KAAI,CAAC/E,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA;IACzE,IAAI,CAACI,GAAG,CAACuC,QAAQ,CAACyL,aAAa,GAAG,UAAApO,IAAI;MAAA,OAAI+E,KAAI,CAAC/E,IAAI,CAACA,IAAI,CAAC;IAAA;IACzD,IAAI,CAACI,GAAG,CAACuC,QAAQ,CAAC2L,UAAU,GAAG,UAAAC,GAAG;MAAA,OAAI,IAAIxJ,KAAI,CAAC3E,GAAG,QAAK,CAACC,uBAAuB,CAAC0E,KAAI,CAAClC,WAAW,CAAC8C,4BAA4B,CAAC4I,GAAG,CAAC,CAAC;IAAA;EACpI;EAIA;IACC,IAAI,CAAC9L,YAAY,GAAG,CAAC,CAAC;IAEtB,IAAI,CAACA,YAAY,CAACC,GAAG,GAAG,IAAI,IAAI,CAAC5B,UAAU,CAAC,IAAI,CAACR,MAAM,CAACC,MAAM,CAAC;IAC/D;IACA;IACA;IACA;IACA,IAAI,CAACkC,YAAY,CAAC4H,GAAG,GAAG,IAAI,IAAI,CAAC7I,UAAU,CAAC,IAAI,CAAClB,MAAM,CAACC,MAAM,CAAC;IAC/D;IACA;IACA;IACA;EACD;AACD,C;;;;;;;;;;;;;;;;;;;;;;;+CCzKA,qJAAAiO,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAtJ,MAAA,CAAAqC,SAAA,EAAAkH,CAAA,GAAAD,CAAA,CAAAE,cAAA,EAAAC,CAAA,GAAAzJ,MAAA,CAAA0J,cAAA,cAAAL,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAtM,KAAA,KAAAsG,CAAA,wBAAAqG,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAtG,CAAA,CAAAuG,QAAA,kBAAAC,CAAA,GAAAxG,CAAA,CAAAyG,aAAA,uBAAAC,CAAA,GAAA1G,CAAA,CAAA2G,WAAA,8BAAAC,OAAAb,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAtJ,MAAA,CAAA0J,cAAA,CAAAL,CAAA,EAAAD,CAAA,IAAApM,KAAA,EAAAsM,CAAA,EAAAa,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAAhB,CAAA,CAAAD,CAAA,WAAAc,MAAA,mBAAAb,CAAA,IAAAa,MAAA,YAAAA,OAAAb,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAgB,KAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAC,CAAA,QAAAjG,CAAA,GAAA8F,CAAA,IAAAA,CAAA,CAAA/G,SAAA,YAAAkI,SAAA,GAAAnB,CAAA,GAAAmB,SAAA,EAAAX,CAAA,GAAA5J,MAAA,CAAAwK,MAAA,CAAAlH,CAAA,CAAAjB,SAAA,GAAAyH,CAAA,OAAAW,OAAA,CAAAlB,CAAA,gBAAAE,CAAA,CAAAG,CAAA,eAAA5M,KAAA,EAAA0N,gBAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAQ,CAAA,MAAAF,CAAA,aAAAe,SAAAtB,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAAtL,IAAA,YAAA4M,GAAA,EAAAvB,CAAA,CAAAjB,IAAA,CAAAgB,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAArL,IAAA,WAAA4M,GAAA,EAAAvB,CAAA,QAAAD,CAAA,CAAAkB,IAAA,GAAAA,IAAA,MAAAO,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAV,UAAA,cAAAW,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAAlB,MAAA,CAAAkB,CAAA,EAAAxB,CAAA,qCAAAyB,CAAA,GAAArL,MAAA,CAAAsL,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAjC,CAAA,IAAAC,CAAA,CAAAnB,IAAA,CAAAmD,CAAA,EAAA3B,CAAA,MAAAwB,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAA9I,SAAA,GAAAkI,SAAA,CAAAlI,SAAA,GAAArC,MAAA,CAAAwK,MAAA,CAAAY,CAAA,YAAAM,sBAAArC,CAAA,gCAAAxH,OAAA,WAAAuH,CAAA,IAAAc,MAAA,CAAAb,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAAsC,OAAA,CAAAvC,CAAA,EAAAC,CAAA,sBAAAuC,cAAAvC,CAAA,EAAAD,CAAA,aAAAyC,OAAAvC,CAAA,EAAAG,CAAA,EAAAnG,CAAA,EAAAsG,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAAtB,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAI,CAAA,mBAAAK,CAAA,CAAA9L,IAAA,QAAAgM,CAAA,GAAAF,CAAA,CAAAc,GAAA,EAAAC,CAAA,GAAAb,CAAA,CAAAhN,KAAA,SAAA6N,CAAA,gBAAAnI,OAAA,CAAAmI,CAAA,KAAAtB,CAAA,CAAAnB,IAAA,CAAAyC,CAAA,eAAAzB,CAAA,CAAAhD,OAAA,CAAAyE,CAAA,CAAAiB,OAAA,EAAAtF,IAAA,WAAA6C,CAAA,IAAAwC,MAAA,SAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,gBAAAP,CAAA,IAAAwC,MAAA,UAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,QAAAR,CAAA,CAAAhD,OAAA,CAAAyE,CAAA,EAAArE,IAAA,WAAA6C,CAAA,IAAAW,CAAA,CAAAhN,KAAA,GAAAqM,CAAA,EAAA/F,CAAA,CAAA0G,CAAA,gBAAAX,CAAA,WAAAwC,MAAA,UAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAc,GAAA,SAAAtB,CAAA,EAAAG,CAAA,oBAAAzM,KAAA,WAAAA,MAAAqM,CAAA,EAAAE,CAAA,aAAAwC,2BAAA,eAAA3C,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAAuC,MAAA,CAAAxC,CAAA,EAAAE,CAAA,EAAAH,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAA9C,IAAA,CAAAuF,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAArB,iBAAAtB,CAAA,EAAAE,CAAA,EAAAC,CAAA,QAAAE,CAAA,GAAAoB,CAAA,mBAAAvH,CAAA,EAAAsG,CAAA,QAAAH,CAAA,KAAAsB,CAAA,YAAAzC,KAAA,sCAAAmB,CAAA,KAAAuB,CAAA,oBAAA1H,CAAA,QAAAsG,CAAA,WAAA5M,KAAA,EAAAqM,CAAA,EAAA2C,IAAA,eAAAzC,CAAA,CAAA0C,MAAA,GAAA3I,CAAA,EAAAiG,CAAA,CAAAqB,GAAA,GAAAhB,CAAA,UAAAE,CAAA,GAAAP,CAAA,CAAA2C,QAAA,MAAApC,CAAA,QAAAE,CAAA,GAAAmC,mBAAA,CAAArC,CAAA,EAAAP,CAAA,OAAAS,CAAA,QAAAA,CAAA,KAAAiB,CAAA,mBAAAjB,CAAA,qBAAAT,CAAA,CAAA0C,MAAA,EAAA1C,CAAA,CAAA6C,IAAA,GAAA7C,CAAA,CAAA8C,KAAA,GAAA9C,CAAA,CAAAqB,GAAA,sBAAArB,CAAA,CAAA0C,MAAA,QAAAxC,CAAA,KAAAoB,CAAA,QAAApB,CAAA,GAAAuB,CAAA,EAAAzB,CAAA,CAAAqB,GAAA,EAAArB,CAAA,CAAA+C,iBAAA,CAAA/C,CAAA,CAAAqB,GAAA,uBAAArB,CAAA,CAAA0C,MAAA,IAAA1C,CAAA,CAAAgD,MAAA,WAAAhD,CAAA,CAAAqB,GAAA,GAAAnB,CAAA,GAAAsB,CAAA,MAAAK,CAAA,GAAAT,QAAA,CAAAvB,CAAA,EAAAE,CAAA,EAAAC,CAAA,oBAAA6B,CAAA,CAAApN,IAAA,QAAAyL,CAAA,GAAAF,CAAA,CAAAyC,IAAA,GAAAhB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAR,GAAA,KAAAK,CAAA,qBAAAjO,KAAA,EAAAoO,CAAA,CAAAR,GAAA,EAAAoB,IAAA,EAAAzC,CAAA,CAAAyC,IAAA,kBAAAZ,CAAA,CAAApN,IAAA,KAAAyL,CAAA,GAAAuB,CAAA,EAAAzB,CAAA,CAAA0C,MAAA,YAAA1C,CAAA,CAAAqB,GAAA,GAAAQ,CAAA,CAAAR,GAAA,mBAAAuB,oBAAA/C,CAAA,EAAAE,CAAA,QAAAC,CAAA,GAAAD,CAAA,CAAA2C,MAAA,EAAAxC,CAAA,GAAAL,CAAA,CAAAS,QAAA,CAAAN,CAAA,OAAAE,CAAA,KAAAJ,CAAA,SAAAC,CAAA,CAAA4C,QAAA,qBAAA3C,CAAA,IAAAH,CAAA,CAAAS,QAAA,eAAAP,CAAA,CAAA2C,MAAA,aAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,EAAA8C,mBAAA,CAAA/C,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAA2C,MAAA,kBAAA1C,CAAA,KAAAD,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,OAAA4B,SAAA,uCAAAjD,CAAA,iBAAA0B,CAAA,MAAA3H,CAAA,GAAAqH,QAAA,CAAAlB,CAAA,EAAAL,CAAA,CAAAS,QAAA,EAAAP,CAAA,CAAAsB,GAAA,mBAAAtH,CAAA,CAAAtF,IAAA,SAAAsL,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,GAAAtH,CAAA,CAAAsH,GAAA,EAAAtB,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,MAAArB,CAAA,GAAAtG,CAAA,CAAAsH,GAAA,SAAAhB,CAAA,GAAAA,CAAA,CAAAoC,IAAA,IAAA1C,CAAA,CAAAF,CAAA,CAAAqD,UAAA,IAAA7C,CAAA,CAAA5M,KAAA,EAAAsM,CAAA,CAAAoD,IAAA,GAAAtD,CAAA,CAAAuD,OAAA,eAAArD,CAAA,CAAA2C,MAAA,KAAA3C,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,GAAAC,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,IAAArB,CAAA,IAAAN,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,OAAA4B,SAAA,sCAAAlD,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,cAAA2B,aAAAvD,CAAA,QAAAD,CAAA,KAAAyD,MAAA,EAAAxD,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAA0D,QAAA,GAAAzD,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAA2D,UAAA,GAAA1D,CAAA,KAAAD,CAAA,CAAA4D,QAAA,GAAA3D,CAAA,WAAA4D,UAAA,CAAArM,IAAA,CAAAwI,CAAA,cAAA8D,cAAA7D,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAA8D,UAAA,QAAA/D,CAAA,CAAApL,IAAA,oBAAAoL,CAAA,CAAAwB,GAAA,EAAAvB,CAAA,CAAA8D,UAAA,GAAA/D,CAAA,aAAAqB,QAAApB,CAAA,SAAA4D,UAAA,MAAAJ,MAAA,aAAAxD,CAAA,CAAAxH,OAAA,CAAA+K,YAAA,cAAAQ,KAAA,iBAAA5B,OAAApC,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAQ,CAAA,OAAAN,CAAA,SAAAA,CAAA,CAAAlB,IAAA,CAAAgB,CAAA,4BAAAA,CAAA,CAAAsD,IAAA,SAAAtD,CAAA,OAAAiE,KAAA,CAAAjE,CAAA,CAAAxO,MAAA,SAAA6O,CAAA,OAAAnG,CAAA,YAAAoJ,KAAA,aAAAjD,CAAA,GAAAL,CAAA,CAAAxO,MAAA,OAAA2O,CAAA,CAAAnB,IAAA,CAAAgB,CAAA,EAAAK,CAAA,UAAAiD,IAAA,CAAA1P,KAAA,GAAAoM,CAAA,CAAAK,CAAA,GAAAiD,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAA1P,KAAA,GAAAqM,CAAA,EAAAqD,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAApJ,CAAA,CAAAoJ,IAAA,GAAApJ,CAAA,gBAAAkJ,SAAA,CAAA9J,OAAA,CAAA0G,CAAA,kCAAA8B,iBAAA,CAAA7I,SAAA,GAAA8I,0BAAA,EAAA1B,CAAA,CAAAgC,CAAA,mBAAAzO,KAAA,EAAAmO,0BAAA,EAAAf,YAAA,SAAAX,CAAA,CAAA0B,0BAAA,mBAAAnO,KAAA,EAAAkO,iBAAA,EAAAd,YAAA,SAAAc,iBAAA,CAAAoC,WAAA,GAAApD,MAAA,CAAAiB,0BAAA,EAAAnB,CAAA,wBAAAZ,CAAA,CAAAmE,mBAAA,aAAAlE,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAA7L,WAAA,WAAA4L,CAAA,KAAAA,CAAA,KAAA8B,iBAAA,6BAAA9B,CAAA,CAAAkE,WAAA,IAAAlE,CAAA,CAAAvM,IAAA,OAAAuM,CAAA,CAAAoE,IAAA,aAAAnE,CAAA,WAAArJ,MAAA,CAAAyN,cAAA,GAAAzN,MAAA,CAAAyN,cAAA,CAAApE,CAAA,EAAA8B,0BAAA,KAAA9B,CAAA,CAAAqE,SAAA,GAAAvC,0BAAA,EAAAjB,MAAA,CAAAb,CAAA,EAAAW,CAAA,yBAAAX,CAAA,CAAAhH,SAAA,GAAArC,MAAA,CAAAwK,MAAA,CAAAiB,CAAA,GAAApC,CAAA,KAAAD,CAAA,CAAAuE,KAAA,aAAAtE,CAAA,aAAAyC,OAAA,EAAAzC,CAAA,OAAAqC,qBAAA,CAAAE,aAAA,CAAAvJ,SAAA,GAAA6H,MAAA,CAAA0B,aAAA,CAAAvJ,SAAA,EAAAyH,CAAA,iCAAAV,CAAA,CAAAwC,aAAA,GAAAA,aAAA,EAAAxC,CAAA,CAAAwE,KAAA,aAAAvE,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAE,CAAA,EAAAnG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA6C,OAAA,OAAAyD,CAAA,OAAAgC,aAAA,CAAAtB,IAAA,CAAAjB,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAE,CAAA,GAAAnG,CAAA,UAAA8F,CAAA,CAAAmE,mBAAA,CAAAjE,CAAA,IAAAM,CAAA,GAAAA,CAAA,CAAA8C,IAAA,GAAAlG,IAAA,WAAA6C,CAAA,WAAAA,CAAA,CAAA2C,IAAA,GAAA3C,CAAA,CAAArM,KAAA,GAAA4M,CAAA,CAAA8C,IAAA,WAAAhB,qBAAA,CAAAD,CAAA,GAAAvB,MAAA,CAAAuB,CAAA,EAAAzB,CAAA,gBAAAE,MAAA,CAAAuB,CAAA,EAAA7B,CAAA,iCAAAM,MAAA,CAAAuB,CAAA,6DAAArC,CAAA,CAAAnJ,IAAA,aAAAoJ,CAAA,QAAAD,CAAA,GAAApJ,MAAA,CAAAqJ,CAAA,GAAAC,CAAA,gBAAAC,CAAA,IAAAH,CAAA,EAAAE,CAAA,CAAA1I,IAAA,CAAA2I,CAAA,UAAAD,CAAA,CAAAuE,OAAA,aAAAnB,KAAA,WAAApD,CAAA,CAAA1O,MAAA,SAAAyO,CAAA,GAAAC,CAAA,CAAAwE,GAAA,QAAAzE,CAAA,IAAAD,CAAA,SAAAsD,IAAA,CAAA1P,KAAA,GAAAqM,CAAA,EAAAqD,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAtD,CAAA,CAAAoC,MAAA,GAAAA,MAAA,EAAAf,OAAA,CAAApI,SAAA,KAAA7E,WAAA,EAAAiN,OAAA,EAAA2C,KAAA,WAAAA,MAAAhE,CAAA,aAAA2E,IAAA,WAAArB,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAAhD,CAAA,OAAA2C,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAArB,GAAA,GAAAvB,CAAA,OAAA4D,UAAA,CAAApL,OAAA,CAAAqL,aAAA,IAAA9D,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA0E,MAAA,OAAAzE,CAAA,CAAAnB,IAAA,OAAAkB,CAAA,MAAA+D,KAAA,EAAA/D,CAAA,CAAA2E,KAAA,cAAA3E,CAAA,IAAAD,CAAA,MAAA6E,IAAA,WAAAA,KAAA,SAAAlC,IAAA,WAAA3C,CAAA,QAAA4D,UAAA,IAAAE,UAAA,kBAAA9D,CAAA,CAAArL,IAAA,QAAAqL,CAAA,CAAAuB,GAAA,cAAAuD,IAAA,KAAA7B,iBAAA,WAAAA,kBAAAlD,CAAA,aAAA4C,IAAA,QAAA5C,CAAA,MAAAE,CAAA,kBAAA8E,OAAA7E,CAAA,EAAAE,CAAA,WAAAG,CAAA,CAAA5L,IAAA,YAAA4L,CAAA,CAAAgB,GAAA,GAAAxB,CAAA,EAAAE,CAAA,CAAAoD,IAAA,GAAAnD,CAAA,EAAAE,CAAA,KAAAH,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,KAAAI,CAAA,aAAAA,CAAA,QAAAwD,UAAA,CAAArS,MAAA,MAAA6O,CAAA,SAAAA,CAAA,QAAAnG,CAAA,QAAA2J,UAAA,CAAAxD,CAAA,GAAAG,CAAA,GAAAtG,CAAA,CAAA6J,UAAA,iBAAA7J,CAAA,CAAAuJ,MAAA,SAAAuB,MAAA,aAAA9K,CAAA,CAAAuJ,MAAA,SAAAkB,IAAA,QAAAjE,CAAA,GAAAP,CAAA,CAAAnB,IAAA,CAAA9E,CAAA,eAAA0G,CAAA,GAAAT,CAAA,CAAAnB,IAAA,CAAA9E,CAAA,qBAAAwG,CAAA,IAAAE,CAAA,aAAA+D,IAAA,GAAAzK,CAAA,CAAAwJ,QAAA,SAAAsB,MAAA,CAAA9K,CAAA,CAAAwJ,QAAA,gBAAAiB,IAAA,GAAAzK,CAAA,CAAAyJ,UAAA,SAAAqB,MAAA,CAAA9K,CAAA,CAAAyJ,UAAA,cAAAjD,CAAA,aAAAiE,IAAA,GAAAzK,CAAA,CAAAwJ,QAAA,SAAAsB,MAAA,CAAA9K,CAAA,CAAAwJ,QAAA,qBAAA9C,CAAA,YAAA1B,KAAA,qDAAAyF,IAAA,GAAAzK,CAAA,CAAAyJ,UAAA,SAAAqB,MAAA,CAAA9K,CAAA,CAAAyJ,UAAA,YAAAR,MAAA,WAAAA,OAAAlD,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAA2D,UAAA,CAAArS,MAAA,MAAA0O,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAAwD,UAAA,CAAA3D,CAAA,OAAAG,CAAA,CAAAoD,MAAA,SAAAkB,IAAA,IAAAxE,CAAA,CAAAnB,IAAA,CAAAqB,CAAA,wBAAAsE,IAAA,GAAAtE,CAAA,CAAAsD,UAAA,QAAAzJ,CAAA,GAAAmG,CAAA,aAAAnG,CAAA,iBAAA+F,CAAA,mBAAAA,CAAA,KAAA/F,CAAA,CAAAuJ,MAAA,IAAAzD,CAAA,IAAAA,CAAA,IAAA9F,CAAA,CAAAyJ,UAAA,KAAAzJ,CAAA,cAAAsG,CAAA,GAAAtG,CAAA,GAAAA,CAAA,CAAA6J,UAAA,cAAAvD,CAAA,CAAA5L,IAAA,GAAAqL,CAAA,EAAAO,CAAA,CAAAgB,GAAA,GAAAxB,CAAA,EAAA9F,CAAA,SAAA2I,MAAA,gBAAAS,IAAA,GAAApJ,CAAA,CAAAyJ,UAAA,EAAA9B,CAAA,SAAAoD,QAAA,CAAAzE,CAAA,MAAAyE,QAAA,WAAAA,SAAAhF,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAArL,IAAA,QAAAqL,CAAA,CAAAuB,GAAA,qBAAAvB,CAAA,CAAArL,IAAA,mBAAAqL,CAAA,CAAArL,IAAA,QAAA0O,IAAA,GAAArD,CAAA,CAAAuB,GAAA,gBAAAvB,CAAA,CAAArL,IAAA,SAAAmQ,IAAA,QAAAvD,GAAA,GAAAvB,CAAA,CAAAuB,GAAA,OAAAqB,MAAA,kBAAAS,IAAA,yBAAArD,CAAA,CAAArL,IAAA,IAAAoL,CAAA,UAAAsD,IAAA,GAAAtD,CAAA,GAAA6B,CAAA,KAAAqD,MAAA,WAAAA,OAAAjF,CAAA,aAAAD,CAAA,QAAA6D,UAAA,CAAArS,MAAA,MAAAwO,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAA2D,UAAA,CAAA7D,CAAA,OAAAE,CAAA,CAAAyD,UAAA,KAAA1D,CAAA,cAAAgF,QAAA,CAAA/E,CAAA,CAAA6D,UAAA,EAAA7D,CAAA,CAAA0D,QAAA,GAAAE,aAAA,CAAA5D,CAAA,GAAA2B,CAAA,yBAAAsD,OAAAlF,CAAA,aAAAD,CAAA,QAAA6D,UAAA,CAAArS,MAAA,MAAAwO,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAA2D,UAAA,CAAA7D,CAAA,OAAAE,CAAA,CAAAuD,MAAA,KAAAxD,CAAA,QAAAE,CAAA,GAAAD,CAAA,CAAA6D,UAAA,kBAAA5D,CAAA,CAAAvL,IAAA,QAAAyL,CAAA,GAAAF,CAAA,CAAAqB,GAAA,EAAAsC,aAAA,CAAA5D,CAAA,YAAAG,CAAA,gBAAAnB,KAAA,8BAAAkG,aAAA,WAAAA,cAAApF,CAAA,EAAAE,CAAA,EAAAC,CAAA,gBAAA2C,QAAA,KAAArC,QAAA,EAAA2B,MAAA,CAAApC,CAAA,GAAAqD,UAAA,EAAAnD,CAAA,EAAAqD,OAAA,EAAApD,CAAA,oBAAA0C,MAAA,UAAArB,GAAA,GAAAvB,CAAA,GAAA4B,CAAA,OAAA7B,CAAA;AAAA,SAAAqF,mBAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAApG,GAAA,EAAAmC,GAAA,cAAAkE,IAAA,GAAAJ,GAAA,CAAAjG,GAAA,EAAAmC,GAAA,OAAA5N,KAAA,GAAA8R,IAAA,CAAA9R,KAAA,WAAA+R,KAAA,IAAAJ,MAAA,CAAAI,KAAA,iBAAAD,IAAA,CAAA9C,IAAA,IAAA5F,OAAA,CAAApJ,KAAA,YAAAmJ,OAAA,CAAAC,OAAA,CAAApJ,KAAA,EAAAwJ,IAAA,CAAAoI,KAAA,EAAAC,MAAA;AAAA,SAAAG,kBAAAC,EAAA,6BAAAxN,IAAA,SAAAc,IAAA,GAAA1H,SAAA,aAAAsL,OAAA,WAAAC,OAAA,EAAAuI,MAAA,QAAAD,GAAA,GAAAO,EAAA,CAAAxM,KAAA,CAAAhB,IAAA,EAAAc,IAAA,YAAAqM,MAAA5R,KAAA,IAAAyR,kBAAA,CAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAA7R,KAAA,cAAA6R,OAAAK,GAAA,IAAAT,kBAAA,CAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAK,GAAA,KAAAN,KAAA,CAAA9T,SAAA;AAAA,SAAAsG,gBAAA+N,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAA5C,SAAA;AAAA,SAAA6C,kBAAAC,MAAA,EAAAC,KAAA,aAAAjM,CAAA,MAAAA,CAAA,GAAAiM,KAAA,CAAA3U,MAAA,EAAA0I,CAAA,UAAAkM,UAAA,GAAAD,KAAA,CAAAjM,CAAA,GAAAkM,UAAA,CAAArF,UAAA,GAAAqF,UAAA,CAAArF,UAAA,WAAAqF,UAAA,CAAApF,YAAA,wBAAAoF,UAAA,EAAAA,UAAA,CAAAnF,QAAA,SAAArK,MAAA,CAAA0J,cAAA,CAAA4F,MAAA,EAAAG,cAAA,CAAAD,UAAA,CAAA/G,GAAA,GAAA+G,UAAA;AAAA,SAAAtO,aAAAkO,WAAA,EAAAM,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAL,iBAAA,CAAAD,WAAA,CAAA/M,SAAA,EAAAqN,UAAA,OAAAC,WAAA,EAAAN,iBAAA,CAAAD,WAAA,EAAAO,WAAA,GAAA3P,MAAA,CAAA0J,cAAA,CAAA0F,WAAA,iBAAA/E,QAAA,mBAAA+E,WAAA;AAAA,SAAA5N,gBAAAoO,GAAA,EAAAnH,GAAA,EAAAzL,KAAA,IAAAyL,GAAA,GAAAgH,cAAA,CAAAhH,GAAA,OAAAA,GAAA,IAAAmH,GAAA,IAAA5P,MAAA,CAAA0J,cAAA,CAAAkG,GAAA,EAAAnH,GAAA,IAAAzL,KAAA,EAAAA,KAAA,EAAAmN,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAuF,GAAA,CAAAnH,GAAA,IAAAzL,KAAA,WAAA4S,GAAA;AAAA,SAAAH,eAAA7E,GAAA,QAAAnC,GAAA,GAAAoH,YAAA,CAAAjF,GAAA,oBAAAlI,OAAA,CAAA+F,GAAA,iBAAAA,GAAA,GAAAqH,MAAA,CAAArH,GAAA;AAAA,SAAAoH,aAAA1O,KAAA,EAAA4O,IAAA,QAAArN,OAAA,CAAAvB,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAA6O,IAAA,GAAA7O,KAAA,CAAAwI,MAAA,CAAAsG,WAAA,OAAAD,IAAA,KAAAlV,SAAA,QAAAoV,GAAA,GAAAF,IAAA,CAAA5H,IAAA,CAAAjH,KAAA,EAAA4O,IAAA,oBAAArN,OAAA,CAAAwN,GAAA,uBAAAA,GAAA,YAAA1D,SAAA,4DAAAuD,IAAA,gBAAAD,MAAA,GAAAK,MAAA,EAAAhP,KAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEuC;AACJ;AACiB;AAIpD,IAAMiP,sBAAsB,GAAG,CAAC;AAChC,IAAMC,sBAAsB,GAAG,CAAC;AAIhC,IAAMxN,aAAa,GAAG,SAAhBA,aAAaA,CAAA;EAAA,OAAS,CAAC;AAAA;AAE7B,IAAMyN,SAAS,GAAG3M,OAAO,CAACC,GAAG,CAAC2M,IAAI,CAAC5M,OAAO,CAAC;AAC3C;AACA,IAAM6M,SAAS,GAAG,SAAZA,SAASA,CAAGC,OAAO;EAAA,OAAI9M,OAAO,CAACC,GAAG,MAAAvD,MAAA,CAAOoQ,OAAO,GAAK,sCAAsC,CAAC;AAAA;AAClG,IAAMC,0BAA0B,GAAGF,SAAS;AAE5C,IAAMG,UAAU,GAAG,EAAE;AAErB,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAGH,OAAO;EAAA,OAAIE,UAAU,CAAC/P,IAAI,CAAC6P,OAAO,CAAC;AAAA;AAE3D,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EACrB;EACCF,UAAU,CAAC9O,OAAO,CAAC,UAAAiP,KAAK;IAAA,OAAInN,OAAO,CAACC,GAAG,MAAAvD,MAAA,CAAOyQ,KAAK,GAAK,0CAA0C,CAAC;EAAA,EAAC;EAEpGH,UAAU,CAAC/V,MAAM,GAAG,CAAC;AACtB,CAAC;AAIDgW,eAAe,sBAAAvQ,MAAA,CAAuBoB,IAAI,CAACsP,SAAS,CAACC,mBAAmB,CAAG,CAAC;AAAC,IAIvEC,WAAW;EAyEhB,SAAAA,YAAA,EACA;IAAA,IADavJ,OAAO,GAAA7M,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC,CAAC;IAAAuG,eAAA,OAAA6P,WAAA;IAExBxP,IAAI,CAACyP,gBAAgB,GAAG,IAAI;IAE5B,IAAI,CAACxJ,OAAO,GAAGA,OAAO;IAEtB,IAAM1G,YAAY,GAAG,IAAI;IAAC,IAIpBmQ,kBAAkB;MAEvB,SAAAA,mBAAA,EACA;QAAA/P,eAAA,OAAA+P,kBAAA;QACC,IAAI,CAACC,aAAa,GAAG,CAAC;MACvB;MAAClQ,YAAA,CAAAiQ,kBAAA;QAAA1I,GAAA;QAAAzL,KAAA,EAED,SAAAqU,IAAKC,SAAS,EACd;UAAA,IAAA5R,KAAA;UAAA,IADgB6R,SAAS,GAAA1W,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGgI,aAAa;UAExC,EAAE,IAAI,CAACuO,aAAa;UAEpB,IAAI,IAAI,CAACA,aAAa,GAAG,CAAC,EAC1B;YACC,IAAI,CAACI,cAAc,GAAGF,SAAS;YAC/B,IAAI,CAACG,cAAc,GAAGF,SAAS;YAE/B,OAAO,KAAK;UACb;UAEAvQ,YAAY,CAACjE,OAAO,CAAC2U,iBAAiB,CAAC,CAAC;UAExC,OAAOvL,OAAO,CAACwL,GAAG,CAACL,SAAS,CAAC,CAAC,CAAC,CAC7B9K,IAAI,CAEJ,UAAAoL,QAAQ,EACR;YACC5Q,YAAY,CAACjE,OAAO,CAAC8U,kBAAkB,CAAC,CAAC;YAEzCN,SAAS,CAACK,QAAQ,CAAC;YAEnB,IAAIlS,KAAI,CAAC0R,aAAa,GAAG,CAAC,EAC1B;cACC1R,KAAI,CAAC0R,aAAa,GAAG,CAAC;cAEtB,OAAO1R,KAAI,CAAC2R,GAAG,CAAC3R,KAAI,CAAC8R,cAAc,EAAE9R,KAAI,CAAC+R,cAAc,CAAC;YAC1D;YAEA/R,KAAI,CAAC0R,aAAa,GAAG,CAAC;YAEtB,OAAO,IAAI;UACZ,CACD,CAAC;QACH;MAAC;QAAA3I,GAAA;QAAAzL,KAAA,EAED,SAAA8U,OAAQR,SAAS,EACjB;UAAA,IAAApJ,MAAA;UAAA,IADmBqJ,SAAS,GAAA1W,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGgI,aAAa;UAE3C,EAAE,IAAI,CAACuO,aAAa;UAEpB,IAAI,IAAI,CAACA,aAAa,GAAG,CAAC,EAC1B;YACC,IAAI,CAACI,cAAc,GAAGF,SAAS;YAC/B,IAAI,CAACG,cAAc,GAAGF,SAAS;YAE/B,OAAO,KAAK;UACb;UAEAvQ,YAAY,CAACjE,OAAO,CAAC2U,iBAAiB,CAAC,CAAC;UAExCK,WAAG,CAAC,yCAAyC,EAAE/Q,YAAY,CAACrG,IAAI,CAACqG,YAAY,CAAClE,OAAO,CAACkV,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;UAEzG,OAAO7L,OAAO,CAACwL,GAAG,CAACL,SAAS,CAAC,CAAC,CAAC,CAC7B9K,IAAI,CAEJ,UAAAoL,QAAQ,EACR;YACCG,WAAG,CAAC,uCAAuC,EAAE/Q,YAAY,CAACrG,IAAI,CAACqG,YAAY,CAAClE,OAAO,CAACkV,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvGhR,YAAY,CAACjE,OAAO,CAAC8U,kBAAkB,CAAC,CAAC;YAEzCN,SAAS,CAACK,QAAQ,CAAC;YAEnB,IAAI1J,MAAI,CAACkJ,aAAa,GAAG,CAAC,EAC1B;cACClJ,MAAI,CAACkJ,aAAa,GAAG,CAAC;cAEtB,OAAOlJ,MAAI,CAACmJ,GAAG,CAACnJ,MAAI,CAACsJ,cAAc,EAAEtJ,MAAI,CAACuJ,cAAc,CAAC;YAC1D;YAEAvJ,MAAI,CAACkJ,aAAa,GAAG,CAAC;YAEtB,OAAO,IAAI;UACZ,CACD,CAAC;QACH;MAAC;QAAA3I,GAAA;QAAAzL,KAAA;UAAA,IAAAiV,SAAA,GAAAjD,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAA0E,QAAgBZ,SAAS;YAAA,IAAAa,MAAA;YAAA,IAAAZ,SAAA;cAAAa,KAAA,GAAAvX,SAAA;YAAA,OAAAsO,mBAAA,GAAAmB,IAAA,UAAA+H,SAAAC,QAAA;cAAA,kBAAAA,QAAA,CAAAvE,IAAA,GAAAuE,QAAA,CAAA5F,IAAA;gBAAA;kBAAE6E,SAAS,GAAAa,KAAA,CAAAxX,MAAA,QAAAwX,KAAA,QAAAtX,SAAA,GAAAsX,KAAA,MAAGvP,aAAa;kBAEnD,EAAE,IAAI,CAACuO,aAAa;kBAAC,MAEjB,IAAI,CAACA,aAAa,GAAG,CAAC;oBAAAkB,QAAA,CAAA5F,IAAA;oBAAA;kBAAA;kBAEzB,IAAI,CAAC8E,cAAc,GAAGF,SAAS;kBAC/B,IAAI,CAACG,cAAc,GAAGF,SAAS;kBAAC,OAAAe,QAAA,CAAA/F,MAAA,WAEzB,KAAK;gBAAA;kBAGbvL,YAAY,CAACjE,OAAO,CAAC2U,iBAAiB,CAAC,CAAC;kBAACY,QAAA,CAAAC,EAAA,GAElCpM,OAAO;kBAAAmM,QAAA,CAAA5F,IAAA;kBAAA,OAAW4E,SAAS,CAAC,CAAC;gBAAA;kBAAAgB,QAAA,CAAAE,EAAA,GAAAF,QAAA,CAAAlG,IAAA;kBAAA,OAAAkG,QAAA,CAAA/F,MAAA,WAAA+F,QAAA,CAAAC,EAAA,CAArBZ,GAAG,CAAAvJ,IAAA,CAAAkK,QAAA,CAAAC,EAAA,EAAAD,QAAA,CAAAE,EAAA,EAChBhM,IAAI,CAEJ,UAAAoL,QAAQ,EACR;oBACC5Q,YAAY,CAACjE,OAAO,CAAC8U,kBAAkB,CAAC,CAAC;oBAEzCN,SAAS,CAACK,QAAQ,CAAC;oBAEnB,IAAIO,MAAI,CAACf,aAAa,GAAG,CAAC,EAC1B;sBACCe,MAAI,CAACf,aAAa,GAAG,CAAC;sBAEtB,OAAOe,MAAI,CAACM,QAAQ,CAACN,MAAI,CAACX,cAAc,EAAEW,MAAI,CAACV,cAAc,CAAC;oBAC/D;oBAEAU,MAAI,CAACf,aAAa,GAAG,CAAC;oBAEtB,OAAO,IAAI;kBACZ,CAAC;gBAAA;gBAAA;kBAAA,OAAAkB,QAAA,CAAApE,IAAA;cAAA;YAAA,GAAAgE,OAAA;UAAA,CAEH;UAAA,SAAAO,SAAAC,EAAA;YAAA,OAAAT,SAAA,CAAAxP,KAAA,OAAA5H,SAAA;UAAA;UAAA,OAAA4X,QAAA;QAAA;MAAA;QAAAhK,GAAA;QAAAzL,KAAA,EAED,SAAA2V,KAAMrB,SAAS,EACf;UAAA,IADiBC,SAAS,GAAA1W,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGgI,aAAa;UAEzC7B,YAAY,CAACjE,OAAO,CAAC2U,iBAAiB,CAAC,CAAC;UAExC,OAAOvL,OAAO,CAACwL,GAAG,CAACL,SAAS,CAAC,CAAC,CAAC,CAC7B9K,IAAI,CACJ,YACD;YACCxF,YAAY,CAACjE,OAAO,CAAC8U,kBAAkB,CAAC,CAAC;YAEzCN,SAAS,CAAC,CAAC;UACZ,CAAC,CAAC;QACJ;MAAC;QAAA9I,GAAA;QAAAzL,KAAA;UAAA,IAAA4V,UAAA,GAAA5D,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAAqF,SAAiBvB,SAAS;YAAA,IAAAC,SAAA;cAAAuB,MAAA,GAAAjY,SAAA;YAAA,OAAAsO,mBAAA,GAAAmB,IAAA,UAAAyI,UAAAC,SAAA;cAAA,kBAAAA,SAAA,CAAAjF,IAAA,GAAAiF,SAAA,CAAAtG,IAAA;gBAAA;kBAAE6E,SAAS,GAAAuB,MAAA,CAAAlY,MAAA,QAAAkY,MAAA,QAAAhY,SAAA,GAAAgY,MAAA,MAAGjQ,aAAa;kBAEpD7B,YAAY,CAACjE,OAAO,CAAC2U,iBAAiB,CAAC,CAAC;kBAACsB,SAAA,CAAAT,EAAA,GAElCpM,OAAO;kBAAA6M,SAAA,CAAAtG,IAAA;kBAAA,OAAW4E,SAAS,CAAC,CAAC;gBAAA;kBAAA0B,SAAA,CAAAR,EAAA,GAAAQ,SAAA,CAAA5G,IAAA;kBAAA,OAAA4G,SAAA,CAAAzG,MAAA,WAAAyG,SAAA,CAAAT,EAAA,CAArBZ,GAAG,CAAAvJ,IAAA,CAAA4K,SAAA,CAAAT,EAAA,EAAAS,SAAA,CAAAR,EAAA,EAChBhM,IAAI,CACJ,YACD;oBACCxF,YAAY,CAACjE,OAAO,CAAC8U,kBAAkB,CAAC,CAAC;oBAEzCN,SAAS,CAAC,CAAC;kBACZ,CAAC;gBAAA;gBAAA;kBAAA,OAAAyB,SAAA,CAAA9E,IAAA;cAAA;YAAA,GAAA2E,QAAA;UAAA,CACF;UAAA,SAAAI,UAAAC,GAAA;YAAA,OAAAN,UAAA,CAAAnQ,KAAA,OAAA5H,SAAA;UAAA;UAAA,OAAAoY,SAAA;QAAA;MAAA;MAAA,OAAA9B,kBAAA;IAAA;IAGF,IAAI,CAACA,kBAAkB,GAAGA,kBAAkB;;IAI5C;EACD;EAACjQ,YAAA,CAAA+P,WAAA;IAAAxI,GAAA;IAAAzL,KAAA,EAED,SAAAoH,UAAUzJ,IAAI,EACd;MACC,OAAO,IAAI,CAACoC,OAAO,CAACoW,yBAAyB,CAACC,GAAG,CAACzY,IAAI,CAAC;IACxD;EAAC;IAAA8N,GAAA;IAAAzL,KAAA;MAAA,IAAAqW,MAAA,GAAArE,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAA8F,SAAalP,SAAS;QAAA,IAAA9B,IAAA;UAAAC,IAAA;UAAAC,IAAA;UAAA+Q,MAAA,GAAA1Y,SAAA;QAAA,OAAAsO,mBAAA,GAAAmB,IAAA,UAAAkJ,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1F,IAAA,GAAA0F,SAAA,CAAA/G,IAAA;YAAA;cAAA,KAAApK,IAAA,GAAAiR,MAAA,CAAA3Y,MAAA,EAAK2H,IAAI,OAAA7B,KAAA,CAAA4B,IAAA,OAAAA,IAAA,WAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;gBAAJD,IAAI,CAAAC,IAAA,QAAA+Q,MAAA,CAAA/Q,IAAA;cAAA;cAE9B,IAAI,CAACkE,UAAU,GAAGnE,IAAI;cAEtB,CAAC,IAAI,CAACkE,UAAU,GAAGrC,SAAS,EAAA3B,KAAA,SAAKF,IAAI,CAAC;cAEtC,IAAI,CAACxF,OAAO,CAAC2W,oBAAoB,CAAC,CAAC;cAACD,SAAA,CAAA/G,IAAA;cAAA,OAE9B,IAAI,CAACxG,aAAa;YAAA;cAExB,IAAI,CAACD,WAAW,GAAG,CAAC;YAAC;YAAA;cAAA,OAAAwN,SAAA,CAAAvF,IAAA;UAAA;QAAA,GAAAoF,QAAA;MAAA,CACrB;MAAA,SAAA1F,MAAA+F,GAAA;QAAA,OAAAN,MAAA,CAAA5Q,KAAA,OAAA5H,SAAA;MAAA;MAAA,OAAA+S,KAAA;IAAA;EAAA;IAAAnF,GAAA;IAAAzL,KAAA;MAAA,IAAA4W,YAAA,GAAA5E,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAAqG,SAAAC,IAAA;QAAA,IAAAC,MAAA;QAAA,IAAAC,mBAAA,EAAAlR,WAAA,EAAAmR,cAAA,EAAAC,WAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAC,iBAAA,EAAAtX,OAAA,EAAAuX,oBAAA;QAAA,OAAAnL,mBAAA,GAAAmB,IAAA,UAAAiK,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzG,IAAA,GAAAyG,SAAA,CAAA9H,IAAA;YAAA;cAAqBsH,mBAAmB,GAAAF,IAAA,CAAnBE,mBAAmB,EAAElR,WAAW,GAAAgR,IAAA,CAAXhR,WAAW,EAAEmR,cAAc,GAAAH,IAAA,CAAdG,cAAc,EAAEC,WAAW,GAAAJ,IAAA,CAAXI,WAAW,EAAEC,IAAI,GAAAL,IAAA,CAAJK,IAAI,EAAEC,KAAK,GAAAN,IAAA,CAALM,KAAK;cAE9F;cACA,IAAI,CAACK,cAAc,GAAG;gBAAEC,GAAG,EAAE,CAAC;cAAE,CAAC;cAEjC1U,MAAM,CAACC,IAAI,CAACgU,cAAc,CAAC,CACzBpS,OAAO,CAEP,UAAA8S,MAAM,EACN;gBACC3U,MAAM,CAACC,IAAI,CAACgU,cAAc,CAACU,MAAM,CAAC,CAAC,CACjC9S,OAAO,CAEP,UAAA+S,aAAa,EACb;kBACC,IAAI,CAACb,MAAI,CAACU,cAAc,CAACE,MAAM,CAAC,EAChC;oBACCZ,MAAI,CAACU,cAAc,CAACE,MAAM,CAAC,GAAG,CAAC,CAAC;kBACjC;kBAEAZ,MAAI,CAACU,cAAc,CAACE,MAAM,CAAC,CAACC,aAAa,CAAC,GAAG,CAAC;;kBAE9C;kBACA;kBACAX,cAAc,CAACU,MAAM,CAAC,CAACC,aAAa,CAAC,GAAGX,cAAc,CAACU,MAAM,CAAC,CAACC,aAAa,CAAC,IAAI/R,aAAa;gBAC/F,CACD,CAAC;cACH,CACD,CAAC;cAEIwR,iBAAiB,GAAG,CAAC,CAAC;cAE5BrU,MAAM,CAACwF,MAAM,CAAC6O,iBAAiB,EAAEJ,cAAc,CAAC;cAEhDjU,MAAM,CAACwF,MAAM,CAEZ6O,iBAAiB,CAACK,GAAG,EAErB5R,WACD,CAAC;;cAED;cACA,IAAI,IAAI,CAAC7H,MAAM,EACf;gBACCoZ,iBAAiB,CAACK,GAAG,CAACzZ,MAAM,GAAG,IAAI,CAACA,MAAM;cAC3C;cAEA+Y,mBAAmB,CACjBnS,OAAO,CAEP,UAAAgT,kBAAkB,EAClB;gBACC,IAAI,CAACR,iBAAiB,CAACQ,kBAAkB,CAACF,MAAM,CAAC,EACjD;kBACCN,iBAAiB,CAACQ,kBAAkB,CAACF,MAAM,CAAC,GAAG,CAAC,CAAC;gBAClD;gBAEA,IAAI,CAACN,iBAAiB,CAACQ,kBAAkB,CAACF,MAAM,CAAC,CAACE,kBAAkB,CAAChY,IAAI,CAAC,EAC1E;kBACC,IAAIuX,KAAK,EACT;oBACC9D,SAAS,WAAAjQ,MAAA,CAAYwU,kBAAkB,CAACF,MAAM,eAAaE,kBAAkB,CAAChY,IAAI,CAAC;kBACpF;kBAEAwX,iBAAiB,CAACQ,kBAAkB,CAACF,MAAM,CAAC,CAACE,kBAAkB,CAAChY,IAAI,CAAC,GAAGgG,aAAa;kBACrF;;kBAEA;kBACA;kBACA;kBACA;;kBAEA;kBACA;kBACA;kBACA;gBACD;cACD,CACD,CAAC;cAEE9F,OAAO,GAAG,IAAI;cAAA,KAEdmX,WAAW;gBAAAM,SAAA,CAAA9H,IAAA;gBAAA;cAAA;cAAA8H,SAAA,CAAA9H,IAAA;cAAA,OAGPoI,WAAW,CAACC;cAClB;cAAA,CAECb,WAAW,EAEXG,iBACD,CAAC;YAAA;cAPIC,oBAAoB,GAAAE,SAAA,CAAApI,IAAA;cAS1B,IAAIgI,KAAK,EACT;gBACC9D,SAAS,CAACgE,oBAAoB,CAAC;cAChC;;cAEA;cAEGvX,OAAO,GAAKuX,oBAAoB,CAAhCvX,OAAO;cAAAyX,SAAA,CAAA9H,IAAA;cAAA;YAAA;cAIV;cACA;;cAEA3P,OAAO,GAAGoX,IAAI,CAACE,iBAAiB,CAAC;YAAC;cAGnC;cACA,IAAI,CAAC,IAAI,CAACpZ,MAAM,EAChB;gBACC,IAAI,CAACA,MAAM,GAAG8B,OAAO,CAAC9B,MAAM;cAC7B;cAAC,OAAAuZ,SAAA,CAAAjI,MAAA,WAEMxP,OAAO;YAAA;YAAA;cAAA,OAAAyX,SAAA,CAAAtG,IAAA;UAAA;QAAA,GAAA2F,QAAA;MAAA,CACd;MAAA,SAAAkB,YAAAC,GAAA;QAAA,OAAApB,YAAA,CAAAnR,KAAA,OAAA5H,SAAA;MAAA;MAAA,OAAAka,WAAA;IAAA;EAAA;IAAAtM,GAAA;IAAAzL,KAAA;MAAA,IAAAiY,KAAA,GAAAjG,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAA0H,SAAAC,KAAA;QAAA,IAAAC,MAAA;QAAA,IAAAjB,IAAA,EAAAkB,YAAA,EAAApa,MAAA,EAAAqa,aAAA,EAAArB,cAAA,EAAAsB,mBAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,mBAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,WAAA,EAAAC,qBAAA,EAAAxW,gBAAA,EAAAyW,WAAA,EAAA9B,KAAA,EAAA+B,qBAAA,EAAAC,qBAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAxT,WAAA,EAAAoR,WAAA,EAAAF,mBAAA,EAAAuC,qBAAA,EAAAC,sBAAA,EAAAC,eAAA,EAAAC,qBAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAja,IAAA,EAAAka,oBAAA,EAAAC,qBAAA,EAAA/W,iBAAA,EAAAD,yBAAA;QAAA,OAAAqJ,mBAAA,GAAAmB,IAAA,UAAAyM,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAjJ,IAAA,GAAAiJ,SAAA,CAAAtK,IAAA;YAAA;cAGCyH,IAAI,GAAAgB,KAAA,CAAJhB,IAAI,EAAAkB,YAAA,GAAAF,KAAA,CACJla,MAAM,EAANA,MAAM,GAAAoa,YAAA,cAAG,IAAI,GAAAA,YAAA,EAAAC,aAAA,GAAAH,KAAA,CACb8B,OAAO,EAAEhD,cAAc,GAAAqB,aAAA,cAAG;gBAAEZ,GAAG,EAAE,CAAC;cAAE,CAAC,GAAAY,aAAA,EAAAC,mBAAA,GAAAJ,KAAA,CACrCK,aAAa,EAAbA,aAAa,GAAAD,mBAAA,cAAGza,SAAS,GAAAya,mBAAA,EAAAE,qBAAA,GAAAN,KAAA,CACzBO,eAAe,EAAfA,eAAe,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAR,KAAA,CACtBS,gBAAgB,EAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA,EAAAE,mBAAA,GAAAV,KAAA,CACxBW,aAAa,EAAbA,aAAa,GAAAD,mBAAA,cAAG;gBAAEqB,OAAO,EAAE,KAAK;gBAAEC,OAAO,EAAE,KAAK;gBAAEC,OAAO,EAAE,KAAK;gBAAEC,MAAM,EAAE;cAAK,CAAC,GAAAxB,mBAAA,EAAAE,iBAAA,GAAAZ,KAAA,CAChFa,WAAW,EAAXA,WAAW,GAAAD,iBAAA,cAAG,IAAI,GAAAA,iBAAA,EAAAE,qBAAA,GAAAd,KAAA,CAClB1V,gBAAgB,EAAhBA,gBAAgB,GAAAwW,qBAAA,cAAG,KAAK,GAAAA,qBAAA,EAAAC,WAAA,GAAAf,KAAA,CACxBf,KAAK,EAALA,KAAK,GAAA8B,WAAA,cAAG,KAAK,GAAAA,WAAA,EAAAC,qBAAA,GAAAhB,KAAA,CACbiB,qBAAqB,EAArBA,qBAAqB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;cAGxBE,SAAS,GAAG,IAAI,EAEpB;cACA,IAAI,CAAClC,IAAI,GAAGA,IAAI;cAEhB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAC5B;gBACC;gBACA,IAAIA,IAAI,CAAC/T,UAAU,CAAC,UAAU,CAAC,EAC/B;kBACCiW,SAAS,GAAGhG,sBAAsB;kBAElC8D,IAAI,GAAG,IAAImD,QAAQ,CAACnD,IAAI,CAAC;kBAEzBvD,eAAe,kCAAAvQ,MAAA,CAAmC8T,IAAI,CAAC3W,WAAW,CAACX,IAAI,CAAG,CAAC;gBAC5E;gBACA;gBAAA,KAEA;kBACCsX,IAAI,GAAG1Y,UAAU,CAAC8b,IAAI,CAACC,IAAI,CAACrD,IAAI,CAAC,EAAE,UAAArK,CAAC;oBAAA,OAAIA,CAAC,CAAC2N,UAAU,CAAC,CAAC,CAAC;kBAAA,EAAC;;kBAExD;kBACA,IAAIhW,IAAI,CAAC8D,iBAAiB,EAC1B;oBACO+Q,SAAS,GAAGnC,IAAI;oBAEtBA,IAAI,GAAG,IAAI1Y,UAAU,CAAC,IAAI8J,iBAAiB,CAAC4O,IAAI,CAACvZ,MAAM,CAAC,CAAC;oBAEzDuZ,IAAI,CAAC3U,GAAG,CAAC8W,SAAS,CAAC;kBACpB;kBAEA,IAAI,CAACnC,IAAI,GAAGA,IAAI;kBAEhBkC,SAAS,GAAGjG,sBAAsB;kBAElCQ,eAAe,gCAAAvQ,MAAA,CAAiC8T,IAAI,CAAC3W,WAAW,CAACX,IAAI,CAAG,CAAC;gBAC1E;cACD,CAAC,MACI,IAAI,OAAOsX,IAAI,KAAK,UAAU,EACnC;gBACCkC,SAAS,GAAGhG,sBAAsB;gBAElC,IAAI,CAAC8D,IAAI,GAAGA,IAAI,CAACuD,QAAQ,CAAC,CAAC;gBAE3B9G,eAAe,sBAAsB,CAAC;cACvC;cACA;cACA;cACA;cAAA,KAEA;gBACCyF,SAAS,GAAGjG,sBAAsB;gBAElCQ,eAAe,eAAAvQ,MAAA,CAAgB8T,IAAI,CAAC3W,WAAW,CAACX,IAAI,CAAG,CAAC;cACzD;cAEA+T,eAAe,eAAAvQ,MAAA,CAAgBgW,SAAS,KAAKjG,sBAAsB,GAAG,UAAU,GAAG,UAAU,CAAG,CAAC;;cAEjG;cAIMtN,WAAW,GAAG6U,wDAAU,CAAC,IAAI,CAAC;cAAA,MAIhCtB,SAAS,KAAKjG,sBAAsB;gBAAA4G,SAAA,CAAAtK,IAAA;gBAAA;cAAA;cAAAsK,SAAA,CAAAtK,IAAA;cAAA,OAEboI,WAAW,CAAC8C,OAAO,CAACzD,IAAI,CAAC;YAAA;cAA7CD,WAAW,GAAA8C,SAAA,CAAA5K,IAAA;cAEjB,IAAIgI,KAAK,EACT;gBACC9D,SAAS,CAAC4D,WAAW,CAAC;cACvB;cAEMF,mBAAmB,GAAGc,WAAW,CAAC+C,MAAM,CAACZ,OAAO,CAAC/C,WAAW,CAAC,EACnE;cAEA,IAAI,CAACjZ,MAAM,GAAG,IAAI;;cAElB;cACA;cACA,IAAIA,MAAM,EACV;gBACC,IAAI,CAACA,MAAM,GAAGA,MAAM;gBAEpB2V,eAAe,CAAC,uBAAuB,CAAC;gBACxCA,eAAe,CAAC,qBAAqB,CAAC;cACvC,CAAC,MAED;gBAAA2F,qBAAA,GAEEvC,mBAAmB,CACjBtS,MAAM,CAAC,UAACoW,WAAW;kBAAA,OAAMA,WAAW,CAACnP,IAAI,KAAK,QAAQ;gBAAA,CAAC,CAAC,EAAA6N,sBAAA,GAAAjV,cAAA,CAAAgV,qBAAA,MAFnDE,eAAe,GAAAD,sBAAA;gBAIjBE,qBAAqB,GAAG1N,OAAO,CAACvH,IAAI,CAAC8D,iBAAiB,CAAC,IAAI,CAACqQ,gBAAgB;gBAElF,IAAIa,eAAe,EACnB;kBACC7F,eAAe,CAAC,uBAAuB,CAAC;kBAEpC+F,WAAW,GAAG,IAAI,EAEtB;kBACA;kBACA;kBACA;kBACA;kBACA;kBACA,IAAIF,eAAe,CAACzY,IAAI,EACxB;oBACC2Y,WAAW,GACX;sBACC;sBACAS,OAAO,EAAEX,eAAe,CAACzY,IAAI,CAACmZ,OAAO,IAAIV,eAAe,CAACzY,IAAI,CAACkZ,OAAO;sBACrEC,OAAO,EAAEV,eAAe,CAACzY,IAAI,CAACmZ,OAAO,IAAIV,eAAe,CAACzY,IAAI,CAACkZ,OAAO;sBACrEG,MAAM,EAAEZ,eAAe,CAACzY,IAAI,CAACqZ,MAAM,IAAIX;oBACxC,CAAC;kBACF;kBACA;kBAAA,KAEA;oBACCC,WAAW,GACX;sBACC;sBACAS,OAAO,EAAEtB,aAAa,CAACsB,OAAO;sBAC9BD,OAAO,EAAErB,aAAa,CAACqB,OAAO;sBAAE;sBAChC;sBACAE,MAAM,EAAEvB,aAAa,CAACuB,MAAM,IAAIX;oBACjC,CAAC;kBACF;kBAEA,IAAI,CAACzb,MAAM,GAAG,IAAI6Z,WAAW,CAACiD,MAAM,CAACpB,WAAW,CAAC;kBAEjD/F,eAAe,iBAAAvQ,MAAA,CAAkBsW,WAAW,CAACU,MAAM,GAAG,QAAQ,GAAG,YAAY,CAAG,CAAC;gBAClF;gBACA;gBACA;gBAAA,KAEA;kBACCzG,eAAe,CAAC,uBAAuB,CAAC;gBACzC;cACD;cAACoG,SAAA,CAAAtK,IAAA;cAAA,OAEoB,IAAI,CAACqI,WAAW,CAAC;gBAAEf,mBAAmB,EAAnBA,mBAAmB;gBAAElR,WAAW,EAAXA,WAAW;gBAAEmR,cAAc,EAAdA,cAAc;gBAAEC,WAAW,EAAXA,WAAW;gBAAEE,KAAK,EAALA;cAAM,CAAC,CAAC;YAAA;cAA/G,IAAI,CAACrX,OAAO,GAAAia,SAAA,CAAA5K,IAAA;cAAA4K,SAAA,CAAAtK,IAAA;cAAA;YAAA;cAmBZ,IAAI,CAACzR,MAAM,GAAG,IAAI;cAAC,KAEfA,MAAM;gBAAA+b,SAAA,CAAAtK,IAAA;gBAAA;cAAA;cAET,IAAI,CAACzR,MAAM,GAAGA,MAAM;cAAC+b,SAAA,CAAAtK,IAAA;cAAA;YAAA;cAIfkK,QAAQ,GACb,SADKA,QAAQA,CACbja,IAAI,EACJ;gBACC,IAAIgB,MAAM,GAAG,IAAI;gBAEjB,IACA;kBACCyX,MAAI,CAACna,MAAM,GAAG;oBAAEC,MAAM,EAAE,IAAIuG,IAAI,CAAC0G,WAAW,CAACxL,IAAI;kBAAE,CAAC;gBACrD,CAAC,CACD,OAAOqb,GAAG,EACV;kBACCrU,OAAO,CAACC,GAAG,CAACoU,GAAG,EAAErb,IAAI,CAAC;kBAEtBgB,MAAM,GAAG,KAAK;gBACf;gBAEA,OAAOA,MAAM;cACd,CAAC;cAAA,KAEEyY,qBAAqB;gBAAAY,SAAA,CAAAtK,IAAA;gBAAA;cAAA;cAEf/P,IAAI,GAAGmZ,aAAa,CAACsB,OAAO;YAAA;cAAA,KAEhCR,QAAQ,CAACja,IAAI,CAAC;gBAAAqa,SAAA,CAAAtK,IAAA;gBAAA;cAAA;cAEjBqF,WAAG,CAACpV,IAAI,EAAE,iBAAiB,CAAC;cAAA,OAAAqa,SAAA,CAAAzK,MAAA;YAAA;cAJU5P,IAAI,IAAI,CAAC;cAAAqa,SAAA,CAAAtK,IAAA;cAAA;YAAA;cAAAsK,SAAA,CAAAtK,IAAA;cAAA;YAAA;cAYjDkK,QAAQ,CAACd,aAAa,CAACsB,OAAO,CAAC;YAAC;cAIlC;cACA;cACMpD,oBAAmB,GACzB,CAAAxS,eAAA;gBAEEmT,MAAM,EAAE;cAAK,aACL,wBAAwB,EAEjC;cAAAqC,SAAA,CAAAtK,IAAA;cAAA,OAEoB,IAAI,CAACqI,WAAW,CAAC;gBAAEf,mBAAmB,EAAnBA,oBAAmB;gBAAElR,WAAW,EAAXA,WAAW;gBAAEmR,cAAc,EAAdA,cAAc;gBAAEE,IAAI,EAAJA,IAAI;gBAAEC,KAAK,EAALA;cAAM,CAAC,CAAC;YAAA;cAAxG,IAAI,CAACrX,OAAO,GAAAia,SAAA,CAAA5K,IAAA;YAAA;cAKb,IAAIsJ,eAAe,EACnB;gBACC,IAAI,CAACA,eAAe,CAAC,CAAC;gBAEtBpF,SAAS,CAAC,IAAI,CAACvV,GAAG,CAAC;gBAEnB6V,eAAe,sBAAAvQ,MAAA,CAAuB,IAAI,CAACpF,MAAM,CAACC,MAAM,CAAC+c,UAAU,CAAG,CAAC;gBACvEpH,eAAe,CAAC,CAAC;cAClB;cAEA,IAAI,IAAI,CAAC9T,OAAO,CAACmb,MAAM,EACvB;gBACC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACpb,OAAO,CAACmb,MAAM,CAAC1C,aAAa,CAAC;gBAErD5E,eAAe,iBAAAvQ,MAAA,CAAkB,IAAI,CAAC8X,WAAW,CAAG,CAAC;cACtD;cAEA,IAAInC,WAAW,EACf;gBACC,IAAI,CAAClZ,OAAO,GAAG,IAAI,CAACkZ,WAAW,CAAC,CAAC;gBAEjC,IAAI5B,KAAK,EACT;kBACC9D,SAAS,CAAC,IAAI,CAACxT,OAAO,CAAC;gBACxB;cACD;cAEA,IAAI2C,gBAAgB,EACpB;gBAAAqX,qBAAA,GAC0D,IAAI,CAACrX,gBAAgB,CAAC,CAAC,EAAxEM,iBAAiB,GAAA+W,qBAAA,CAAjB/W,iBAAiB,EAAED,yBAAyB,GAAAgX,qBAAA,CAAzBhX,yBAAyB;gBAEpDE,MAAM,CAACwF,MAAM,CAAC,IAAI,EAAE;kBAAEzF,iBAAiB,EAAjBA,iBAAiB;kBAAED,yBAAyB,EAAzBA;gBAA0B,CAAC,CAAC;gBAErE,IAAIsU,KAAK,EACT;kBACC9D,SAAS,CAAC,IAAI,CAACvQ,iBAAiB,CAAC;kBACjCuQ,SAAS,CAAC,IAAI,CAACxQ,yBAAyB,CAAC;gBAC1C;cACD;;cAEA;YAAA;YAAA;cAAA,OAAAkX,SAAA,CAAA9I,IAAA;UAAA;QAAA,GAAAgH,QAAA;MAAA,CACA;MAAA,SAAAkD,KAAAC,GAAA;QAAA,OAAApD,KAAA,CAAAxS,KAAA,OAAA5H,SAAA;MAAA;MAAA,OAAAud,IAAA;IAAA,IAED;IACA;IACA;IACA;EAAA;IAAA3P,GAAA;IAAAzL,KAAA,EAEA,SAAAgZ,YAAA,EACA;MAAA,IAAAsC,MAAA;MACC,IAAMxb,OAAO,GAAG,CAAC,CAAC;MAElB,IAAMyb,aAAa,GAAG,iBAAiB,CAAC3d,MAAM;MAE9CoF,MAAM,CAACC,IAAI,CAAC,IAAI,CAAClD,OAAO,CAAC,CACvB8E,OAAO,CAEP,UAAA2W,WAAW,EACX;QACC,IAAIA,WAAW,CAACpY,UAAU,CAAC,iBAAiB,CAAC,EAC7C;UACCtD,OAAO,CAAC0b,WAAW,CAACvK,KAAK,CAACsK,aAAa,CAAC,CAAC,GAAGD,MAAI,CAACvb,OAAO,CAACyb,WAAW,CAAC,CAAC,CAAC;QACxE;MACD,CACD,CAAC;MAEF,OAAO1b,OAAO;IACf;EAAC;IAAA2L,GAAA;IAAAzL,KAAA,EAED,SAAAyb,aAAA,EAAgB;MAAE,OAAO,IAAIxH,WAAW,CAACyH,MAAM,CAAC,IAAI,CAAC;IAAE;EAAC;IAAAjQ,GAAA;IAAAzL,KAAA,EACxD,SAAA2b,cAAA,EAAiB;MAAE,OAAO,IAAI1H,WAAW,CAAClL,OAAO,CAAC,IAAI,CAAC;IAAE;EAAC;IAAA0C,GAAA;IAAAzL,KAAA,EAC1D,SAAA4b,cAAA,EAAiB;MAAE,OAAO,IAAI3H,WAAW,CAAC4H,OAAO,CAAC,IAAI,CAAC;IAAE;EAAC;IAAApQ,GAAA;IAAAzL,KAAA;MAAA,IAAA8b,YAAA,GAAA9J,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAE1D,SAAAuL,SAAmBC,YAAY;QAAA,IAAAC,MAAA;QAAA,IAAApT,OAAA;QAAA,OAAAsD,mBAAA,GAAAmB,IAAA,UAAA4O,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApL,IAAA,GAAAoL,SAAA,CAAAzM,IAAA;YAAA;cAExB7G,OAAO,GACZ,IAAInF,KAAK,CAACsY,YAAY,CAAC,CACrBI,IAAI,CAAC,IAAI,CAAC,CACVC,GAAG,CAAC;gBAAA,OAAM,IAAIpI,WAAW,CAAC4H,OAAO,CAACI,MAAI,CAAC;cAAA,EAAC;cAAAE,SAAA,CAAAzM,IAAA;cAAA,OAErCvG,OAAO,CAACwL,GAAG,CAAC9L,OAAO,CAACwT,GAAG,CAAC,UAAAvT,MAAM;gBAAA,OAAIA,MAAM,CAACsS,IAAI,CAAC,CAAC;cAAA,EAAC,CAAC;YAAA;cAAA,OAAAe,SAAA,CAAA5M,MAAA,WAEhD1G,OAAO;YAAA;YAAA;cAAA,OAAAsT,SAAA,CAAAjL,IAAA;UAAA;QAAA,GAAA6K,QAAA;MAAA,CACd;MAAA,SAAAO,YAAAC,GAAA;QAAA,OAAAT,YAAA,CAAArW,KAAA,OAAA5H,SAAA;MAAA;MAAA,OAAAye,WAAA;IAAA;EAAA;IAAA7Q,GAAA;IAAAzL,KAAA,EAED,SAAAwc,iBAAkB3T,OAAO,EACzB;MACCA,OAAO,CACLgI,OAAO,CAAC,CAAC,CACThM,OAAO,CAAC,UAAAiE,MAAM;QAAA,OAAIA,MAAM,CAACc,SAAS,CAAC,CAAC;MAAA,EAAC;IACxC;EAAC;IAAA6B,GAAA;IAAAzL,KAAA;IA9rBD;IACA;IACA;IACA;;IAEA;IACA;IACA,SAAAS,6BAAqCgc,WAAW,EAChD;MACC;MACA,OAAOxI,WAAW,CAACyI,YAAY,CAACC,MAAM,CAAC,IAAIle,UAAU,CAACge,WAAW,CAAC,CAAC;IACpE;EAAC;IAAAhR,GAAA;IAAAzL,KAAA,EAED,SAAAsD,6BAAqCsZ,IAAI,EACzC;MACC,OAAO3I,WAAW,CAAC4I,YAAY,CAACC,MAAM,CAACF,IAAI,CAAC;IAC7C;EAAC;IAAAnR,GAAA;IAAAzL,KAAA;MAAA,IAAA+c,SAAA,GAAA/K,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CAED,SAAAwM,SAAA;QAAA,IAAArc,MAAA,EAAAsc,qBAAA,EAAA/F,WAAA;QAAA,OAAA/K,mBAAA,GAAAmB,IAAA,UAAA4P,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApM,IAAA,GAAAoM,SAAA,CAAAzN,IAAA;YAAA;cAEK/O,MAAM,GAAG,KAAK;cAAAwc,SAAA,CAAApM,IAAA;cAAAoM,SAAA,CAAAzN,IAAA;cAAA,OAKoB,0OAAmE;YAAA;cAAlGuN,qBAAqB,GAAAE,SAAA,CAAA/N,IAAA;cAAA+N,SAAA,CAAAzN,IAAA;cAAA,OAEDoI,WAAW,CAAC8C,OAAO,CAACqC,qBAAqB,CAAC;YAAA;cAA9D/F,WAAW,GAAAiG,SAAA,CAAA/N,IAAA;cAAA+N,SAAA,CAAAzN,IAAA;cAAA,OAKXoI,WAAW,CAACC,WAAW,CAE5Bb,WAAW,EAEX;gBACCQ,GAAG,EACH;kBACCzZ,MAAM,EAEL,IAAI6Z,WAAW,CAACiD,MAAM,CACrB;oBACAX,OAAO,EAAE,CAAC;oBACVD,OAAO,EAAE;kBACV,CAAC;gBAEH;cACD,CACD,CAAC;YAAA;cAED;cACA;cACA;cACA;;cAEAxZ,MAAM,GAAG,IAAI;cAACwc,SAAA,CAAAzN,IAAA;cAAA;YAAA;cAAAyN,SAAA,CAAApM,IAAA;cAAAoM,SAAA,CAAA5H,EAAA,GAAA4H,SAAA;cAId3J,SAAS,2BAAAnQ,MAAA,CAAA8Z,SAAA,CAAA5H,EAAA,CAAoC,CAAC;YAAC;cAGhD3B,eAAe,eAAAvQ,MAAA,CAAgB1C,MAAM,GAAG,IAAI,GAAG,KAAK,CAAG,CAAC;cAAC,OAAAwc,SAAA,CAAA5N,MAAA,WAElD5O,MAAM;YAAA;YAAA;cAAA,OAAAwc,SAAA,CAAAjM,IAAA;UAAA;QAAA,GAAA8L,QAAA;MAAA,CACb;MAAA,SAAAI,SAAA;QAAA,OAAAL,SAAA,CAAAtX,KAAA,OAAA5H,SAAA;MAAA;MAAA,OAAAuf,QAAA;IAAA;EAAA;EAAA,OAAAnJ,WAAA;AAAA;AAAAzP,eAAA,CAvEIyP,WAAW,kBAEM,IAAIoJ,WAAW,CAAC,OAAO,CAAC;AAAA7Y,eAAA,CAFzCyP,WAAW,kBAGM,IAAIqJ,WAAW,CAAC,CAAC;AAqsBxCrJ,WAAW,CAAC5O,SAAS,CAACqT,eAAe,GAAGA,+CAAe;AAEvD1V,MAAM,CAACwF,MAAM,CAACyL,WAAW,CAAC5O,SAAS,EAAEkY,qDAAsB,CAAC;AAI7CtJ,0EAAW,E;;;;;;;;;;;;;;;+CC1xB1B,qJAAA9H,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAtJ,MAAA,CAAAqC,SAAA,EAAAkH,CAAA,GAAAD,CAAA,CAAAE,cAAA,EAAAC,CAAA,GAAAzJ,MAAA,CAAA0J,cAAA,cAAAL,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAtM,KAAA,KAAAsG,CAAA,wBAAAqG,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAtG,CAAA,CAAAuG,QAAA,kBAAAC,CAAA,GAAAxG,CAAA,CAAAyG,aAAA,uBAAAC,CAAA,GAAA1G,CAAA,CAAA2G,WAAA,8BAAAC,OAAAb,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAtJ,MAAA,CAAA0J,cAAA,CAAAL,CAAA,EAAAD,CAAA,IAAApM,KAAA,EAAAsM,CAAA,EAAAa,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAAhB,CAAA,CAAAD,CAAA,WAAAc,MAAA,mBAAAb,CAAA,IAAAa,MAAA,YAAAA,OAAAb,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAgB,KAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAC,CAAA,QAAAjG,CAAA,GAAA8F,CAAA,IAAAA,CAAA,CAAA/G,SAAA,YAAAkI,SAAA,GAAAnB,CAAA,GAAAmB,SAAA,EAAAX,CAAA,GAAA5J,MAAA,CAAAwK,MAAA,CAAAlH,CAAA,CAAAjB,SAAA,GAAAyH,CAAA,OAAAW,OAAA,CAAAlB,CAAA,gBAAAE,CAAA,CAAAG,CAAA,eAAA5M,KAAA,EAAA0N,gBAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAQ,CAAA,MAAAF,CAAA,aAAAe,SAAAtB,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAAtL,IAAA,YAAA4M,GAAA,EAAAvB,CAAA,CAAAjB,IAAA,CAAAgB,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAArL,IAAA,WAAA4M,GAAA,EAAAvB,CAAA,QAAAD,CAAA,CAAAkB,IAAA,GAAAA,IAAA,MAAAO,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAV,UAAA,cAAAW,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAAlB,MAAA,CAAAkB,CAAA,EAAAxB,CAAA,qCAAAyB,CAAA,GAAArL,MAAA,CAAAsL,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAjC,CAAA,IAAAC,CAAA,CAAAnB,IAAA,CAAAmD,CAAA,EAAA3B,CAAA,MAAAwB,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAA9I,SAAA,GAAAkI,SAAA,CAAAlI,SAAA,GAAArC,MAAA,CAAAwK,MAAA,CAAAY,CAAA,YAAAM,sBAAArC,CAAA,gCAAAxH,OAAA,WAAAuH,CAAA,IAAAc,MAAA,CAAAb,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAAsC,OAAA,CAAAvC,CAAA,EAAAC,CAAA,sBAAAuC,cAAAvC,CAAA,EAAAD,CAAA,aAAAyC,OAAAvC,CAAA,EAAAG,CAAA,EAAAnG,CAAA,EAAAsG,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAAtB,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAI,CAAA,mBAAAK,CAAA,CAAA9L,IAAA,QAAAgM,CAAA,GAAAF,CAAA,CAAAc,GAAA,EAAAC,CAAA,GAAAb,CAAA,CAAAhN,KAAA,SAAA6N,CAAA,gBAAAnI,OAAA,CAAAmI,CAAA,KAAAtB,CAAA,CAAAnB,IAAA,CAAAyC,CAAA,eAAAzB,CAAA,CAAAhD,OAAA,CAAAyE,CAAA,CAAAiB,OAAA,EAAAtF,IAAA,WAAA6C,CAAA,IAAAwC,MAAA,SAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,gBAAAP,CAAA,IAAAwC,MAAA,UAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,QAAAR,CAAA,CAAAhD,OAAA,CAAAyE,CAAA,EAAArE,IAAA,WAAA6C,CAAA,IAAAW,CAAA,CAAAhN,KAAA,GAAAqM,CAAA,EAAA/F,CAAA,CAAA0G,CAAA,gBAAAX,CAAA,WAAAwC,MAAA,UAAAxC,CAAA,EAAA/F,CAAA,EAAAsG,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAc,GAAA,SAAAtB,CAAA,EAAAG,CAAA,oBAAAzM,KAAA,WAAAA,MAAAqM,CAAA,EAAAE,CAAA,aAAAwC,2BAAA,eAAA3C,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAAuC,MAAA,CAAAxC,CAAA,EAAAE,CAAA,EAAAH,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAA9C,IAAA,CAAAuF,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAArB,iBAAAtB,CAAA,EAAAE,CAAA,EAAAC,CAAA,QAAAE,CAAA,GAAAoB,CAAA,mBAAAvH,CAAA,EAAAsG,CAAA,QAAAH,CAAA,KAAAsB,CAAA,YAAAzC,KAAA,sCAAAmB,CAAA,KAAAuB,CAAA,oBAAA1H,CAAA,QAAAsG,CAAA,WAAA5M,KAAA,EAAAqM,CAAA,EAAA2C,IAAA,eAAAzC,CAAA,CAAA0C,MAAA,GAAA3I,CAAA,EAAAiG,CAAA,CAAAqB,GAAA,GAAAhB,CAAA,UAAAE,CAAA,GAAAP,CAAA,CAAA2C,QAAA,MAAApC,CAAA,QAAAE,CAAA,GAAAmC,mBAAA,CAAArC,CAAA,EAAAP,CAAA,OAAAS,CAAA,QAAAA,CAAA,KAAAiB,CAAA,mBAAAjB,CAAA,qBAAAT,CAAA,CAAA0C,MAAA,EAAA1C,CAAA,CAAA6C,IAAA,GAAA7C,CAAA,CAAA8C,KAAA,GAAA9C,CAAA,CAAAqB,GAAA,sBAAArB,CAAA,CAAA0C,MAAA,QAAAxC,CAAA,KAAAoB,CAAA,QAAApB,CAAA,GAAAuB,CAAA,EAAAzB,CAAA,CAAAqB,GAAA,EAAArB,CAAA,CAAA+C,iBAAA,CAAA/C,CAAA,CAAAqB,GAAA,uBAAArB,CAAA,CAAA0C,MAAA,IAAA1C,CAAA,CAAAgD,MAAA,WAAAhD,CAAA,CAAAqB,GAAA,GAAAnB,CAAA,GAAAsB,CAAA,MAAAK,CAAA,GAAAT,QAAA,CAAAvB,CAAA,EAAAE,CAAA,EAAAC,CAAA,oBAAA6B,CAAA,CAAApN,IAAA,QAAAyL,CAAA,GAAAF,CAAA,CAAAyC,IAAA,GAAAhB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAR,GAAA,KAAAK,CAAA,qBAAAjO,KAAA,EAAAoO,CAAA,CAAAR,GAAA,EAAAoB,IAAA,EAAAzC,CAAA,CAAAyC,IAAA,kBAAAZ,CAAA,CAAApN,IAAA,KAAAyL,CAAA,GAAAuB,CAAA,EAAAzB,CAAA,CAAA0C,MAAA,YAAA1C,CAAA,CAAAqB,GAAA,GAAAQ,CAAA,CAAAR,GAAA,mBAAAuB,oBAAA/C,CAAA,EAAAE,CAAA,QAAAC,CAAA,GAAAD,CAAA,CAAA2C,MAAA,EAAAxC,CAAA,GAAAL,CAAA,CAAAS,QAAA,CAAAN,CAAA,OAAAE,CAAA,KAAAJ,CAAA,SAAAC,CAAA,CAAA4C,QAAA,qBAAA3C,CAAA,IAAAH,CAAA,CAAAS,QAAA,eAAAP,CAAA,CAAA2C,MAAA,aAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,EAAA8C,mBAAA,CAAA/C,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAA2C,MAAA,kBAAA1C,CAAA,KAAAD,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,OAAA4B,SAAA,uCAAAjD,CAAA,iBAAA0B,CAAA,MAAA3H,CAAA,GAAAqH,QAAA,CAAAlB,CAAA,EAAAL,CAAA,CAAAS,QAAA,EAAAP,CAAA,CAAAsB,GAAA,mBAAAtH,CAAA,CAAAtF,IAAA,SAAAsL,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,GAAAtH,CAAA,CAAAsH,GAAA,EAAAtB,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,MAAArB,CAAA,GAAAtG,CAAA,CAAAsH,GAAA,SAAAhB,CAAA,GAAAA,CAAA,CAAAoC,IAAA,IAAA1C,CAAA,CAAAF,CAAA,CAAAqD,UAAA,IAAA7C,CAAA,CAAA5M,KAAA,EAAAsM,CAAA,CAAAoD,IAAA,GAAAtD,CAAA,CAAAuD,OAAA,eAAArD,CAAA,CAAA2C,MAAA,KAAA3C,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,GAAAC,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,IAAArB,CAAA,IAAAN,CAAA,CAAA2C,MAAA,YAAA3C,CAAA,CAAAsB,GAAA,OAAA4B,SAAA,sCAAAlD,CAAA,CAAA4C,QAAA,SAAAjB,CAAA,cAAA2B,aAAAvD,CAAA,QAAAD,CAAA,KAAAyD,MAAA,EAAAxD,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAA0D,QAAA,GAAAzD,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAA2D,UAAA,GAAA1D,CAAA,KAAAD,CAAA,CAAA4D,QAAA,GAAA3D,CAAA,WAAA4D,UAAA,CAAArM,IAAA,CAAAwI,CAAA,cAAA8D,cAAA7D,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAA8D,UAAA,QAAA/D,CAAA,CAAApL,IAAA,oBAAAoL,CAAA,CAAAwB,GAAA,EAAAvB,CAAA,CAAA8D,UAAA,GAAA/D,CAAA,aAAAqB,QAAApB,CAAA,SAAA4D,UAAA,MAAAJ,MAAA,aAAAxD,CAAA,CAAAxH,OAAA,CAAA+K,YAAA,cAAAQ,KAAA,iBAAA5B,OAAApC,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAQ,CAAA,OAAAN,CAAA,SAAAA,CAAA,CAAAlB,IAAA,CAAAgB,CAAA,4BAAAA,CAAA,CAAAsD,IAAA,SAAAtD,CAAA,OAAAiE,KAAA,CAAAjE,CAAA,CAAAxO,MAAA,SAAA6O,CAAA,OAAAnG,CAAA,YAAAoJ,KAAA,aAAAjD,CAAA,GAAAL,CAAA,CAAAxO,MAAA,OAAA2O,CAAA,CAAAnB,IAAA,CAAAgB,CAAA,EAAAK,CAAA,UAAAiD,IAAA,CAAA1P,KAAA,GAAAoM,CAAA,CAAAK,CAAA,GAAAiD,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAA1P,KAAA,GAAAqM,CAAA,EAAAqD,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAApJ,CAAA,CAAAoJ,IAAA,GAAApJ,CAAA,gBAAAkJ,SAAA,CAAA9J,OAAA,CAAA0G,CAAA,kCAAA8B,iBAAA,CAAA7I,SAAA,GAAA8I,0BAAA,EAAA1B,CAAA,CAAAgC,CAAA,mBAAAzO,KAAA,EAAAmO,0BAAA,EAAAf,YAAA,SAAAX,CAAA,CAAA0B,0BAAA,mBAAAnO,KAAA,EAAAkO,iBAAA,EAAAd,YAAA,SAAAc,iBAAA,CAAAoC,WAAA,GAAApD,MAAA,CAAAiB,0BAAA,EAAAnB,CAAA,wBAAAZ,CAAA,CAAAmE,mBAAA,aAAAlE,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAA7L,WAAA,WAAA4L,CAAA,KAAAA,CAAA,KAAA8B,iBAAA,6BAAA9B,CAAA,CAAAkE,WAAA,IAAAlE,CAAA,CAAAvM,IAAA,OAAAuM,CAAA,CAAAoE,IAAA,aAAAnE,CAAA,WAAArJ,MAAA,CAAAyN,cAAA,GAAAzN,MAAA,CAAAyN,cAAA,CAAApE,CAAA,EAAA8B,0BAAA,KAAA9B,CAAA,CAAAqE,SAAA,GAAAvC,0BAAA,EAAAjB,MAAA,CAAAb,CAAA,EAAAW,CAAA,yBAAAX,CAAA,CAAAhH,SAAA,GAAArC,MAAA,CAAAwK,MAAA,CAAAiB,CAAA,GAAApC,CAAA,KAAAD,CAAA,CAAAuE,KAAA,aAAAtE,CAAA,aAAAyC,OAAA,EAAAzC,CAAA,OAAAqC,qBAAA,CAAAE,aAAA,CAAAvJ,SAAA,GAAA6H,MAAA,CAAA0B,aAAA,CAAAvJ,SAAA,EAAAyH,CAAA,iCAAAV,CAAA,CAAAwC,aAAA,GAAAA,aAAA,EAAAxC,CAAA,CAAAwE,KAAA,aAAAvE,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAE,CAAA,EAAAnG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA6C,OAAA,OAAAyD,CAAA,OAAAgC,aAAA,CAAAtB,IAAA,CAAAjB,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAE,CAAA,GAAAnG,CAAA,UAAA8F,CAAA,CAAAmE,mBAAA,CAAAjE,CAAA,IAAAM,CAAA,GAAAA,CAAA,CAAA8C,IAAA,GAAAlG,IAAA,WAAA6C,CAAA,WAAAA,CAAA,CAAA2C,IAAA,GAAA3C,CAAA,CAAArM,KAAA,GAAA4M,CAAA,CAAA8C,IAAA,WAAAhB,qBAAA,CAAAD,CAAA,GAAAvB,MAAA,CAAAuB,CAAA,EAAAzB,CAAA,gBAAAE,MAAA,CAAAuB,CAAA,EAAA7B,CAAA,iCAAAM,MAAA,CAAAuB,CAAA,6DAAArC,CAAA,CAAAnJ,IAAA,aAAAoJ,CAAA,QAAAD,CAAA,GAAApJ,MAAA,CAAAqJ,CAAA,GAAAC,CAAA,gBAAAC,CAAA,IAAAH,CAAA,EAAAE,CAAA,CAAA1I,IAAA,CAAA2I,CAAA,UAAAD,CAAA,CAAAuE,OAAA,aAAAnB,KAAA,WAAApD,CAAA,CAAA1O,MAAA,SAAAyO,CAAA,GAAAC,CAAA,CAAAwE,GAAA,QAAAzE,CAAA,IAAAD,CAAA,SAAAsD,IAAA,CAAA1P,KAAA,GAAAqM,CAAA,EAAAqD,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAtD,CAAA,CAAAoC,MAAA,GAAAA,MAAA,EAAAf,OAAA,CAAApI,SAAA,KAAA7E,WAAA,EAAAiN,OAAA,EAAA2C,KAAA,WAAAA,MAAAhE,CAAA,aAAA2E,IAAA,WAAArB,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAAhD,CAAA,OAAA2C,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAArB,GAAA,GAAAvB,CAAA,OAAA4D,UAAA,CAAApL,OAAA,CAAAqL,aAAA,IAAA9D,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA0E,MAAA,OAAAzE,CAAA,CAAAnB,IAAA,OAAAkB,CAAA,MAAA+D,KAAA,EAAA/D,CAAA,CAAA2E,KAAA,cAAA3E,CAAA,IAAAD,CAAA,MAAA6E,IAAA,WAAAA,KAAA,SAAAlC,IAAA,WAAA3C,CAAA,QAAA4D,UAAA,IAAAE,UAAA,kBAAA9D,CAAA,CAAArL,IAAA,QAAAqL,CAAA,CAAAuB,GAAA,cAAAuD,IAAA,KAAA7B,iBAAA,WAAAA,kBAAAlD,CAAA,aAAA4C,IAAA,QAAA5C,CAAA,MAAAE,CAAA,kBAAA8E,OAAA7E,CAAA,EAAAE,CAAA,WAAAG,CAAA,CAAA5L,IAAA,YAAA4L,CAAA,CAAAgB,GAAA,GAAAxB,CAAA,EAAAE,CAAA,CAAAoD,IAAA,GAAAnD,CAAA,EAAAE,CAAA,KAAAH,CAAA,CAAA2C,MAAA,WAAA3C,CAAA,CAAAsB,GAAA,GAAAvB,CAAA,KAAAI,CAAA,aAAAA,CAAA,QAAAwD,UAAA,CAAArS,MAAA,MAAA6O,CAAA,SAAAA,CAAA,QAAAnG,CAAA,QAAA2J,UAAA,CAAAxD,CAAA,GAAAG,CAAA,GAAAtG,CAAA,CAAA6J,UAAA,iBAAA7J,CAAA,CAAAuJ,MAAA,SAAAuB,MAAA,aAAA9K,CAAA,CAAAuJ,MAAA,SAAAkB,IAAA,QAAAjE,CAAA,GAAAP,CAAA,CAAAnB,IAAA,CAAA9E,CAAA,eAAA0G,CAAA,GAAAT,CAAA,CAAAnB,IAAA,CAAA9E,CAAA,qBAAAwG,CAAA,IAAAE,CAAA,aAAA+D,IAAA,GAAAzK,CAAA,CAAAwJ,QAAA,SAAAsB,MAAA,CAAA9K,CAAA,CAAAwJ,QAAA,gBAAAiB,IAAA,GAAAzK,CAAA,CAAAyJ,UAAA,SAAAqB,MAAA,CAAA9K,CAAA,CAAAyJ,UAAA,cAAAjD,CAAA,aAAAiE,IAAA,GAAAzK,CAAA,CAAAwJ,QAAA,SAAAsB,MAAA,CAAA9K,CAAA,CAAAwJ,QAAA,qBAAA9C,CAAA,YAAA1B,KAAA,qDAAAyF,IAAA,GAAAzK,CAAA,CAAAyJ,UAAA,SAAAqB,MAAA,CAAA9K,CAAA,CAAAyJ,UAAA,YAAAR,MAAA,WAAAA,OAAAlD,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAA2D,UAAA,CAAArS,MAAA,MAAA0O,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAAwD,UAAA,CAAA3D,CAAA,OAAAG,CAAA,CAAAoD,MAAA,SAAAkB,IAAA,IAAAxE,CAAA,CAAAnB,IAAA,CAAAqB,CAAA,wBAAAsE,IAAA,GAAAtE,CAAA,CAAAsD,UAAA,QAAAzJ,CAAA,GAAAmG,CAAA,aAAAnG,CAAA,iBAAA+F,CAAA,mBAAAA,CAAA,KAAA/F,CAAA,CAAAuJ,MAAA,IAAAzD,CAAA,IAAAA,CAAA,IAAA9F,CAAA,CAAAyJ,UAAA,KAAAzJ,CAAA,cAAAsG,CAAA,GAAAtG,CAAA,GAAAA,CAAA,CAAA6J,UAAA,cAAAvD,CAAA,CAAA5L,IAAA,GAAAqL,CAAA,EAAAO,CAAA,CAAAgB,GAAA,GAAAxB,CAAA,EAAA9F,CAAA,SAAA2I,MAAA,gBAAAS,IAAA,GAAApJ,CAAA,CAAAyJ,UAAA,EAAA9B,CAAA,SAAAoD,QAAA,CAAAzE,CAAA,MAAAyE,QAAA,WAAAA,SAAAhF,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAArL,IAAA,QAAAqL,CAAA,CAAAuB,GAAA,qBAAAvB,CAAA,CAAArL,IAAA,mBAAAqL,CAAA,CAAArL,IAAA,QAAA0O,IAAA,GAAArD,CAAA,CAAAuB,GAAA,gBAAAvB,CAAA,CAAArL,IAAA,SAAAmQ,IAAA,QAAAvD,GAAA,GAAAvB,CAAA,CAAAuB,GAAA,OAAAqB,MAAA,kBAAAS,IAAA,yBAAArD,CAAA,CAAArL,IAAA,IAAAoL,CAAA,UAAAsD,IAAA,GAAAtD,CAAA,GAAA6B,CAAA,KAAAqD,MAAA,WAAAA,OAAAjF,CAAA,aAAAD,CAAA,QAAA6D,UAAA,CAAArS,MAAA,MAAAwO,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAA2D,UAAA,CAAA7D,CAAA,OAAAE,CAAA,CAAAyD,UAAA,KAAA1D,CAAA,cAAAgF,QAAA,CAAA/E,CAAA,CAAA6D,UAAA,EAAA7D,CAAA,CAAA0D,QAAA,GAAAE,aAAA,CAAA5D,CAAA,GAAA2B,CAAA,yBAAAsD,OAAAlF,CAAA,aAAAD,CAAA,QAAA6D,UAAA,CAAArS,MAAA,MAAAwO,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAA2D,UAAA,CAAA7D,CAAA,OAAAE,CAAA,CAAAuD,MAAA,KAAAxD,CAAA,QAAAE,CAAA,GAAAD,CAAA,CAAA6D,UAAA,kBAAA5D,CAAA,CAAAvL,IAAA,QAAAyL,CAAA,GAAAF,CAAA,CAAAqB,GAAA,EAAAsC,aAAA,CAAA5D,CAAA,YAAAG,CAAA,gBAAAnB,KAAA,8BAAAkG,aAAA,WAAAA,cAAApF,CAAA,EAAAE,CAAA,EAAAC,CAAA,gBAAA2C,QAAA,KAAArC,QAAA,EAAA2B,MAAA,CAAApC,CAAA,GAAAqD,UAAA,EAAAnD,CAAA,EAAAqD,OAAA,EAAApD,CAAA,oBAAA0C,MAAA,UAAArB,GAAA,GAAAvB,CAAA,GAAA4B,CAAA,OAAA7B,CAAA;AAAA,SAAA7H,eAAAiZ,GAAA,EAAAlX,CAAA,WAAAmX,eAAA,CAAAD,GAAA,KAAAE,qBAAA,CAAAF,GAAA,EAAAlX,CAAA,KAAAqX,2BAAA,CAAAH,GAAA,EAAAlX,CAAA,KAAAsX,gBAAA;AAAA,SAAAA,iBAAA,cAAApO,SAAA;AAAA,SAAAmO,4BAAAlR,CAAA,EAAAoR,MAAA,SAAApR,CAAA,qBAAAA,CAAA,sBAAAqR,iBAAA,CAAArR,CAAA,EAAAoR,MAAA,OAAAtR,CAAA,GAAAvJ,MAAA,CAAAqC,SAAA,CAAAqV,QAAA,CAAAtP,IAAA,CAAAqB,CAAA,EAAAwE,KAAA,aAAA1E,CAAA,iBAAAE,CAAA,CAAAjM,WAAA,EAAA+L,CAAA,GAAAE,CAAA,CAAAjM,WAAA,CAAAX,IAAA,MAAA0M,CAAA,cAAAA,CAAA,mBAAA7I,KAAA,CAAA6W,IAAA,CAAA9N,CAAA,OAAAF,CAAA,+DAAAwR,IAAA,CAAAxR,CAAA,UAAAuR,iBAAA,CAAArR,CAAA,EAAAoR,MAAA;AAAA,SAAAC,kBAAAN,GAAA,EAAAQ,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAR,GAAA,CAAA5f,MAAA,EAAAogB,GAAA,GAAAR,GAAA,CAAA5f,MAAA,WAAA0I,CAAA,MAAA2X,IAAA,OAAAva,KAAA,CAAAsa,GAAA,GAAA1X,CAAA,GAAA0X,GAAA,EAAA1X,CAAA,IAAA2X,IAAA,CAAA3X,CAAA,IAAAkX,GAAA,CAAAlX,CAAA,UAAA2X,IAAA;AAAA,SAAAP,sBAAApR,CAAA,EAAAwB,CAAA,QAAAzB,CAAA,WAAAC,CAAA,gCAAAK,MAAA,IAAAL,CAAA,CAAAK,MAAA,CAAAE,QAAA,KAAAP,CAAA,4BAAAD,CAAA,QAAAD,CAAA,EAAAG,CAAA,EAAAjG,CAAA,EAAA0G,CAAA,EAAAJ,CAAA,OAAAmB,CAAA,OAAAtB,CAAA,iBAAAnG,CAAA,IAAA+F,CAAA,GAAAA,CAAA,CAAAjB,IAAA,CAAAkB,CAAA,GAAAoD,IAAA,QAAA5B,CAAA,QAAA9K,MAAA,CAAAqJ,CAAA,MAAAA,CAAA,UAAA0B,CAAA,uBAAAA,CAAA,IAAA3B,CAAA,GAAA9F,CAAA,CAAA8E,IAAA,CAAAiB,CAAA,GAAA2C,IAAA,MAAApC,CAAA,CAAAhJ,IAAA,CAAAwI,CAAA,CAAApM,KAAA,GAAA4M,CAAA,CAAAhP,MAAA,KAAAkQ,CAAA,GAAAC,CAAA,iBAAAzB,CAAA,IAAAG,CAAA,OAAAF,CAAA,GAAAD,CAAA,yBAAAyB,CAAA,YAAA1B,CAAA,eAAAW,CAAA,GAAAX,CAAA,cAAArJ,MAAA,CAAAgK,CAAA,MAAAA,CAAA,2BAAAP,CAAA,QAAAF,CAAA,aAAAK,CAAA;AAAA,SAAA6Q,gBAAAD,GAAA,QAAA9Z,KAAA,CAAAC,OAAA,CAAA6Z,GAAA,UAAAA,GAAA;AAAA,SAAA/L,mBAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,EAAApG,GAAA,EAAAmC,GAAA,cAAAkE,IAAA,GAAAJ,GAAA,CAAAjG,GAAA,EAAAmC,GAAA,OAAA5N,KAAA,GAAA8R,IAAA,CAAA9R,KAAA,WAAA+R,KAAA,IAAAJ,MAAA,CAAAI,KAAA,iBAAAD,IAAA,CAAA9C,IAAA,IAAA5F,OAAA,CAAApJ,KAAA,YAAAmJ,OAAA,CAAAC,OAAA,CAAApJ,KAAA,EAAAwJ,IAAA,CAAAoI,KAAA,EAAAC,MAAA;AAAA,SAAAG,kBAAAC,EAAA,6BAAAxN,IAAA,SAAAc,IAAA,GAAA1H,SAAA,aAAAsL,OAAA,WAAAC,OAAA,EAAAuI,MAAA,QAAAD,GAAA,GAAAO,EAAA,CAAAxM,KAAA,CAAAhB,IAAA,EAAAc,IAAA,YAAAqM,MAAA5R,KAAA,IAAAyR,kBAAA,CAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,UAAA7R,KAAA,cAAA6R,OAAAK,GAAA,IAAAT,kBAAA,CAAAC,GAAA,EAAAtI,OAAA,EAAAuI,MAAA,EAAAC,KAAA,EAAAC,MAAA,WAAAK,GAAA,KAAAN,KAAA,CAAA9T,SAAA;AAD6C;AAI7C,IAAMogB,IAAI,GAAG,IAAIjK,qDAAW,CAAC,CAAC;AAI9BkK,SAAS;EAAA,IAAAhG,KAAA,GAAAnG,iBAAA,eAAA7F,mBAAA,GAAAqE,IAAA,CACR,SAAA0E,QAAA4B,IAAA;IAAA,IAAAsH,IAAA,EAAAC,UAAA,EAAAlX,aAAA,EAAAwB,iBAAA,EAAAC,kBAAA,EAAAxB,SAAA,EAAAjB,SAAA,EAAAZ,IAAA,EAAAa,cAAA,EAAAE,CAAA,EAAAC,SAAA;IAAA,OAAA4F,mBAAA,GAAAmB,IAAA,UAAA+H,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAvE,IAAA,GAAAuE,QAAA,CAAA5F,IAAA;QAAA;UAAS0O,IAAI,GAAAtH,IAAA,CAAJsH,IAAI;UAAAC,UAAA,GAAA9Z,cAAA,CAEqD6Z,IAAI,CAACA,IAAI,MAAlEjX,aAAa,GAAAkX,UAAA,KAAE1V,iBAAiB,GAAA0V,UAAA,KAAEzV,kBAAkB,GAAAyV,UAAA;UAAA/I,QAAA,CAAA5F,IAAA;UAAA,OAEtDwO,IAAI,CAAC9C,IAAI,CAACgD,IAAI,CAAC;QAAA;UAEfhX,SAAS,GAAG8W,IAAI,YAAS,CAAC/W,aAAa,CAAC;UAExChB,SAAS,GAAG+X,IAAI,CAAC3f,MAAM,CAACoK,iBAAiB,EAAEvB,SAAS,CAACxJ,MAAM,CAAC;UAE5D2H,IAAI,GAAG,IAAI7B,KAAK,CAAC0D,SAAS,CAACxJ,MAAM,CAAC;UAElCwI,cAAc,GAAG8X,IAAI,CAAC3f,MAAM,CAAC2f,IAAI,CAACpe,OAAO,CAACuG,gBAAgB,CAAC,CAAC,CAAC,CAAC;UAEpE,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,SAAS,CAACxJ,MAAM,EAAE,EAAE0I,CAAC,EACzC;YACOC,SAAS,GAAG2X,IAAI,CAAC1X,UAAU,CAACL,SAAS,CAACG,CAAC,CAAC,CAAC;YAE/Cf,IAAI,CAACe,CAAC,CAAC,GAAG4X,IAAI,CAACngB,GAAG,CAACwI,SAAS,CAAC,CAACwF,aAAa,CAACnD,kBAAkB,GAAIxC,cAAc,GAAGE,CAAE,CAAC,CAAC,CAAC,CAAC;UAC1F;UAEAgY,WAAW,CAAClX,SAAS,CAAA3B,KAAA,SAAIF,IAAI,CAAC,CAAC;QAAC;QAAA;UAAA,OAAA+P,QAAA,CAAApE,IAAA;MAAA;IAAA,GAAAgE,OAAA;EAAA,CAChC;EAAA,gBAAAiJ,UAAAzI,EAAA;IAAA,OAAAyC,KAAA,CAAA1S,KAAA,OAAA5H,SAAA;EAAA;AAAA,I","file":"thread2.1.worker.worker.js","sourcesContent":[" \tself[\"webpackChunk\"] = function webpackChunkCallback(chunkIds, moreModules) {\n \t\tfor(var moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\twhile(chunkIds.length)\n \t\t\tinstalledChunks[chunkIds.pop()] = 1;\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"1\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"thread2.1.worker\": 1\n \t};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \tfunction promiseResolve() { return Promise.resolve(); }\n\n \tvar wasmImportObjects = {\n \t\t\"../../renderity/wasm-wrapper/src/test-simd/build/clang-wasm32/output/wasm/test-simd.wasm\": function() {\n \t\t\treturn {\n\n \t\t\t};\n \t\t},\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n \t\tpromises.push(Promise.resolve().then(function() {\n \t\t\t// \"1\" is the signal for \"already loaded\"\n \t\t\tif(!installedChunks[chunkId]) {\n \t\t\t\timportScripts(__webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".worker.js\");\n \t\t\t}\n \t\t}));\n\n \t\t// Fetch + compile chunk loading for webassembly\n\n \t\tvar wasmModules = {\"0\":[\"../../renderity/wasm-wrapper/src/test-simd/build/clang-wasm32/output/wasm/test-simd.wasm\"]}[chunkId] || [];\n\n \t\twasmModules.forEach(function(wasmModuleId) {\n \t\t\tvar installedWasmModuleData = installedWasmModules[wasmModuleId];\n\n \t\t\t// a Promise means \"currently loading\" or \"already loaded\".\n \t\t\tif(installedWasmModuleData)\n \t\t\t\tpromises.push(installedWasmModuleData);\n \t\t\telse {\n \t\t\t\tvar importObject = wasmImportObjects[wasmModuleId]();\n \t\t\t\tvar req = fetch(__webpack_require__.p + \"\" + {\"../../renderity/wasm-wrapper/src/test-simd/build/clang-wasm32/output/wasm/test-simd.wasm\":\"55f0892de5a6543a0aaf\"}[wasmModuleId] + \".module.wasm\");\n \t\t\t\tvar promise;\n \t\t\t\tif(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\n \t\t\t\t\tpromise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\n \t\t\t\t\t\treturn WebAssembly.instantiate(items[0], items[1]);\n \t\t\t\t\t});\n \t\t\t\t} else if(typeof WebAssembly.instantiateStreaming === 'function') {\n \t\t\t\t\tpromise = WebAssembly.instantiateStreaming(req, importObject);\n \t\t\t\t} else {\n \t\t\t\t\tvar bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\n \t\t\t\t\tpromise = bytesPromise.then(function(bytes) {\n \t\t\t\t\t\treturn WebAssembly.instantiate(bytes, importObject);\n \t\t\t\t\t});\n \t\t\t\t}\n \t\t\t\tpromises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\n \t\t\t\t\treturn __webpack_require__.w[wasmModuleId] = (res.instance || res).exports;\n \t\t\t\t}));\n \t\t\t}\n \t\t});\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all WebAssembly.instance exports\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js?!./node_modules/conditional-compile-loader/index.js?!../../renderity/wasm-wrapper/src/threads/thread2/thread2.1.worker.js\");\n","export default\n{\n\t// https://en.cppreference.com/w/cpp/language/types\n\tbool (addr, length = 1) { return new this.mem.bool.typed_array_constructor(this.memory.buffer, addr, length); },\n\tchar (addr, length = 1) { return new this.mem.char.typed_array_constructor(this.memory.buffer, addr, length); },\n\tint (addr, length = 1) { return new this.mem.int.typed_array_constructor(this.memory.buffer, addr, length); },\n\tshort (addr, length = 1) { return new this.mem.short.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong (addr, length = 1) { return new this.mem.long.typed_array_constructor(this.memory.buffer, addr, length); },\n\tsize_t (addr, length = 1) { return new this.mem.size_t.typed_array_constructor(this.memory.buffer, addr, length); },\n\taddr (addr, length = 1) { return new this.mem.addr.typed_array_constructor(this.memory.buffer, addr, length); },\n\tuint8_t (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length); },\n\tint8_t (addr, length = 1) { return new this.Int8Array(this.memory.buffer, addr, length); },\n\tuint16_t (addr, length = 1) { return new this.Uint16Array(this.memory.buffer, addr, length); },\n\tint16_t (addr, length = 1) { return new this.Int16Array(this.memory.buffer, addr, length); },\n\tuint32_t (addr, length = 1) { return new this.Uint32Array(this.memory.buffer, addr, length); },\n\tint32_t (addr, length = 1) { return new this.Int32Array(this.memory.buffer, addr, length); },\n\tuint64_t (addr, length = 1) { return new this.BigUint64Array(this.memory.buffer, addr, length); },\n\tint64_t (addr, length = 1) { return new this.BigInt64Array(this.memory.buffer, addr, length); },\n\tfloat (addr, length = 1) { return new this.mem.float.typed_array_constructor(this.memory.buffer, addr, length); },\n\tdouble (addr, length = 1) { return new this.mem.double.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong_double (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length * this.mem.long_double.size); },\n\n\taddr2 (name, length = 1) { return this.addr(this.globals[name] || this.exports[name].value, length); },\n\n\tgetCStringLength (addr)\n\t{\n\t\tconst _addr = addr;\n\n\t\t// Find terminating \"\\0\".\n\t\tfor (let vend = 0; ; ++vend)\n\t\t{\n\t\t\t// if (this.char(_addr + vend)[0] === 0)\n\t\t\tif (this.memory_views.UI8[_addr + vend] === 0)\n\t\t\t{\n\t\t\t\treturn vend;\n\t\t\t}\n\t\t}\n\t},\n\n\t// c_string (addr)\n\t// {\n\t// \treturn this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr));\n\t// },\n\n\tc_string (addr)\n\t{\n\t\treturn this.char(addr, this.getCStringLength(addr));\n\t},\n\n\tc_string2 (addr)\n\t{\n\t\t// return this.constructor.convertUint8ArrayToDomString(this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr)));\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.c_string(addr));\n\t},\n\n\tstd_string (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.char\n\t\t\t(\n\t\t\t\tthis.exports.__getStdStringData(addr),\n\n\t\t\t\tthis.exports.__getStdStringSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\tstd_string2 (addr)\n\t{\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.std_string(addr));\n\t},\n\n\tstd_vector (addr, type)\n\t{\n\t\tconst result =\n\t\t\tthis[type]\n\t\t\t(\n\t\t\t\tthis.exports.__getStdVectorData(addr),\n\n\t\t\t\tthis.exports.__getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\t// std_vector_bool (addr) { return this.std_vector(addr, 'bool'); },\n\tstd_vector_char (addr) { return this.std_vector(addr, 'char'); },\n\tstd_vector_int (addr) { return this.std_vector(addr, 'int'); },\n\tstd_vector_short (addr) { return this.std_vector(addr, 'short'); },\n\tstd_vector_long (addr) { return this.std_vector(addr, 'long'); },\n\tstd_vector_size_t (addr) { return this.std_vector(addr, 'size_t'); },\n\tstd_vector_addr (addr) { return this.std_vector(addr, 'addr'); },\n\tstd_vector_uint8_t (addr) { return this.std_vector(addr, 'uint8_t'); },\n\tstd_vector_int8_t (addr) { return this.std_vector(addr, 'int8_t'); },\n\tstd_vector_uint16_t (addr) { return this.std_vector(addr, 'uint16_t'); },\n\tstd_vector_int16_t (addr) { return this.std_vector(addr, 'int16_t'); },\n\tstd_vector_uint32_t (addr) { return this.std_vector(addr, 'uint32_t'); },\n\tstd_vector_int32_t (addr) { return this.std_vector(addr, 'int32_t'); },\n\tstd_vector_uint64_t (addr) { return this.std_vector(addr, 'uint64_t'); },\n\tstd_vector_int64_t (addr) { return this.std_vector(addr, 'int64_t'); },\n\tstd_vector_float (addr) { return this.std_vector(addr, 'float'); },\n\tstd_vector_double (addr) { return this.std_vector(addr, 'double'); },\n\tstd_vector_long_double (addr) { return this.std_vector(addr, 'long_double'); },\n\n\tresizeStdVector (addr, size)\n\t{\n\t\tthis.exports.__resizeStdVector(addr, size);\n\t},\n\n\tupdateStdVectorData (addr, type, _data)\n\t{\n\t\tthis.std_vector(addr, type).set(_data);\n\t},\n\n\n\n\t// demangle (name, name_addr)\n\t// {\n\t// \tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), name_addr);\n\n\t// \tconst demangled_name =\n\t// \t\tthis.constructor.convertUint8ArrayToDomString\n\t// \t\t(this.c_string(this.exports.__demangleCxxName(name_addr)))\n\t// \t\t\t.replace(/, /g, ',');\n\n\t// \treturn demangled_name;\n\t// }\n\n\tdemangleCxxNames ()\n\t{\n\t\tconst demangled_name_max_length = 1024;\n\t\tconst demangled_name_addr = this.exports.__malloc(demangled_name_max_length);\n\n\t\tconst exports_demangled_reduced = {};\n\n\t\tconst exports_demangled =\n\t\t\tObject.keys(this.exports)\n\t\t\t\t.reduce\n\t\t\t\t(\n\t\t\t\t\t(exports_demangled, _name) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_name.startsWith('_Z'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst name = `${ _name }\\0`;\n\n\t\t\t\t\t\t\t// const demangled_name = this.demangle(name, demangled_name_addr);\n\n\t\t\t\t\t\t\tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), demangled_name_addr);\n\n\t\t\t\t\t\t\tconst demangled_name =\n\t\t\t\t\t\t\t\tthis.constructor.convertUint8ArrayToDomString\n\t\t\t\t\t\t\t\t(this.c_string(this.exports.__demangleCxxName(demangled_name_addr)))\n\t\t\t\t\t\t\t\t\t.replace(/, /g, ',');\n\n\t\t\t\t\t\t\tif (exports_demangled[demangled_name])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Array.isArray(exports_demangled[demangled_name]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\texports_demangled[demangled_name].push(this.exports[_name]);\n\n\t\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst first_entry = exports_demangled[demangled_name];\n\n\t\t\t\t\t\t\t\texports_demangled[demangled_name] = [ first_entry, this.exports[_name] ];\n\n\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\texports_demangled[demangled_name] = this.exports[_name];\n\n\t\t\t\t\t\t\texports_demangled_reduced[demangled_name.replace(/\\([^)]*\\)/g, '')] = this.exports[_name];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t},\n\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\tthis.exports.__free(demangled_name_addr);\n\n\t\treturn { exports_demangled, exports_demangled_reduced };\n\t},\n\n\n\n\tClass (name)\n\t{\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass _Class\n\t\t{\n\t\t\tstatic name = name;\n\n\t\t\tstatic overloaded = {};\n\n\n\n\t\t\tconstructor (input)\n\t\t\t{\n\t\t\t\tif (typeof input === 'number')\n\t\t\t\t{\n\t\t\t\t\tthis.addr = input;\n\t\t\t\t}\n\t\t\t\telse if (typeof input === 'string')\n\t\t\t\t{\n\t\t\t\t\t[ this.addr ] = wasm_wrapper.addr2(input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.Object.keys(this.exports_demangled)\n\t\t\t.filter\n\t\t\t(\n\t\t\t\tmember_name => member_name.includes(name),\n\t\t\t)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmember_name =>\n\t\t\t\t{\n\t\t\t\t\tlet member_name_trimmed = member_name.replace(`${ name }::`, '').replace(/\\((.*)+/g, '');\n\n\t\t\t\t\t// Some objects may be exported twice from wasm. TODO: why does it occur?\n\t\t\t\t\tconst wasm_object =\n\t\t\t\t\t\twasm_wrapper.exports_demangled[member_name][0] || wasm_wrapper.exports_demangled[member_name];\n\n\t\t\t\t\tif (typeof wasm_object === 'function')\n\t\t\t\t\t{\n\t\t\t\t\t\tconst parameters =\n\t\t\t\t\t\t\tmember_name.match(/\\((.*)+/g)?.[0].replace(/\\(|( )|\\)/g, '').split(',');\n\n\t\t\t\t\t\tif (parameters.length && parameters[0] === '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparameters.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// static function\n\t\t\t\t\t\tif (parameters.length === wasm_object.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// non-static function\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class.prototype[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Non-wrapped\n\t\t\t\t\t\t\t_Class[`proto_${ member_name_trimmed }`] = wasm_object;\n\n\t\t\t\t\t\t\t_Class.prototype[member_name_trimmed] =\n\t\t\t\t\t\t\t\tfunction (...args)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn wasm_object(this.addr, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof wasm_object === 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t// Presume New() returns a pointer\n\t\tif (_Class.New)\n\t\t{\n\t\t\t_Class.NewWrapper = () => new _Class(_Class.New());\n\t\t}\n\n\n\n\t\treturn _Class;\n\t},\n};\n","const IDLE_FUNCTION = () => 0;\n\n\n\nexport default function (wasm_wrapper)\n{\n\tconst imports_lib =\n\t{\n\t\tconsole_log: (size, types_addr, values_addr) =>\n\t\t{\n\t\t\tconst arg_types = wasm_wrapper.size_t(types_addr, size);\n\n\t\t\tconst args = new Array(size);\n\n\t\t\tconst any_value_size = wasm_wrapper.size_t(wasm_wrapper.globals.__any_value_size)[0];\n\n\t\t\tfor (let i = 0; i < size; ++i)\n\t\t\t{\n\t\t\t\tconst type_name = wasm_wrapper.type_names[arg_types[i]];\n\n\t\t\t\tconst value_addr = values_addr + (any_value_size * i);\n\n\t\t\t\targs[i] = wasm_wrapper.mem[type_name].interp_log(value_addr);\n\t\t\t}\n\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tconsole_log2: (...args) =>\n\t\t{\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tdate_now: () => Date.now(),\n\n\t\thost_loop: (function_addr, ...args) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\t// setInterval(_function, 1000, ...args);\n\t\t\tsetInterval(_function, 0, ...args);\n\t\t},\n\n\t\thost_animation_loop: (function_addr) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\tconst loop =\n\t\t\t\t() =>\n\t\t\t\t{\n\t\t\t\t\trequestAnimationFrame(_function);\n\n\t\t\t\t\t_function(...args);\n\t\t\t\t};\n\n\t\t\tloop();\n\t\t},\n\n\t\t// For using this function WASM code must be processed by\n\t\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t\trdty_sleep: (duration) =>\n\t\t{\n\t\t\t// Global state for running the program.\n\n\t\t\tconst DATA_ADDR = 16;\n\n\t\t\tif (!wasm_wrapper.sleeping)\n\t\t\t{\n\t\t\t\t// We are called in order to start a sleep/unwind.\n\t\t\t\t// console.log('sleep...');\n\t\t\t\t// Fill in the data structure. The first value has the stack location,\n\t\t\t\t// which for simplicity we can start right after the data structure itself.\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t// The end of the stack will not be reached here anyhow.\n\n\t\t\t\t// TODO: use stack_size\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t// Resume after the proper delay.\n\t\t\t\tsetTimeout\n\t\t\t\t(\n\t\t\t\t\t() =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// console.log('timeout ended, starting to rewind the stack');\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\t\t\t\t\t\t// The code is now ready to rewind; to start the process, enter the\n\t\t\t\t\t\t// first function that should be on the call stack.\n\t\t\t\t\t},\n\n\t\t\t\t\tduration,\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We are called as part of a resume/rewind. Stop sleeping.\n\t\t\t\t// console.log('...resume');\n\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t}\n\t\t},\n\t};\n\n\t// For using these functions WASM code must be processed by\n\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t// If this is main worker.\n\tif\n\t(\n\t\tself.window &&\n\t\tself.Worker &&\n\t\tself.SharedArrayBuffer\n\t)\n\t{\n\t\tObject.assign\n\t\t(\n\t\t\timports_lib,\n\n\t\t\t{\n\t\t\t\trunThread: (thread_addr, function_addr, thread_types_addr, thread_values_addr) =>\n\t\t\t\t{\n\t\t\t\t\tif (!wasm_wrapper.threads)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.threads = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst thread =\n\t\t\t\t\t\tnew wasm_wrapper.constructor.Thread2\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\twasm_wrapper,\n\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction_addr,\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_types_addr),\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_values_addr)\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t);\n\n\t\t\t\t\twasm_wrapper.threads[thread_addr] = thread;\n\t\t\t\t},\n\n\t\t\t\tjoinThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.async_count = wasm_wrapper.async_count || 0;\n\n\t\t\t\t\t++wasm_wrapper.async_count;\n\n\t\t\t\t\tif (wasm_wrapper.async_count === 1)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.async_promise =\n\t\t\t\t\t\t\tnew Promise\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tresolve =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter = (val) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (val)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst DATA_ADDR = 16;\n\n\t\t\t\t\tif (!wasm_wrapper.sleeping)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\n\t\t\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t\t\twasm_wrapper.threads[thread_addr].promise\n\t\t\t\t\t\t\t.then\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_func(...wasm_wrapper.async_args);\n\n\t\t\t\t\t\t\t\t\tif (wasm_wrapper.async_count % 2 === 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter(true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\n\t\t\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tterminateThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.threads[thread_addr].terminate();\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tif\n\t(\n\t\t// self.Worker && // Safari doesn't allow workers to create Worker objects. Only main worker is allowed.\n\t\tself.SharedArrayBuffer &&\n\t\tself.Atomics\n\t)\n\t{\n\t\tif (self.window)\n\t\t{\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock: IDLE_FUNCTION,\n\t\t\t\t\tatomic_unlock: IDLE_FUNCTION,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst UNLOCKED = 0;\n\t\t\tconst LOCKED = 1;\n\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tdo { Atomics.wait(wasm_wrapper.memory_views.I32, __atomic_malloc_index, LOCKED, Infinity) }\n\t\t\t\t\t\twhile (Atomics.compareExchange(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED, LOCKED) === LOCKED);\n\t\t\t\t\t},\n\n\t\t\t\t\tatomic_unlock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tAtomics.store(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED);\n\t\t\t\t\t\tAtomics.notify(wasm_wrapper.memory_views.I32, __atomic_malloc_index, 1);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\treturn imports_lib;\n};\n","export default function ()\n{\n\tconst that = this;\n\n\n\n\tthis.options =\n\t\tObject.assign\n\t\t(\n\t\t\t{\n\t\t\t\t// 1024 b * 1024 b == 1048576 b == 1 mb\n\t\t\t\tthread_stack_size: 0x0100000,\n\t\t\t},\n\n\t\t\tthis.options,\n\t\t);\n\n\n\n\t[\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'Uint16Array',\n\t\t'Int16Array',\n\t\t'Uint32Array',\n\t\t'Int32Array',\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'BigUint64Array',\n\t\t'BigInt64Array',\n\t\t'Float32Array',\n\t\t'Float64Array',\n\t]\n\t\t.forEach\n\t\t(\n\t\t\ttyped_array_name =>\n\t\t\t{\n\t\t\t\tif (self[typed_array_name])\n\t\t\t\t{\n\t\t\t\t\tthis[typed_array_name] =\n\t\t\t\t\t\tclass extends self[typed_array_name]\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconstructor (...args)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// if (args.length !== 1)\n\t\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t\t// \tthrow new Error('wasm-wrapper typed array must be constructed with only 1 argument.');\n\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\tif (args[0] instanceof self.ArrayBuffer || (self.SharedArrayBuffer && args[0] instanceof self.SharedArrayBuffer))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (args[0] === that.memory.buffer)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsuper(...args);\n\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthrow new Error('wasm-wrapper typed array can not be backed by array buffer other than wasm-wrapper instance memory buffer.');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet length = 0;\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// length = args[0].length;\n\t\t\t\t\t\t\t\t\t({ length } = args[0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlength = args[0];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst byteOffset = that.exports.__malloc(length * self[typed_array_name].BYTES_PER_ELEMENT);\n\n\t\t\t\t\t\t\t\tsuper(that.memory.buffer, byteOffset, length);\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.set(args[0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfree () { that.exports.__free(this.byteOffset); }\n\n\t\t\t\t\t\t\t// slice (...args) {}\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\n\n\t{\n\t\tthis.mem =\n\t\t{\n\t\t\t'bool': { kind: 'Uint' },\n\t\t\t'char': { kind: 'Uint' },\n\t\t\t'int': { kind: 'Int' },\n\t\t\t'short': { kind: 'Int' },\n\t\t\t'long': { kind: 'Int' },\n\t\t\t'size_t': { kind: 'Uint' },\n\t\t\t'addr': { kind: 'Uint' },\n\t\t\t'uint8_t': { kind: 'Uint' },\n\t\t\t'int8_t': { kind: 'Int' },\n\t\t\t'uint16_t': { kind: 'Uint' },\n\t\t\t'int16_t': { kind: 'Int' },\n\t\t\t'uint32_t': { kind: 'Uint' },\n\t\t\t'int32_t': { kind: 'Int' },\n\t\t\t'uint64_t': { kind: 'Uint' },\n\t\t\t'int64_t': { kind: 'Int' },\n\t\t\t'float': { kind: 'Float' },\n\t\t\t'double': { kind: 'Float' },\n\t\t\t'long_double': { kind: 'Float' },\n\t\t\t'c_string': {},\n\t\t};\n\n\t\tthis.type_names = Object.keys(this.mem);\n\n\t\tthis.type_names\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\t(type_name, type_name_index) =>\n\t\t\t\t{\n\t\t\t\t\tconst size = this.exports.__sizeof(type_name_index);\n\n\t\t\t\t\tlet typed_array_constructor_name = `${ this.mem[type_name].kind }${ size * 8 }Array`;\n\n\t\t\t\t\tif (!this[typed_array_constructor_name])\n\t\t\t\t\t{\n\t\t\t\t\t\ttyped_array_constructor_name = `Big${ typed_array_constructor_name }`;\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.mem[type_name],\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\ttyped_array_constructor: this[typed_array_constructor_name],\n\t\t\t\t\t\t\tinterp_log: addr => this[type_name](addr)[0],\n\t\t\t\t\t\t\tinterp_thread: addr => this[type_name](addr),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tthis.mem.bool.interp_log = addr => Boolean(this.bool(addr)[0]),\n\n\t\tthis.mem.c_string.interp_log = addr => this.c_string2(this.addr(addr)[0]);\n\t\tthis.mem.c_string.interp_thread = addr => this.addr(addr);\n\t\tthis.mem.c_string.interp_arg = str => new this.mem.char.typed_array_constructor(this.constructor.convertDomStringToUint8Array(str));\n\t}\n\n\n\n\t{\n\t\tthis.memory_views = {};\n\n\t\tthis.memory_views.UI8 = new this.Uint8Array(this.memory.buffer);\n\t\t// this.memory_views.I8 = new this.Int8Array(this.memory.buffer);\n\t\t// this.memory_views.UI16 = new this.Uint16Array(this.memory.buffer);\n\t\t// this.memory_views.I16 = new this.Int16Array(this.memory.buffer);\n\t\t// this.memory_views.UI32 = new this.Uint32Array(this.memory.buffer);\n\t\tthis.memory_views.I32 = new this.Int32Array(this.memory.buffer);\n\t\t// if (this.BigUint64Array) { this.memory_views.UI64 = new this.BigUint64Array(this.memory.buffer); }\n\t\t// if (this.BigInt64Array) { this.memory_views.I64 = new this.BigInt64Array(this.memory.buffer); }\n\t\t// this.memory_views.F32 = new this.Float32Array(this.memory.buffer);\n\t\t// this.memory_views.F64 = new this.Float64Array(this.memory.buffer);\n\t}\n}\n","// https://webassembly.org\n// https://webassembly.github.io/spec\n// https://github.com/WebAssembly\n// https://developer.mozilla.org/en-US/docs/WebAssembly\n// https://wasi.dev\n// https://lld.llvm.org/WebAssembly.html\n// https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-documents.md\n// https://docs.wasmtime.dev/\n\n\n\n/**\n * Using TypedArray.subarray() is preferred\n * when accessing to data\n * to avoid extra memory allocation.\n *\n * Strange std::string behavior:\n * if std::string data length <=11, std::string object address is the same with its data;\n * if >11, std::string object name stores address of beginning of the data.\n * So in second case one can use WasmWrapper::c_string method to get string bytes.\n * Maybe it's not related to data length, but to dynamic memory allocation.\n *\n *\n *\n * If memory is shared then memory growing is not allowed\n * and maximum memory size is specified at compilation.\n *\n *\n *\n * Passing argument by reference works as passing by pointer.\n * So, functions with reference parameters expect address instead of value.\n *\n *\n *\n * TODO: determination capabiity of what wasm memory type is being used.\n */\n\n\n\n// Webpack arraybuffer-loader is required.\n// import test_simd_wasm_buffer from './test-simd/build/clang-wasm32/output/wasm/test-simd.wasm';\n\nimport configureMemory from './memory';\nimport getImports from './imports';\nimport cxx_specific_functions from './cxx-specific';\n\n\n\nconst __CODE_TYPE_BYTECODE__ = 0;\nconst __CODE_TYPE_FUNCTION__ = 1;\n\n\n\nconst IDLE_FUNCTION = () => 0;\n\nconst DEBUG_LOG = console.log.bind(console);\n// const DEBUG_LOG = (...content) => console.log(...content.map(elm => `%c${ elm }`), 'background-color: #00858A; padding: 2px;');\nconst ERROR_LOG = content => console.log(`%c${ content }`, 'background-color: red; padding: 2px;');\nconst MISSED_IMPORT_FUNCTION_LOG = ERROR_LOG;\n\nconst DEBUG_INFO = [];\n\nconst DEBUG_INFO_PUSH = content => DEBUG_INFO.push(content);\n\nconst DEBUG_LABEL_LOG = () =>\n{\n\tDEBUG_INFO.forEach(label => console.log(`%c${ label }`, 'background-color: #00858A; padding: 2px;'));\n\n\tDEBUG_INFO.length = 0;\n};\n\n\n\nDEBUG_INFO_PUSH(`WASM CONCURRENCY: ${ self.navigator.hardwareConcurrency }`);\n\n\n\nclass WasmWrapper\n{\n\tstatic text_decoder = new TextDecoder('utf-8');\n\tstatic text_encoder = new TextEncoder();\n\n\t// static convertUint8ArrayToDomString (uint8_array)\n\t// {\n\t// \treturn WasmWrapper.text_decoder.decode(uint8_array);\n\t// }\n\n\t// Version for shared buffer backed array.\n\t// Decoding views of shared buffer is not allowed.\n\tstatic convertUint8ArrayToDomString (uint8_array)\n\t{\n\t\t// return WasmWrapper.text_decoder.decode(uint8_array.slice());\n\t\treturn WasmWrapper.text_decoder.decode(new Uint8Array(uint8_array));\n\t}\n\n\tstatic convertDomStringToUint8Array (text)\n\t{\n\t\treturn WasmWrapper.text_encoder.encode(text);\n\t}\n\n\tstatic async testSimd ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\t// webpack arraybuffer-loader has to be installed when using the library with soures files.\n\t\t\tconst test_simd_wasm_buffer = (await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm')).default;\n\n\t\t\tconst wasm_module = await WebAssembly.compile(test_simd_wasm_buffer);\n\n\t\t\t// LOG(WebAssembly.Module.exports(wasm_module))\n\t\t\t// LOG(WebAssembly.Module.imports(wasm_module))\n\n\t\t\tawait WebAssembly.instantiate\n\t\t\t(\n\t\t\t\twasm_module,\n\n\t\t\t\t{\n\t\t\t\t\tenv:\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory:\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tnew WebAssembly.Memory\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\tinitial: 2,\n\t\t\t\t\t\t\t\tmaximum: 2,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// // Webpack since version 4 has embedded WASM parser.\n\t\t\t// // MIME type \"application/wasm\" must be defined for \".wasm\" extension on server.\n\t\t\t// // TODO: use another type of importing ?\n\t\t\t// await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm');\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tERROR_LOG(`WASM SIMD TEST FAILED: ${ error }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM SIMD: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tconstructor (options = {})\n\t{\n\t\tself.__wasm_wrapper__ = this;\n\n\t\tthis.options = options;\n\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass ThreadPromiseBunch\n\t\t{\n\t\t\tconstructor ()\n\t\t\t{\n\t\t\t\tthis.running_count = 0;\n\t\t\t}\n\n\t\t\trun (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trunLog (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\tLOG('ThreadPromiseBunch start __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tLOG('ThreadPromiseBunch end __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tasync runAsync (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.runAsync(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trun2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync runAsync2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.ThreadPromiseBunch = ThreadPromiseBunch;\n\n\n\n\t\t// configureMemory(this, options);\n\t}\n\n\tfunction (addr)\n\t{\n\t\treturn this.exports.__indirect_function_table.get(addr);\n\t}\n\n\tasync async (_function, ...args)\n\t{\n\t\tthis.async_args = args;\n\n\t\t(this.async_func = _function)(...args);\n\n\t\tthis.exports.asyncify_stop_unwind();\n\n\t\tawait this.async_promise;\n\n\t\tthis.async_count = 0;\n\t}\n\n\tasync instantiate ({ wasm_module_imports, imports_lib, imports_custom, wasm_module, code, debug })\n\t{\n\t\t// Object for passing to threads.\n\t\tthis.imports_thread = { env: {} };\n\n\t\tObject.keys(imports_custom)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmodule =>\n\t\t\t\t{\n\t\t\t\t\tObject.keys(imports_custom[module])\n\t\t\t\t\t\t.forEach\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\timport_custom =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!this.imports_thread[module])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.imports_thread[module] = {};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.imports_thread[module][import_custom] = 0;\n\n\t\t\t\t\t\t\t\t// TODO: use \"|=\" operator ?\n\t\t\t\t\t\t\t\t// If (imports_custom[module][import_custom] === 0) then make it IDLE_FUNCTION.\n\t\t\t\t\t\t\t\timports_custom[module][import_custom] = imports_custom[module][import_custom] || IDLE_FUNCTION;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tconst imports_aggregate = {};\n\n\t\tObject.assign(imports_aggregate, imports_custom);\n\n\t\tObject.assign\n\t\t(\n\t\t\timports_aggregate.env,\n\n\t\t\timports_lib\n\t\t);\n\n\t\t// Imported memory\n\t\tif (this.memory)\n\t\t{\n\t\t\timports_aggregate.env.memory = this.memory;\n\t\t}\n\n\t\twasm_module_imports\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\twasm_module_import =>\n\t\t\t\t{\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module])\n\t\t\t\t\t{\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module][wasm_module_import.name])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDEBUG_LOG(`Missed ${ wasm_module_import.module } import:`, wasm_module_import.name);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module][wasm_module_import.name] = IDLE_FUNCTION;\n\t\t\t\t\t\t// imports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\n\t\t\t\t\t\t// if (wasm_module_import.name !== 'clock_time_get')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// if (wasm_module_import.name === 'fd_write')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = (...args) => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); LOG(args.map(arg => this.CString2(arg))); };\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\tlet exports = null;\n\n\t\tif (wasm_module)\n\t\t{\n\t\t\tconst wasm_module_instance =\n\t\t\t\tawait WebAssembly.instantiate\n\t\t\t\t// await WebAssembly.instantiateStreaming\n\t\t\t\t(\n\t\t\t\t\twasm_module,\n\n\t\t\t\t\timports_aggregate,\n\t\t\t\t);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(wasm_module_instance);\n\t\t\t}\n\n\t\t\t// this.instance = wasm_module_instance;\n\n\t\t\t({ exports } = wasm_module_instance);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// imports_aggregate.wasi_snapshot_preview1 = {};\n\t\t\t// imports_aggregate.wasi_snapshot_preview1.fd_write = (...args) => LOG(args.map(arg => this.c_string2(arg)));\n\n\t\t\texports = code(imports_aggregate);\n\t\t}\n\n\t\t// Exported memory\n\t\tif (!this.memory)\n\t\t{\n\t\t\tthis.memory = exports.memory;\n\t\t}\n\n\t\treturn exports;\n\t}\n\n\tasync init\n\t({\n\t\t// TODO: reorder.\n\t\tcode,\n\t\tmemory = null,\n\t\timports: imports_custom = { env: {} },\n\t\tstack_pointer = undefined,\n\t\tconfigureMemory = true,\n\t\tforceLocalMemory = false,\n\t\tmemory_params = { minimum: 65536, maximum: 65536, initial: 65536, shared: true },\n\t\tinitGlobals = true,\n\t\tdemangleCxxNames = false,\n\t\tdebug = false,\n\t\tfindOptimalMemorySize = true,\n\t})\n\t{\n\t\tlet code_type = null;\n\n\t\t// Code for passing to other WASM instances (e.g. threads).\n\t\tthis.code = code;\n\n\t\tif (typeof code === 'string')\n\t\t{\n\t\t\t// if (code.slice(0, 8) === 'function')\n\t\t\tif (code.startsWith('function'))\n\t\t\t{\n\t\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\t\tcode = new Function(code);\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string function -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t\t// base64\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode = Uint8Array.from(atob(code), c => c.charCodeAt(0));\n\n\t\t\t\t// TODO: Make code shared (if can) to speed up passing it to workers. DONE?\n\t\t\t\tif (self.SharedArrayBuffer)\n\t\t\t\t{\n\t\t\t\t\tconst code_temp = code;\n\n\t\t\t\t\tcode = new Uint8Array(new SharedArrayBuffer(code.length));\n\n\t\t\t\t\tcode.set(code_temp);\n\t\t\t\t}\n\n\t\t\t\tthis.code = code;\n\n\t\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string base64 -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t}\n\t\telse if (typeof code === 'function')\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\tthis.code = code.toString();\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: function`);\n\t\t}\n\t\t// Code is an Uint8Array backed (SharedArrayBuffer optionally) or ArrayBuffer or SharedArrayBuffer.\n\t\t// UPD. SharedArrayBuffer can not be used as source for WebAssembly module, only for Uint8Array\n\t\t// backed by SharedArrayBuffer.\n\t\telse\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code.constructor.name }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code_type === __CODE_TYPE_BYTECODE__ ? 'BYTECODE' : 'FUNCTION' }`);\n\n\t\t// DEBUG_LABEL_LOG();\n\n\n\n\t\tconst imports_lib = getImports(this);\n\n\n\n\t\tif (code_type === __CODE_TYPE_BYTECODE__)\n\t\t{\n\t\t\tconst wasm_module = await WebAssembly.compile(code);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(wasm_module);\n\t\t\t}\n\n\t\t\tconst wasm_module_imports = WebAssembly.Module.imports(wasm_module);\n\t\t\t// const wasm_module_exports = WebAssembly.Module.exports(wasm_module);\n\n\t\t\tthis.memory = null;\n\n\t\t\t// Memory comes from WASM main worker instance to thread instance.\n\t\t\t// is always imported and shared.\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: SHARED')\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst [ imported_memory ] =\n\t\t\t\t\twasm_module_imports\n\t\t\t\t\t\t.filter((import_desc) => (import_desc.kind === 'memory'));\n\n\t\t\t\tconst shared_memory_allowed = Boolean(self.SharedArrayBuffer) && !forceLocalMemory;\n\n\t\t\t\tif (imported_memory)\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\n\t\t\t\t\tlet memory_desc = null;\n\n\t\t\t\t\t// chrome://flags#enable-experimental-webassembly-features must be enabled\n\t\t\t\t\t// to access \"type\" property of \"imported_memory\". It contains memory\n\t\t\t\t\t// type and size info produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\t// \"--import-memory\" linker flag specifies whether memory is imported to WebAssembly module.\n\t\t\t\t\t// \"--shared-memory\" linker flag specifies whether memory is shared between WebAssembly instances.\n\t\t\t\t\t// \"--max-memory=N\" linker flag specifies maximum size of memory for WebAssembly instance.\n\t\t\t\t\tif (imported_memory.type)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is --initial-memory flag ignored if --shared-memory flag is defined?\n\t\t\t\t\t\t\tinitial: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tmaximum: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tshared: imported_memory.type.shared && shared_memory_allowed,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Parameters must match values produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 65536 pages == 4gb, maximum possible memory size for 32-bit WebAssembly instance.\n\t\t\t\t\t\t\tinitial: memory_params.initial,\n\t\t\t\t\t\t\tmaximum: memory_params.maximum, // Must match \"--max-memory=N\" flag.\n\t\t\t\t\t\t\t// shared, // Must match \"--shared-memory\" flag.\n\t\t\t\t\t\t\tshared: memory_params.shared && shared_memory_allowed\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.memory = new WebAssembly.Memory(memory_desc);\n\n\t\t\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ memory_desc.shared ? 'SHARED' : 'NOT SHARED' }`)\n\t\t\t\t}\n\t\t\t\t// TODO: add the case when memory is imported but can be created with arbitrary parameters.\n\t\t\t\t// Is this case possible? Meybe possible only when memory is not shared?\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: EXPORTED')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, wasm_module, debug });\n\t\t}\n\t\t/**\n\t\t * Initializes WasmWrapper instance with JS code compiled from WASM with wasm2js.\n\t\t *\n\t\t * In this case presume WASM instances don't use shared memory and exported memory.\n\t\t *\n\t\t * wasm2js generates code with Atomics, even if its input WASM is compiled without flag \"--shared-memory\".\n\t\t * TODO: use --disable-threads to generating Atomics as --help says.\n\t\t * UPD: There are still Atomics even with --disable-threads flag.\n\t\t * UPD: Removing \"-matomics\" compiler flag helped.\n\t\t *\n\t\t * if (!self.Atomics)\n\t\t * {\n\t\t *   self.Atomics = { load: (arr, index) => arr[index] };\n\t\t * }\n\t\t */\n\t\telse\n\t\t{\n\t\t\tthis.memory = null;\n\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst allocate =\n\t\t\t\t\tsize =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet result = true;\n\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.memory = { buffer: new self.ArrayBuffer(size) };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (evt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconsole.log(evt, size);\n\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t};\n\n\t\t\t\tif (findOptimalMemorySize)\n\t\t\t\t{\n\t\t\t\t\tfor (let size = memory_params.initial;; size /= 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (allocate(size))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tLOG(size, 'bytes allocated')\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tallocate(memory_params.initial);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO: Find better solution to get import modules used.\n\t\t\t// Now it is hardcoded.\n\t\t\tconst wasm_module_imports =\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tmodule: \"env\",\n\t\t\t\t\tmodule: \"wasi_snapshot_preview1\",\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, code, debug });\n\t\t}\n\n\n\n\t\tif (configureMemory)\n\t\t{\n\t\t\tthis.configureMemory();\n\n\t\t\tDEBUG_LOG(this.mem);\n\n\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY SIZE: ${ this.memory.buffer.byteLength }`);\n\t\t\tDEBUG_LABEL_LOG();\n\t\t}\n\n\t\tif (this.exports.__main)\n\t\t{\n\t\t\tthis.__thread_id = this.exports.__main(stack_pointer);\n\n\t\t\tDEBUG_INFO_PUSH(`WASM THREAD: ${ this.__thread_id }`);\n\t\t}\n\n\t\tif (initGlobals)\n\t\t{\n\t\t\tthis.globals = this.initGlobals();\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(this.globals)\n\t\t\t}\n\t\t}\n\n\t\tif (demangleCxxNames)\n\t\t{\n\t\t\tconst { exports_demangled, exports_demangled_reduced } = this.demangleCxxNames();\n\n\t\t\tObject.assign(this, { exports_demangled, exports_demangled_reduced });\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(this.exports_demangled);\n\t\t\t\tDEBUG_LOG(this.exports_demangled_reduced);\n\t\t\t}\n\t\t}\n\n\t\t// this.__heap_pointer_initial = this.addr(this.globals.__heap_pointer)[0];\n\t}\n\n\t// resetHeapPointer ()\n\t// {\n\t// \tthis.exports.__setHeapPointer(this.__heap_pointer_initial);\n\t// }\n\n\tinitGlobals ()\n\t{\n\t\tconst globals = {};\n\n\t\tconst prefix_length = '__EXPORT_ADDR__'.length;\n\n\t\tObject.keys(this.exports)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\texport_name =>\n\t\t\t\t{\n\t\t\t\t\tif (export_name.startsWith('__EXPORT_ADDR__'))\n\t\t\t\t\t{\n\t\t\t\t\t\tglobals[export_name.slice(prefix_length)] = this.exports[export_name]();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn globals;\n\t}\n\n\tgetNewThread () { return new WasmWrapper.Thread(this); }\n\tgetNewThread2 () { return new WasmWrapper.Thread2(this); }\n\tgetNewThread3 () { return new WasmWrapper.Thread3(this); }\n\n\tasync initThreads (thread_count)\n\t{\n\t\tconst threads =\n\t\t\tnew Array(thread_count)\n\t\t\t\t.fill(null)\n\t\t\t\t.map(() => new WasmWrapper.Thread3(this));\n\n\t\tawait Promise.all(threads.map(thread => thread.init()));\n\n\t\treturn threads;\n\t}\n\n\tterminateThreads (threads)\n\t{\n\t\tthreads\n\t\t\t.reverse()\n\t\t\t.forEach(thread => thread.terminate());\n\t}\n}\n\n\n\nWasmWrapper.prototype.configureMemory = configureMemory;\n\nObject.assign(WasmWrapper.prototype, cxx_specific_functions);\n\n\n\nexport default WasmWrapper;\n","import WasmWrapper from '../../wasm-wrapper';\n\n\n\nconst wasm = new WasmWrapper();\n\n\n\nonmessage =\n\tasync ({ data }) =>\n\t{\n\t\tconst [ function_addr, thread_types_addr, thread_values_addr ] = data.data;\n\n\t\tawait wasm.init(data);\n\n\t\tconst _function = wasm.function(function_addr);\n\n\t\tconst arg_types = wasm.size_t(thread_types_addr, _function.length);\n\n\t\tconst args = new Array(_function.length);\n\n\t\tconst any_value_size = wasm.size_t(wasm.globals.__any_value_size)[0];\n\n\t\tfor (let i = 0; i < _function.length; ++i)\n\t\t{\n\t\t\tconst type_name = wasm.type_names[arg_types[i]];\n\n\t\t\targs[i] = wasm.mem[type_name].interp_thread(thread_values_addr + (any_value_size * i))[0];\n\t\t}\n\n\t\tpostMessage(_function(...args));\n\t};\n"],"sourceRoot":""}