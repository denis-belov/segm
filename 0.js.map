{"version":3,"sources":["webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/common/call.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread/thread.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread2/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread2/thread2.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread3/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread3/thread3.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/wasm-wrapper.js"],"names":["Object","assign","WasmWrapper","Thread","_Thread","Thread2","_Thread2","Thread3","_Thread3","_call","wasm","message_data","js_loop","setInterval","exports","function_name","data","try_wrap","evt","console","log","empty_array","wasm_wrapper","freeWorkedMemory","stack_addr","RDTY_WASM_WRAPPER_malloc","options","thread_stack_size","stack_pointer","promise","Promise","resolve","worker","Worker","onmessage","code","memory","imports","postMessage","terminate","RDTY_WASM_WRAPPER_free","init","call","active","function_addr","thread_types_addr","thread_values_addr","_function","Function","arg_types","Size","length","args","Array","any_type_size","RDTY_WASM_WRAPPER_ANYVALUE_SIZE","i","interp","work","__CODE_TYPE_BYTECODE__","__CODE_TYPE_FUNCTION__","IDLE_FUNCTION","DEBUG_LOG","bind","DEBUG_INFO","DEBUG_INFO_PUSH","content","push","DEBUG_LABEL_LOG","forEach","label","MISSED_IMPORT_FUNCTION_LOG","ADDR_SIZE","SIZE_SIZE","UINT32_SIZE","FLOAT_SIZE","DOUBLE_SIZE","INT_SIZE","memory_views","UI8","I8","UI16","I16","UI32","I32","F32","F64","val","size","Int","Float","Double","Addr","__heap_pointer_init","custom_functions","console_log","types_addr","values_addr","__getAnyvalueSize__","CString2","convertUint8ArrayToDomString","StdString","console_log2","value","date_now","Date","now","rdty_sleep","duration","DATA_ADDR","sleeping","asyncify_start_unwind","setTimeout","asyncify_start_rewind","asyncify_stop_rewind","self","window","SharedArrayBuffer","runThread","thread_addr","threads","thread","RDTY_WASM_WRAPPER_getStdVectorData","joinThread","async_count","async_promise","async_promise_setter","then","async_func","async_args","terminateThread","LOCKED","UNLOCKED","malloc_lock","malloc_unlock","__atomic_malloc_index","__getAtomicMalloc__","old_state","Atomics","compareExchange","wait","store","notify","malloc","_size","Math","max","pow","ceil","position","log2","addr","__heap_segments","__heap_pointer","__getHeapPointer__","free","DataBase","type","type_size","set","_data","offset","DataFloat","DataUint32","ThreadPromiseBunch","running_count","callback1","callback2","all","resetHeapPointer","run","subarray","_addr","name","__indirect_function_table","get","vend","Char","CStringLen","result","RDTY_WASM_WRAPPER_getStdStringData","RDTY_WASM_WRAPPER_getStdStringSize","RDTY_WASM_WRAPPER_getStdVectorSize","Uint8","Uint32","_Class","input","Addr2","keys","exports_demangled","filter","member_name","includes","member_name_trimmed","replace","wasm_object","parameters","match","split","overloaded","prototype","New","NewWrapper","RDTY_WASM_WRAPPER_StdVector_resize","StdVector","fill","debug","demangled_name_max_length","demangled_name_addr","exports_demangled_reduced","reduce","_name","startsWith","convertDomStringToUint8Array","demangled_name","CString","RDTY_WASM_WRAPPER_demangleCxxName","isArray","first_entry","buffer","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","RDTY_WASM_WRAPPER_sizeof","SIMD","__getSimd__","asyncify_stop_unwind","env","undefined","doCommons","forceLocalMemory","memory_params","minimum","maximum","initial","demangleCxxNames","code_type","slice","constructor","from","atob","c","charCodeAt","code_temp","toString","WebAssembly","compile","wasm_module","wasm_module_imports","Module","import_desc","kind","imported_memory","shared","Boolean","memory_desc","Memory","import_modules","module","_import","instantiate","wasm_module_instance","ArrayBuffer","imports_env","setStackPointer","__getHeapSegments__","_main","__getAtomicThreadId__","__lock__","__id__","__getThreadId__","__unlock__","thread_count","map","uint8_array","text_decoder","decode","text","text_encoder","encode","TextDecoder","TextEncoder","_index"],"mappings":"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","file":"0.js","sourcesContent":["import WasmWrapper from './wasm-wrapper';\nimport _Thread from './threads/thread';\nimport _Thread2 from './threads/thread2';\nimport _Thread3 from './threads/thread3';\n\n\n\nObject.assign\n(\n\tWasmWrapper,\n\n\t{\n\t\tThread: _Thread,\n\t\tThread2: _Thread2,\n\t\tThread3: _Thread3,\n\t},\n);\n\n\nexport const Thread = _Thread;\nexport const Thread2 = _Thread2;\nexport const Thread3 = _Thread3;\n\nexport default WasmWrapper;\n","const _call =\n\t(wasm, message_data) =>\n\t{\n\t\tif (message_data.js_loop)\n\t\t{\n\t\t\tsetInterval(wasm.exports[message_data.function_name], 0, ...message_data.data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twasm.exports[message_data.function_name](...message_data.data);\n\t\t}\n\t};\n\nexport default (wasm, message_data) =>\n{\n\tif (message_data.try_wrap)\n\t{\n\t\ttry\n\t\t{\n\t\t\t_call(wasm, message_data);\n\t\t}\n\t\tcatch (evt)\n\t\t{\n\t\t\tconsole.log(evt);\n\t\t}\n\t}\n\telse\n\t{\n\t\t_call(wasm, message_data);\n\t}\n};\n","import Worker from './thread.1.worker.js';\n\n\n\nconst empty_array = [];\n\n\n\nexport default class Thread\n{\n\tconstructor\n\t({\n\t\twasm_wrapper,\n\n\t\tfunction_name,\n\n\t\tdata = empty_array,\n\n\t\tjs_loop = false,\n\n\t\tfreeWorkedMemory = false,\n\n\t\ttry_wrap = false,\n\t})\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.RDTY_WASM_WRAPPER_malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\t// Should be private?\n\t\tthis.promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker = new Worker();\n\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports } = wasm_wrapper;\n\n\t\t\t\t\t// for (const key in memory)\n\t\t\t\t\t// {\n\t\t\t\t\t// \tif (key !== 'buffer')\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tdelete memory[key];\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\n\t\t\t\t\t\tfunction_name,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\ttry_wrap,\n\t\t\t\t\t\tjs_loop,\n\t\t\t\t\t\tfreeWorkedMemory,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tterminate ()\n\t{\n\t\tthis.worker.terminate();\n\n\t\tthis.wasm_wrapper.exports.RDTY_WASM_WRAPPER_free(this.stack_addr);\n\n\t\t// this.promise = null;\n\t}\n\n\tasync join ()\n\t{\n\t\tawait this.promise;\n\n\t\tthis.terminate();\n\t}\n}\n","import '@babel/runtime/regenerator';\n\nimport WasmWrapper from '../../wasm-wrapper';\nimport call from '../common/call';\n\n\n\nconst wasm = new WasmWrapper();\n\n\n\nonmessage =\n\tasync ({ data }) =>\n\t{\n\t\tawait wasm.init(data);\n\n\t\tcall(wasm, data);\n\n\t\tpostMessage(true);\n\t};\n","import Worker from './thread2.1.worker.js';\n\n\n\nexport default class Thread2\n{\n\tconstructor (wasm_wrapper, data)\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.RDTY_WASM_WRAPPER_malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\tthis.active = true;\n\n\t\tthis.promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker = new Worker();\n\n\t\t\t\t\t// TODO: free stack memory when thread terminates automatically.\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports } = wasm_wrapper;\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tterminate ()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.worker.terminate();\n\n\t\t\tthis.wasm_wrapper.exports.RDTY_WASM_WRAPPER_free(this.stack_addr);\n\n\t\t\tthis.active = false;\n\t\t}\n\t}\n}\n","import '@babel/runtime/regenerator';\n\nimport WasmWrapper from '../../wasm-wrapper';\n\n\n\nconst wasm = new WasmWrapper();\n\n\n\nonmessage =\n\tasync ({ data }) =>\n\t{\n\t\tconst [ function_addr, thread_types_addr, thread_values_addr ] = data.data;\n\n\t\tawait wasm.init(data);\n\n\t\tconst _function = wasm.Function(function_addr);\n\n\t\tconst arg_types = wasm.Size(thread_types_addr, _function.length);\n\n\t\tconst args = new Array(_function.length);\n\n\t\tconst any_type_size = wasm.Size(wasm.exports.RDTY_WASM_WRAPPER_ANYVALUE_SIZE)[0];\n\n\t\tfor (let i = 0; i < _function.length; ++i)\n\t\t{\n\t\t\targs[i] = wasm.interp[arg_types[i]](thread_values_addr + (any_type_size * i))[0];\n\t\t}\n\n\t\t_function(...args);\n\n\t\tpostMessage(true);\n\t};\n","import Worker from './thread3.1.worker.js';\n\n\n\nexport default class Thread\n{\n\tconstructor (wasm_wrapper)\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.RDTY_WASM_WRAPPER_malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\tthis.worker = new Worker();\n\t}\n\n\tinit ()\n\t{\n\t\tconst promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports } = this.wasm_wrapper;\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn promise;\n\t}\n\n\t// options:\n\t// try_wrap,\n\t// js_loop,\n\t// freeWorkedMemory,\n\twork (function_name, data = [], options = {})\n\t{\n\t\tconst promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tthis.worker.postMessage({ work: true, function_name, data, ...options });\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn promise;\n\t}\n\n\tterminate ()\n\t{\n\t\tthis.worker.terminate();\n\n\t\tthis.wasm_wrapper.exports.RDTY_WASM_WRAPPER_free(this.stack_addr);\n\n\t\t// this.promise = null;\n\t}\n}\n","import '@babel/runtime/regenerator';\n\nimport WasmWrapper from '../../wasm-wrapper';\nimport call from '../common/call';\n\n\n\nconst wasm = new WasmWrapper();\n\n\n\nonmessage =\n\tasync ({ data }) =>\n\t{\n\t\tif (data.work)\n\t\t{\n\t\t\tcall(wasm, data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tawait wasm.init(data);\n\t\t}\n\n\t\tpostMessage(true);\n\t};\n","/**\n * Using TypedArray.subarray() is preferred\n * when accessing to data\n * to avoid extra memory allocation.\n *\n * Strange std::string behavior:\n * if std::string data length <=11, std::string object address is the same with its data;\n * if >11, std::string object name stores address of beginning of the data.\n * So in second case one can use WasmWrapper::CString method to get string bytes.\n * Maybe it's not related to data length, but to dynamic memory allocation.\n *\n *\n *\n * If memory is shared then memory growing is not allowed\n * and maximum memory size is specified at compilation.\n *\n *\n *\n * Passing argument by reference works as passing by pointer.\n * So, functions with reference parameters expect address instead of value.\n *\n *\n *\n * TODO: determination capabiity of what wasm memory type is being used.\n */\n\n\n\n// Webpack arraybuffer-loader is required.\n// import test_simd_wasm_buffer from './test-simd/build/clang-wasm32/output/wasm/test-simd.wasm';\n\n\n\nconst __CODE_TYPE_BYTECODE__ = 0;\nconst __CODE_TYPE_FUNCTION__ = 1;\n\n\n\nconst IDLE_FUNCTION = () => 0;\n\nconst DEBUG_LOG = console.log.bind(console);\n// const DEBUG_LOG = (...content) => console.log(...content.map(elm => `%c${ elm }`), 'background-color: #00858A; padding: 2px;');\n\nconst DEBUG_INFO = [];\n\nconst DEBUG_INFO_PUSH = (content) => DEBUG_INFO.push(content);\n\nconst DEBUG_LABEL_LOG = () =>\n{\n\tDEBUG_INFO.forEach(label => console.log(`%c${ label }`, 'background-color: #00858A; padding: 2px;'));\n\n\tDEBUG_INFO.length = 0;\n};\n\nconst MISSED_IMPORT_FUNCTION_LOG = (content) => console.log(`%c${ content }`, 'background-color: red; padding: 2px;');\n\n\n\nclass WasmWrapper\n{\n\tstatic text_decoder = new TextDecoder('utf-8');\n\tstatic text_encoder = new TextEncoder();\n\n\t// static convertUint8ArrayToDomString (uint8_array)\n\t// {\n\t// \treturn WasmWrapper.text_decoder.decode(uint8_array);\n\t// }\n\n\t// Version for shared buffer.\n\t// Decoding views of shared buffer is not allowed.\n\tstatic convertUint8ArrayToDomString (uint8_array)\n\t{\n\t\treturn WasmWrapper.text_decoder.decode(uint8_array.slice());\n\t}\n\n\tstatic convertDomStringToUint8Array (text)\n\t{\n\t\treturn WasmWrapper.text_encoder.encode(text);\n\t}\n\n\tstatic async testSimd ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\t// // webpack arraybuffer-loader has to be installed when using the library with soures files.\n\t\t\t// const test_simd_wasm_buffer = (await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm')).default;\n\n\t\t\t// LOG('test_simd_wasm_buffer', (await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm')))\n\n\t\t\t// const wasm_module = await WebAssembly.compile(test_simd_wasm_buffer);\n\n\t\t\t// // LOG(WebAssembly.Module.exports(wasm_module))\n\t\t\t// // LOG(WebAssembly.Module.imports(wasm_module))\n\n\t\t\t// await WebAssembly.instantiate\n\t\t\t// (\n\t\t\t// \twasm_module,\n\n\t\t\t// \t{\n\t\t\t// \t\tenv:\n\t\t\t// \t\t{\n\t\t\t// \t\t\tmemory:\n\t\t\t// \t\t\t(\n\t\t\t// \t\t\t\tnew WebAssembly.Memory\n\t\t\t// \t\t\t\t({\n\t\t\t// \t\t\t\t\tinitial: 2,\n\t\t\t// \t\t\t\t\tmaximum: 2,\n\t\t\t// \t\t\t\t})\n\t\t\t// \t\t\t),\n\t\t\t// \t\t},\n\t\t\t// \t},\n\t\t\t// );\n\n\t\t\t// Webpack since version 4 has embedded WASM parser.\n\t\t\tawait import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm');\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (_) {}\n\n\t\tDEBUG_INFO_PUSH(`WASM SIMD: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tconstructor (options = {})\n\t{\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tthis.options =\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\t{\n\t\t\t\t\t// 1024 b * 1024 b == 1048576 b == 1 mb\n\t\t\t\t\tthread_stack_size: 0x0100000,\n\t\t\t\t},\n\n\t\t\t\toptions,\n\t\t\t);\n\n\n\n\t\t// TODO: reorder.\n\t\t// TODO: order type related objects the same.\n\t\tthis.ADDR_SIZE = 0;\n\t\tthis.SIZE_SIZE = 0;\n\t\tthis.UINT32_SIZE = 0;\n\t\tthis.FLOAT_SIZE = 0;\n\t\tthis.DOUBLE_SIZE = 0;\n\t\tthis.INT_SIZE = 0;\n\n\t\tthis.memory_views =\n\t\t{\n\t\t\tUI8: null,\n\t\t\tI8: null,\n\t\t\tUI16: null,\n\t\t\tI16: null,\n\t\t\tUI32: null,\n\t\t\tI32: null,\n\t\t\t// TODO: add 64 bit types.\n\t\t\tF32: null,\n\t\t\tF64: null,\n\t\t};\n\n\t\tthis.interp =\n\t\t[\n\t\t\t(val, size) => wasm_wrapper.Int(val, size),\n\t\t\t(val, size) => wasm_wrapper.Size(val, size),\n\t\t\t(val, size) => wasm_wrapper.Float(val, size),\n\t\t\t(val, size) => wasm_wrapper.Double(val, size),\n\n\t\t\t// const char*\n\t\t\t(val, size) => wasm_wrapper.Addr(val, size),\n\n\t\t\t// void*\n\t\t\t(val, size) => wasm_wrapper.Addr(val, size),\n\t\t];\n\n\t\tthis.__heap_pointer_init = 0;\n\n\n\n\t\tconst custom_functions =\n\t\t{\n\t\t\tconsole_log: (size, types_addr, values_addr) =>\n\t\t\t{\n\t\t\t\tconst arg_types = this.Size(types_addr, size);\n\n\t\t\t\tconst args = new Array(size);\n\n\t\t\t\t// const any_type_size = this.Size(this.exports.RDTY_WASM_WRAPPER_ANYVALUE_SIZE)[0];\n\t\t\t\tconst any_type_size = this.Size(this.exports.__getAnyvalueSize__())[0];\n\n\t\t\t\tfor (let i = 0; i < size; ++i)\n\t\t\t\t{\n\t\t\t\t\t// const char*\n\t\t\t\t\tif (arg_types[i] === 4)\n\t\t\t\t\t{\n\t\t\t\t\t\targs[i] = this.CString2(this.Addr(values_addr + (any_type_size * i))[0]);\n\t\t\t\t\t}\n\t\t\t\t\t// std::string\n\t\t\t\t\telse if (arg_types[i] === 6)\n\t\t\t\t\t{\n\t\t\t\t\t\targs[i] = WasmWrapper.convertUint8ArrayToDomString(this.StdString(values_addr + (any_type_size * i)));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\targs[i] = this.interp[arg_types[i]](values_addr + (any_type_size * i))[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t\t},\n\n\t\t\tconsole_log2: (...value) =>\n\t\t\t{\n\t\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...value);\n\t\t\t},\n\n\t\t\tdate_now: () => Date.now(),\n\n\t\t\tjs_loop: (function_addr, ...args) =>\n\t\t\t{\n\t\t\t\tconst _function = this.Function(function_addr);\n\n\t\t\t\t// setInterval(_function, 1000, ...args);\n\t\t\t\tsetInterval(_function, 0, ...args);\n\t\t\t},\n\n\t\t\trdty_sleep: (duration) =>\n\t\t\t{\n\t\t\t\t// Global state for running the program.\n\n\t\t\t\tconst DATA_ADDR = 16;\n\n\t\t\t\tif (!this.sleeping)\n\t\t\t\t{\n\t\t\t\t\t// We are called in order to start a sleep/unwind.\n\t\t\t\t\t// console.log('sleep...');\n\t\t\t\t\t// Fill in the data structure. The first value has the stack location,\n\t\t\t\t\t// which for simplicity we can start right after the data structure itself.\n\t\t\t\t\tthis.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t\t// The end of the stack will not be reached here anyhow.\n\n\t\t\t\t\t// TODO: use stack_size\n\t\t\t\t\tthis.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\t\t\t\t\tthis.exports.asyncify_start_unwind(DATA_ADDR);\n\t\t\t\t\tthis.sleeping = true;\n\n\t\t\t\t\t// Resume after the proper delay.\n\t\t\t\t\tsetTimeout\n\t\t\t\t\t(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// console.log('timeout ended, starting to rewind the stack');\n\t\t\t\t\t\t\tthis.exports.asyncify_start_rewind(DATA_ADDR);\n\t\t\t\t\t\t\t// The code is now ready to rewind; to start the process, enter the\n\t\t\t\t\t\t\t// first function that should be on the call stack.\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tduration,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// We are called as part of a resume/rewind. Stop sleeping.\n\t\t\t\t\t// console.log('...resume');\n\t\t\t\t\tthis.exports.asyncify_stop_rewind();\n\t\t\t\t\tthis.sleeping = false;\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\t// If this is main worker.\n\t\tif (self.window && self.SharedArrayBuffer)\n\t\t{\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\tcustom_functions,\n\n\t\t\t\t{\n\t\t\t\t\trunThread: (function_addr, thread_addr, thread_types_addr, thread_values_addr) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!this.threads)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.threads = {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst thread =\n\t\t\t\t\t\t\tnew WasmWrapper.Thread2\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tthis,\n\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\tfunction_addr,\n\t\t\t\t\t\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(thread_types_addr),\n\t\t\t\t\t\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(thread_values_addr)\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.threads[thread_addr] = thread;\n\t\t\t\t\t},\n\n\t\t\t\t\tjoinThread: (thread_addr) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.async_count = this.async_count || 0;\n\n\t\t\t\t\t\t++this.async_count;\n\n\t\t\t\t\t\tif (this.async_count === 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.async_promise =\n\t\t\t\t\t\t\t\tnew Promise\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\tresolve =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.async_promise_setter = (val) =>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (val)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst DATA_ADDR = 16;\n\n\t\t\t\t\t\tif (!this.sleeping)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t\t\t\tthis.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\n\t\t\t\t\t\t\tthis.exports.asyncify_start_unwind(DATA_ADDR);\n\n\t\t\t\t\t\t\tthis.sleeping = true;\n\n\t\t\t\t\t\t\tthis.threads[thread_addr].promise\n\t\t\t\t\t\t\t\t.then\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.exports.asyncify_start_rewind(DATA_ADDR);\n\n\t\t\t\t\t\t\t\t\t\tthis.async_func(...this.async_args);\n\n\t\t\t\t\t\t\t\t\t\tif (this.async_count % 2 === 0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.async_promise_setter(true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.exports.asyncify_stop_rewind();\n\n\t\t\t\t\t\t\tthis.sleeping = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tterminateThread: (thread_addr) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.threads[thread_addr].terminate();\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\t// \"malloc\" and \"free\" WASI-libc functions are not thread-safe\n\t\t// since they operate with the same heap. To be able to use these functions\n\t\t// in multiple threads we need to specify them as imports and remove the part of\n\t\t// WASI-libc where they are defined (dlmalloc.o):\n\t\t// ${ DIR_WASI }/bin/llvm-ar -d ${ DIR_WASI }/share/wasi-sysroot/lib/wasm32-wasi/libc.a dlmalloc.o\n\t\t{\n\t\t\tconst LOCKED = 0;\n\t\t\tconst UNLOCKED = 1;\n\n\t\t\tlet malloc_lock = IDLE_FUNCTION;\n\t\t\tlet malloc_unlock = IDLE_FUNCTION;\n\n\t\t\tif (!self.window)\n\t\t\t{\n\t\t\t\tmalloc_lock = () =>\n\t\t\t\t{\n\t\t\t\t\tconst __atomic_malloc_index = this.exports.__getAtomicMalloc__() / 4;\n\t\t\t\t\t// const __atomic_malloc_index = this.exports.__atomic_malloc / 4;\n\n\t\t\t\t\twhile (true)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst old_state =\n\t\t\t\t\t\t\tAtomics.compareExchange\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tthis.memory_views.I32,\n\t\t\t\t\t\t\t\t__atomic_malloc_index,\n\t\t\t\t\t\t\t\t/* old state >>> */ UNLOCKED,\n\t\t\t\t\t\t\t\t/* new state >>> */ LOCKED,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (old_state === UNLOCKED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tAtomics.wait(this.memory_views.I32, __atomic_malloc_index, LOCKED);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Atomics.wait(this.memory_views.I32, __atomic_malloc_index, LOCKED);\n\t\t\t\t\t// Atomics.store(this.memory_views.I32, __atomic_malloc_index, LOCKED);\n\t\t\t\t};\n\n\t\t\t\tmalloc_unlock = () =>\n\t\t\t\t{\n\t\t\t\t\tconst __atomic_malloc_index = this.exports.__getAtomicMalloc__() / 4;\n\t\t\t\t\t// const __atomic_malloc_index = this.exports.__atomic_malloc / 4;\n\n\t\t\t\t\tAtomics.store(this.memory_views.I32, __atomic_malloc_index, UNLOCKED);\n\t\t\t\t\t// Atomics.notify(this.memory_views.I32, __atomic_malloc_index);\n\t\t\t\t\tAtomics.notify(this.memory_views.I32, __atomic_malloc_index, 1);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\tcustom_functions,\n\n\t\t\t\t{\n\t\t\t\t\t// TODO: port to C++ ?\n\t\t\t\t\tmalloc: (size) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tconst _size = Math.max(16, Math.pow(2, Math.ceil(Math.log(size) / Math.log(2))));\n\n\t\t\t\t\t\tconst position = Math.log2(_size);\n\n\t\t\t\t\t\tlet addr = 0;\n\n\t\t\t\t\t\tmalloc_lock();\n\t\t\t\t\t\t// this.__lock__(this.exports.__getAtomicMalloc__());\n\t\t\t\t\t\t// if (this.__id__) this.Size(this.exports.__malloc_test, 2)[0] = this.__id__;\n\n\t\t\t\t\t\tif (this.__heap_segments[position])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// LOG(this.__heap_segments, this.__heap_segments[position])\n\t\t\t\t\t\t\taddr = this.__heap_segments[position];\n\n\t\t\t\t\t\t\tthis.__heap_segments[position] = 0;\n\n\t\t\t\t\t\t\t// this.Size(addr - 16)[0] = _size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst __heap_pointer = this.Size(this.exports.__getHeapPointer__());\n\t\t\t\t\t\t\t// const __heap_pointer = this.Size(this.exports.__heap_pointer);\n\n\t\t\t\t\t\t\tthis.Size(__heap_pointer[0])[0] = _size;\n\n\t\t\t\t\t\t\t__heap_pointer[0] += 16;\n\n\t\t\t\t\t\t\taddr = __heap_pointer[0];\n\n\t\t\t\t\t\t\t__heap_pointer[0] += _size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (this.__id__) this.Size(this.exports.__malloc_test, 2)[1] = this.__id__;\n\t\t\t\t\t\t// if (this.__id__ && this.Size(this.exports.__malloc_test, 2)[0] !== this.Size(this.exports.__malloc_test, 2)[1]) LOG(...this.Size(this.exports.__malloc_test, 2))\n\t\t\t\t\t\tmalloc_unlock();\n\t\t\t\t\t\t// this.__unlock__(this.exports.__getAtomicMalloc__());\n\n\t\t\t\t\t\treturn addr;\n\t\t\t\t\t},\n\n\t\t\t\t\tfree: (addr) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tconst size = this.Size(addr - 16)[0];\n\n\t\t\t\t\t\tmalloc_lock();\n\t\t\t\t\t\t// this.__lock__(this.exports.__getAtomicMalloc__());\n\t\t\t\t\t\t// if (this.__id__) this.Size(this.exports.__malloc_test, 2)[0] = this.__id__;\n\n\t\t\t\t\t\tconst __heap_pointer = this.Size(this.exports.__getHeapPointer__());\n\t\t\t\t\t\t// const __heap_pointer = this.Size(this.exports.__heap_pointer);\n\n\t\t\t\t\t\tif (__heap_pointer[0] === addr + size)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t__heap_pointer[0] = addr - 16;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.__heap_segments[Math.log2(size)] = addr;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (this.__id__) this.Size(this.exports.__malloc_test, 2)[1] = this.__id__;\n\t\t\t\t\t\t// if (this.__id__ && this.Size(this.exports.__malloc_test, 2)[0] !== this.Size(this.exports.__malloc_test, 2)[1]) LOG(...this.Size(this.exports.__malloc_test, 2))\n\t\t\t\t\t\tmalloc_unlock();\n\t\t\t\t\t\t// this.__unlock__(this.exports.__getAtomicMalloc__());\n\t\t\t\t\t},\n\n\t\t\t\t\t// realloc: () => IDLE_FUNCTION,\n\t\t\t\t\t// calloc: () => IDLE_FUNCTION,\n\n\t\t\t\t\t// __libc_malloc: () => IDLE_FUNCTION,\n\t\t\t\t\t// __libc_realloc: () => IDLE_FUNCTION,\n\t\t\t\t\t// __libc_calloc: () => IDLE_FUNCTION,\n\t\t\t\t\t// __libc_free: () => IDLE_FUNCTION,\n\n\t\t\t\t\t// posix_memalign: () => IDLE_FUNCTION,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis.custom_functions = custom_functions;\n\n\n\n\t\tclass DataBase\n\t\t{\n\t\t\tconstructor (size, type, type_size)\n\t\t\t{\n\t\t\t\tif (typeof size === 'object')\n\t\t\t\t{\n\t\t\t\t\tthis.size = size.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.size = size;\n\t\t\t\t}\n\n\t\t\t\tthis.addr = wasm_wrapper.exports.RDTY_WASM_WRAPPER_malloc(this.size * type_size);\n\n\t\t\t\tthis.data = wasm_wrapper[type](this.addr, this.size);\n\n\t\t\t\tif (typeof size === 'object')\n\t\t\t\t{\n\t\t\t\t\tthis.set(size);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset (_data, offset = 0)\n\t\t\t{\n\t\t\t\tthis.data.set(_data, offset);\n\t\t\t}\n\n\t\t\tfree ()\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.RDTY_WASM_WRAPPER_free(this.addr);\n\t\t\t}\n\t\t}\n\n\t\tclass DataFloat extends DataBase\n\t\t{\n\t\t\tconstructor (size)\n\t\t\t{\n\t\t\t\tsuper(size, 'Float', wasm_wrapper.FLOAT_SIZE);\n\t\t\t}\n\t\t}\n\n\t\tthis.DataFloat = DataFloat;\n\n\t\tclass DataUint32 extends DataBase\n\t\t{\n\t\t\tconstructor (size)\n\t\t\t{\n\t\t\t\tsuper(size, 'Uint32', wasm_wrapper.UINT32_SIZE);\n\t\t\t}\n\t\t}\n\n\t\tthis.DataUint32 = DataUint32;\n\n\n\n\n\t\tclass ThreadPromiseBunch\n\t\t{\n\t\t\tconstructor ()\n\t\t\t{\n\t\t\t\tthis.running_count = 0;\n\t\t\t}\n\n\t\t\tasync run (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\tthis.callback1 = callback1;\n\t\t\t\tthis.callback2 = callback2;\n\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// LOG('ThreadPromiseBunch start __heap_pointer', wasm_wrapper.Size(wasm_wrapper.exports.__getHeapPointer__())[0])\n\n\t\t\t\treturn Promise.all(await this.callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// LOG('ThreadPromiseBunch end __heap_pointer', wasm_wrapper.Size(wasm_wrapper.exports.__getHeapPointer__())[0])\n\n\t\t\t\t\t\twasm_wrapper.resetHeapPointer();\n\n\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\tthis.run(this.callback1, this.callback2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.callback2();\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.ThreadPromiseBunch = ThreadPromiseBunch;\n\t}\n\n\tChar (addr, length = 1)\n\t{\n\t\treturn this.memory_views.UI8.subarray(addr, addr + length);\n\t}\n\n\tUint8 (addr, length = 1)\n\t{\n\t\treturn this.memory_views.UI8.subarray(addr, addr + length);\n\t}\n\n\tInt (addr, length = 1)\n\t{\n\t\tconst _addr = addr / this.INT_SIZE;\n\n\t\treturn this.memory_views.I32.subarray(_addr, _addr + length);\n\t}\n\n\tUint32 (addr, length = 1)\n\t{\n\t\tconst _addr = addr / this.UINT32_SIZE;\n\n\t\treturn this.memory_views.UI32.subarray(_addr, _addr + length);\n\t}\n\n\tSize (addr, length = 1)\n\t{\n\t\tconst _addr = addr / this.SIZE_SIZE;\n\n\t\treturn this.memory_views.UI32.subarray(_addr, _addr + length);\n\t}\n\n\tFloat (addr, length = 1)\n\t{\n\t\tconst _addr = addr / this.FLOAT_SIZE;\n\n\t\treturn this.memory_views.F32.subarray(_addr, _addr + length);\n\t}\n\n\tDouble (addr, length = 1)\n\t{\n\t\t// Data must be aligned with 8 bytes.\n\t\tconst _addr = addr / this.DOUBLE_SIZE;\n\n\t\treturn this.memory_views.F64.subarray(_addr, _addr + length);\n\t}\n\n\tAddr (addr, length = 1)\n\t{\n\t\tconst _addr = addr / this.ADDR_SIZE;\n\n\t\treturn this.memory_views.UI32.subarray(_addr, _addr + length);\n\t}\n\n\tAddr2 (name, length = 1)\n\t{\n\t\treturn this.Addr(this.exports[name].value, length);\n\t}\n\n\tFunction (addr)\n\t{\n\t\treturn this.exports.__indirect_function_table.get(addr);\n\t}\n\n\tCStringLen (addr)\n\t{\n\t\tconst _addr = addr;\n\n\t\tfor (let vend = 0; ; ++vend)\n\t\t{\n\t\t\tif (this.Char(_addr + vend)[0] === 0)\n\t\t\t{\n\t\t\t\treturn vend;\n\t\t\t}\n\t\t}\n\t}\n\n\tCString (addr)\n\t{\n\t\treturn this.memory_views.UI8.subarray(addr, addr + this.CStringLen(addr));\n\t}\n\n\tCString2 (addr)\n\t{\n\t\treturn WasmWrapper.convertUint8ArrayToDomString(this.memory_views.UI8.subarray(addr, addr + this.CStringLen(addr)));\n\t}\n\n\tStdString (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Char\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdStringData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdStringSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVector (addr, type)\n\t{\n\t\tconst result =\n\t\t\tthis[type]\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVectorUint8 (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Uint8\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVectorSize (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Size\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVectorUint32 (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Uint32\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVectorFloat (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Float\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tStdVectorAddr (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.Addr\n\t\t\t(\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorData(addr),\n\n\t\t\t\tthis.exports.RDTY_WASM_WRAPPER_getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t}\n\n\tClass (name)\n\t{\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass _Class\n\t\t{\n\t\t\tstatic name = name;\n\n\t\t\tstatic overloaded = {};\n\n\n\n\t\t\tconstructor (input)\n\t\t\t{\n\t\t\t\tif (typeof input === 'number')\n\t\t\t\t{\n\t\t\t\t\tthis.addr = input;\n\t\t\t\t}\n\t\t\t\telse if (typeof input === 'string')\n\t\t\t\t{\n\t\t\t\t\t[ this.addr ] = wasm_wrapper.Addr2(input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.Object.keys(this.exports_demangled)\n\t\t\t.filter\n\t\t\t(\n\t\t\t\tmember_name => member_name.includes(name),\n\t\t\t)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmember_name =>\n\t\t\t\t{\n\t\t\t\t\tlet member_name_trimmed = member_name.replace(`${ name }::`, '').replace(/\\((.*)+/g, '');\n\n\t\t\t\t\t// Some objects may be exported twice from wasm. TODO: why does it occur?\n\t\t\t\t\tconst wasm_object =\n\t\t\t\t\t\twasm_wrapper.exports_demangled[member_name][0] || wasm_wrapper.exports_demangled[member_name];\n\n\t\t\t\t\tif (typeof wasm_object === 'function')\n\t\t\t\t\t{\n\t\t\t\t\t\tconst parameters =\n\t\t\t\t\t\t\tmember_name.match(/\\((.*)+/g)?.[0].replace(/\\(|( )|\\)/g, '').split(',');\n\n\t\t\t\t\t\tif (parameters.length && parameters[0] === '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparameters.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// static function\n\t\t\t\t\t\tif (parameters.length === wasm_object.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// non-static function\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class.prototype[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Non-wrapped\n\t\t\t\t\t\t\t_Class[`proto_${ member_name_trimmed }`] = wasm_object;\n\n\t\t\t\t\t\t\t_Class.prototype[member_name_trimmed] =\n\t\t\t\t\t\t\t\tfunction (...args)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn wasm_object(this.addr, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof wasm_object === 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t// Presume New() returns a pointer\n\t\tif (_Class.New)\n\t\t{\n\t\t\t_Class.NewWrapper = () => new _Class(_Class.New());\n\t\t}\n\n\n\n\t\treturn _Class;\n\t}\n\n\t// TODO: Mutex.\n\n\tresizeStdVector (addr, size)\n\t{\n\t\tthis.exports.RDTY_WASM_WRAPPER_StdVector_resize(addr, size);\n\t}\n\n\tupdateStdVectorData (addr, type, _data)\n\t{\n\t\t// this.exports.RDTY_WASM_WRAPPER_StdVector_resize(addr, _data.length);\n\n\t\tthis.StdVector(addr, type).set(_data);\n\t}\n\n\t// demangle (name, name_addr)\n\t// {\n\t// \tthis.memory_views.UI8.set(WasmWrapper.convertDomStringToUint8Array(name), name_addr);\n\n\t// \tconst demangled_name =\n\t// \t\tWasmWrapper.convertUint8ArrayToDomString\n\t// \t\t(this.CString(this.exports.RDTY_WASM_WRAPPER_demangleCxxName(name_addr)))\n\t// \t\t\t.replace(/, /g, ',');\n\n\t// \treturn demangled_name;\n\t// }\n\n\tinitHeapPointer ()\n\t{\n\t\t[ this.__heap_pointer_init ] = this.Size(this.exports.__getHeapPointer__());\n\t\t// [ this.__heap_pointer_init ] = this.Size(this.exports.__heap_pointer);\n\n\t\tthis.__heap_segments.fill(0);\n\t}\n\n\tresetHeapPointer ()\n\t{\n\t\tthis.Size(this.exports.__getHeapPointer__())[0] = this.__heap_pointer_init;\n\t\t// this.Size(this.exports.__heap_pointer)[0] = this.__heap_pointer_init;\n\n\t\tthis.__heap_segments.fill(0);\n\t}\n\n\tdemangleCxxNames (debug)\n\t{\n\t\tconst demangled_name_max_length = 1024;\n\t\tconst demangled_name_addr = this.exports.RDTY_WASM_WRAPPER_malloc(demangled_name_max_length);\n\n\t\tthis.exports_demangled_reduced = {};\n\n\t\tthis.exports_demangled =\n\t\t\tObject.keys(this.exports)\n\t\t\t\t.reduce\n\t\t\t\t(\n\t\t\t\t\t(exports_demangled, _name) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_name.startsWith('_Z'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst name = `${ _name }\\0`;\n\n\t\t\t\t\t\t\t// const demangled_name = this.demangle(name, demangled_name_addr);\n\n\t\t\t\t\t\t\tthis.memory_views.UI8.set(WasmWrapper.convertDomStringToUint8Array(name), demangled_name_addr);\n\n\t\t\t\t\t\t\tconst demangled_name =\n\t\t\t\t\t\t\t\tWasmWrapper.convertUint8ArrayToDomString\n\t\t\t\t\t\t\t\t(this.CString(this.exports.RDTY_WASM_WRAPPER_demangleCxxName(demangled_name_addr)))\n\t\t\t\t\t\t\t\t\t.replace(/, /g, ',');\n\n\t\t\t\t\t\t\tif (exports_demangled[demangled_name])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Array.isArray(exports_demangled[demangled_name]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\texports_demangled[demangled_name].push(this.exports[_name]);\n\n\t\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst first_entry = exports_demangled[demangled_name];\n\n\t\t\t\t\t\t\t\texports_demangled[demangled_name] = [ first_entry, this.exports[_name] ];\n\n\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\texports_demangled[demangled_name] = this.exports[_name];\n\n\t\t\t\t\t\t\tthis.exports_demangled_reduced[demangled_name.replace(/\\([^)]*\\)/g, '')] = this.exports[_name];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t},\n\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\tthis.exports.RDTY_WASM_WRAPPER_free(demangled_name_addr);\n\n\t\tif (debug)\n\t\t{\n\t\t\tDEBUG_LOG(this.exports_demangled);\n\t\t\tDEBUG_LOG(this.exports_demangled_reduced);\n\t\t}\n\t}\n\n\tdoCommons (buffer, debug)\n\t{\n\t\tthis.memory_views.UI8 = new Uint8Array(buffer);\n\t\tthis.memory_views.I8 = new Int8Array(buffer);\n\t\tthis.memory_views.UI16 = new Uint16Array(buffer);\n\t\tthis.memory_views.I16 = new Int16Array(buffer);\n\t\tthis.memory_views.UI32 = new Uint32Array(buffer);\n\t\tthis.memory_views.I32 = new Int32Array(buffer);\n\t\tthis.memory_views.F32 = new Float32Array(buffer);\n\t\tthis.memory_views.F64 = new Float64Array(buffer);\n\n\t\tif (this.exports.RDTY_WASM_WRAPPER_sizeof)\n\t\t{\n\t\t\tthis.ADDR_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(0);\n\t\t\tthis.SIZE_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(1);\n\t\t\tthis.UINT32_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(2);\n\t\t\tthis.FLOAT_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(3);\n\t\t\tthis.DOUBLE_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(4);\n\t\t\tthis.INT_SIZE = this.exports.RDTY_WASM_WRAPPER_sizeof(5);\n\n\t\t\tthis.SIMD = this.Size(this.exports.__getSimd__())[0];\n\t\t}\n\t}\n\n\tasync async (_function, ...args)\n\t{\n\t\tthis.async_args = args;\n\n\t\t(this.async_func = _function)(...args);\n\n\t\tthis.exports.asyncify_stop_unwind();\n\n\t\tawait this.async_promise;\n\n\t\tthis.async_count = 0;\n\t}\n\n\tasync init\n\t({\n\t\t// TODO: reorder.\n\t\tcode,\n\t\tmemory = null,\n\t\timports = { env: {} },\n\t\tstack_pointer = undefined,\n\t\tdoCommons = true,\n\t\tforceLocalMemory = false,\n\t\tmemory_params = { minimum: 65536, maximum: 65536, initial: 65536 },\n\t\tdemangleCxxNames = false,\n\t\tdebug = false,\n\t\t// malloc = true,\n\t})\n\t{\n\t\t// const wasm_wrapper = this;\n\n\t\tlet code_type = null;\n\n\t\t// Code for passing to other WASM instances (e.g. threads).\n\t\tthis.code = code;\n\n\t\tif (typeof code === 'string')\n\t\t{\n\t\t\tif (code.slice(0, 8) === 'function')\n\t\t\t{\n\t\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\t\tcode = new Function(code);\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string function -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t\t// base64\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode = Uint8Array.from(atob(code), c => c.charCodeAt(0));\n\n\t\t\t\t// TODO: Make code shared (if can) to speed up passing it to workers. DONE?\n\t\t\t\tif (self.SharedArrayBuffer)\n\t\t\t\t{\n\t\t\t\t\tconst code_temp = code;\n\n\t\t\t\t\tcode = new Uint8Array(new SharedArrayBuffer(code.length));\n\n\t\t\t\t\tcode.set(code_temp);\n\t\t\t\t}\n\n\t\t\t\tthis.code = code;\n\n\t\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string base64 -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t}\n\t\telse if (typeof code === 'function')\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\tthis.code = code.toString();\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: function`);\n\t\t}\n\t\t// Code is an Uint8Array backed (SharedArrayBuffer optionally) or ArrayBuffer or SharedArrayBuffer.\n\t\t// UPD. SharedArrayBuffer can not be used as source for WebAssembly module, only for Uint8Array\n\t\t// backed by SharedArrayBuffer.\n\t\telse\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code.constructor.name }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code_type === __CODE_TYPE_BYTECODE__ ? 'BYTECODE' : 'FUNCTION' }`);\n\n\t\t// DEBUG_LABEL_LOG();\n\n\n\n\t\tif (code_type === __CODE_TYPE_BYTECODE__)\n\t\t{\n\t\t\tconst wasm_module = await WebAssembly.compile(code);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(wasm_module);\n\t\t\t}\n\n\t\t\tconst wasm_module_imports = WebAssembly.Module.imports(wasm_module);\n\t\t\t// const wasm_module_exports = WebAssembly.Module.exports(wasm_module);\n\n\t\t\tthis.memory = null;\n\n\t\t\t// Memory comes from WASM main worker instance to thread instance.\n\t\t\t// is always imported and shared.\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: SHARED')\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst [ imported_memory ] =\n\t\t\t\t\twasm_module_imports\n\t\t\t\t\t\t.filter((import_desc) => (import_desc.kind === 'memory'));\n\n\t\t\t\tconst shared = Boolean(self.SharedArrayBuffer) && !forceLocalMemory;\n\n\t\t\t\tif (imported_memory)\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\n\t\t\t\t\t// chrome://flags#enable-experimental-webassembly-features must be enabled\n\t\t\t\t\t// to access \"type\" property of \"imported_memory\". It contains memory\n\t\t\t\t\t// type and size info produced by the linker.\n\t\t\t\t\t// \"--import-memory\" linker flag specifies whether memory is imported to WebAssembly module.\n\t\t\t\t\t// \"--shared-memory\" linker flag specifies whether memory is shared between WebAssembly instances.\n\t\t\t\t\t// \"--max-memory=N\" linker flag specifies maximum size of memory for WebAssembly instance.\n\t\t\t\t\tif (imported_memory.type)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst memory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinitial: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tmaximum: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tshared: imported_memory.type.shared && shared,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.memory = new WebAssembly.Memory(memory_desc);\n\n\t\t\t\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ memory_desc.shared ? 'SHARED' : 'NOT SHARED' }`)\n\t\t\t\t\t}\n\t\t\t\t\t// Parameters must match values produced by the linker.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.memory =\n\t\t\t\t\t\t\tnew WebAssembly.Memory\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t// 65536 pages == 4gb, maximum possible memory size for 32-bit WebAssembly instance.\n\t\t\t\t\t\t\t\tinitial: memory_params.initial,\n\t\t\t\t\t\t\t\tmaximum: memory_params.maximum, // Must match \"--max-memory=N\" flag.\n\t\t\t\t\t\t\t\tshared, // Must match \"--shared-memory\" flag.\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ shared ? 'SHARED' : 'NOT SHARED' }`)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: EXPORTED')\n\n\t\t\t\t\t// // In this case arbitrary parameters may be used.\n\t\t\t\t\t// this.memory =\n\t\t\t\t\t// \tnew WebAssembly.Memory\n\t\t\t\t\t// \t({\n\t\t\t\t\t// \t\t// 65536 pages == 4gb, maximum possible memory size for 32-bit WebAssembly instance.\n\t\t\t\t\t// \t\tinitial: memory_params.initial,\n\t\t\t\t\t// \t\tmaximum: memory_params.maximum,\n\t\t\t\t\t// \t\tshared,\n\t\t\t\t\t// \t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Object for passing to threads.\n\t\t\tthis.imports = { env: {} };\n\n\t\t\tconst import_modules = {};\n\n\t\t\tObject.keys(imports)\n\t\t\t\t.forEach\n\t\t\t\t(\n\t\t\t\t\tmodule =>\n\t\t\t\t\t{\n\t\t\t\t\t\tObject.keys(imports[module])\n\t\t\t\t\t\t\t.forEach\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t_import =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (!this.imports[module])\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.imports[module] = {};\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthis.imports[module][_import] = 0;\n\n\t\t\t\t\t\t\t\t\timports[module][_import] = imports[module][_import] || IDLE_FUNCTION;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\tObject.assign(import_modules, imports);\n\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timport_modules.env,\n\n\t\t\t\tthis.custom_functions\n\t\t\t);\n\n\t\t\t// Imported memory\n\t\t\tif (this.memory)\n\t\t\t{\n\t\t\t\timport_modules.env.memory = this.memory;\n\t\t\t}\n\n\t\t\twasm_module_imports\n\t\t\t\t.forEach\n\t\t\t\t(\n\t\t\t\t\t_import =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!import_modules[_import.module])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timport_modules[_import.module] = {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!import_modules[_import.module][_import.name])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDEBUG_LOG(`Missed ${ _import.module } import:`, _import.name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\timport_modules[_import.module][_import.name] = IDLE_FUNCTION;\n\t\t\t\t\t\t\t// import_modules[_import.module][_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ _import.module }\", function \"${ _import.name }\"`); };\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\tconst wasm_module_instance =\n\t\t\t\tawait WebAssembly.instantiate\n\t\t\t\t// await WebAssembly.instantiateStreaming\n\t\t\t\t(\n\t\t\t\t\twasm_module,\n\n\t\t\t\t\timport_modules,\n\t\t\t\t);\n\n\t\t\t// Exported memory\n\t\t\tif (!this.memory)\n\t\t\t{\n\t\t\t\tthis.memory = wasm_module_instance.exports.memory;\n\t\t\t}\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LOG(wasm_module_instance);\n\t\t\t}\n\n\t\t\t// imported || exported\n\t\t\t// const { buffer } = this.memory || wasm_module_instance.exports.memory;\n\n\t\t\t// this.instance = wasm_module_instance;\n\n\t\t\tthis.exports = wasm_module_instance.exports;\n\t\t}\n\t\t/**\n\t\t * Initializes WasmWrapper instance with JS code compiled from WASM with wasm2js.\n\t\t *\n\t\t * wasm2js generates code with Atomics, even if its input WASM is compiled without flag \"--shared-memory\".\n\t\t * TODO: use --disable-threads to generating Atomics as --help says.\n\t\t * UPD: There are still Atomics even with --disable-threads flag.\n\t\t *\n\t\t * if (!self.Atomics)\n\t\t * {\n\t\t *   self.Atomics = { load: (arr, index) => arr[index] };\n\t\t * }\n\t\t */\n\t\telse\n\t\t{\n\t\t\t/**\n\t\t\t * Binary search for a max value without knowing the exact value, only that it\n\t\t\t * can be under or over It dose not test every number but instead looks for\n\t\t\t * 1,2,4,8,16,32,64,128,96,95 to figure out that you thought about #96 from\n\t\t\t * 0-infinity\n\t\t\t *\n\t\t\t * @example findFirstPositive(x => matchMedia(`(max-resolution: ${x}dpi)`).matches)\n\t\t\t * @author Jimmy Wärting\n\t\t\t * @see {@link https://stackoverflow.com/a/72124984/1008999}\n\t\t\t * @param {function} f       The function to run the test on (should return truthy or falsy values)\n\t\t\t * @param {bigint} [b=1]  Where to start looking from\n\t\t\t * @param {function} d privately used to calculate the next value to test\n\t\t\t * @returns {bigint} Intenger\n\t\t\t */\n\t\t\t// function findFirstPositive (f,b=1n,d=(e,g,c)=>g<e?-1:0<f(c=e+g>>1n)?c==e||0>=f(c-1n)?c:d(e,c-1n):d(c+1n,g)) {\n\t\t\t// \tfor (;0>=f(b);b<<=1n);return d(b>>1n,b)-1n\n\t\t\t// }\n\n\t\t\t// const tries = []\n\t\t\t// const maxSize = findFirstPositive(x => {\n\t\t\t// \ttries.push(Number(x).toLocaleString())\n\t\t\t// \ttry { new ArrayBuffer(Number(x)); return false } catch { return true }\n\t\t\t// })\n\t\t\t// console.log('found it in', tries.length, 'attempts')\n\t\t\t// console.log(Number(maxSize))\n\t\t\t// console.log(tries)\n\n\t\t\t// TODO: find maximum possible size of ArrayBuffer.\n\t\t\t// this.memory = memory || { buffer: new (self.SharedArrayBuffer || ArrayBuffer)(2145386496) };\n\n\t\t\tthis.memory = null;\n\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\t\t\t}\n\t\t\t// else if (forceLocalMemory || !self.SharedArrayBuffer)\n\t\t\t// {\n\t\t\t// \tthis.memory = { buffer: new self.ArrayBuffer(2145386496) };\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tthis.memory = { buffer: new self.SharedArrayBuffer(2145386496) };\n\t\t\t// }\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.memory = { buffer: new self.ArrayBuffer(2145386496) };\n\t\t\t}\n\n\t\t\tconst imports_env =\n\t\t\t\tObject.assign\n\t\t\t\t(\n\t\t\t\t\timports.env,\n\n\t\t\t\t\t{ memory: this.memory },\n\n\t\t\t\t\tthis.custom_functions\n\t\t\t\t);\n\n\t\t\tthis.exports = code(imports_env);\n\t\t}\n\n\n\n\t\tif (stack_pointer !== undefined)\n\t\t{\n\t\t\tthis.exports.setStackPointer(stack_pointer);\n\t\t}\n\n\t\tif (doCommons)\n\t\t{\n\t\t\tconst { buffer } = this.memory;\n\n\t\t\tthis.doCommons(buffer);\n\t\t}\n\n\t\tif (this.exports.__getHeapSegments__)\n\t\t{\n\t\t\tthis.__heap_segments = this.Size(this.exports.__getHeapSegments__(), 28);\n\t\t\t// this.__heap_segments = this.Size(this.exports.__heap_segments, 28);\n\t\t}\n\n\t\tif (this.exports._main)\n\t\t{\n\t\t\tthis.exports._main();\n\t\t}\n\n\t\tif (code_type === __CODE_TYPE_BYTECODE__)\n\t\t{\n\t\t\tif (this.exports.__getAtomicThreadId__)\n\t\t\t{\n\t\t\t\tthis.__lock__(this.exports.__getAtomicThreadId__());\n\n\t\t\t\tthis.__id__ = this.Size(this.exports.__getThreadId__())[0]++;\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM THREAD: ${ this.__id__ }`);\n\t\t\t\tDEBUG_LABEL_LOG();\n\n\t\t\t\tthis.__unlock__(this.exports.__getAtomicThreadId__());\n\t\t\t}\n\t\t}\n\n\t\tif (demangleCxxNames)\n\t\t{\n\t\t\tthis.demangleCxxNames(debug);\n\t\t}\n\n\t\t// This is to be able to call .then()\n\t\treturn (await new Promise(resolve => resolve(this)));\n\t}\n\n\t// Thread ()\n\t// {\n\t// \treturn new WasmWrapper.Thread(this);\n\t// }\n\n\t// Thread2 ()\n\t// {\n\t// \treturn new WasmWrapper.Thread2(this);\n\t// }\n\n\t// Thread3 ()\n\t// {\n\t// \treturn new WasmWrapper.Thread3(this);\n\t// }\n\n\tasync initThreads (thread_count)\n\t{\n\t\tconst threads =\n\t\t\tnew Array(thread_count)\n\t\t\t\t.fill(null)\n\t\t\t\t.map(() => new WasmWrapper.Thread3(this));\n\n\t\tawait Promise.all(threads.map(thread => thread.init()));\n\n\t\treturn threads;\n\t}\n}\n\n\n\nif (!self.window && self.SharedArrayBuffer && self.Atomics)\n{\n\tconst LOCKED = 0;\n\tconst UNLOCKED = 1;\n\n\tWasmWrapper.prototype.__lock__ =\n\t\tfunction (addr)\n\t\t{\n\t\t\t// int32 size == 4\n\t\t\tconst _index = addr / 4;\n\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tconst old_state =\n\t\t\t\t\tAtomics.compareExchange\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.memory_views.I32,\n\t\t\t\t\t\t_index,\n\t\t\t\t\t\tUNLOCKED, // old state\n\t\t\t\t\t\tLOCKED, // new state\n\t\t\t\t\t);\n\n\t\t\t\tif (old_state === UNLOCKED)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tAtomics.wait(this.memory_views.I32, _index, LOCKED);\n\t\t\t}\n\t\t};\n\n\tWasmWrapper.prototype.__unlock__ =\n\t\tfunction (addr)\n\t\t{\n\t\t\tconst _index = addr / 4;\n\n\t\t\tAtomics.store(this.memory_views.I32, _index, UNLOCKED);\n\t\t\tAtomics.notify(this.memory_views.I32, _index, 1);\n\t\t};\n}\nelse\n{\n\tWasmWrapper.prototype.__lock__ =\n\tWasmWrapper.prototype.__unlock__ =\n\t\tIDLE_FUNCTION;\n}\n\n\n\nexport default WasmWrapper;\n"],"sourceRoot":""}