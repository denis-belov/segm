{"version":3,"sources":["webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/cxx-specific.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/imports.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/memory.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread/thread.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread2/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread2/thread2.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread3/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread3/thread3.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread4/index.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread4/thread4.1.worker.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/wasm-wrapper.js"],"names":["bool","addr","length","arguments","undefined","mem","typed_array_constructor","memory","buffer","char","int","short","long","size_t","uint8_t","Uint8Array","int8_t","Int8Array","uint16_t","Uint16Array","int16_t","Int16Array","uint32_t","Uint32Array","int32_t","Int32Array","uint64_t","BigUint64Array","int64_t","BigInt64Array","float","double","long_double","size","addr2","name","globals","exports","value","getCStringLength","_addr","vend","memory_views","UI8","c_string","c_string2","constructor","convertUint8ArrayToDomString","std_string","result","__getStdStringData","__getStdStringSize","std_string2","std_vector","type","__getStdVectorData","__getStdVectorSize","std_vector_char","std_vector_int","std_vector_short","std_vector_long","std_vector_size_t","std_vector_addr","std_vector_uint8_t","std_vector_int8_t","std_vector_uint16_t","std_vector_int16_t","std_vector_uint32_t","std_vector_int32_t","std_vector_uint64_t","std_vector_int64_t","std_vector_float","std_vector_double","std_vector_long_double","resizeStdVector","__resizeStdVector","updateStdVectorData","_data","set","demangleCxxNames","_this","demangled_name_max_length","demangled_name_addr","__malloc","exports_demangled_reduced","exports_demangled","Object","keys","reduce","_name","startsWith","concat","convertDomStringToUint8Array","demangled_name","__demangleCxxName","replace","Array","isArray","push","first_entry","__free","Class","wasm_wrapper","_Class","_createClass","input","_classCallCheck","_wasm_wrapper$addr","_wasm_wrapper$addr2","_slicedToArray","_defineProperty","self","filter","member_name","includes","forEach","member_name_trimmed","wasm_object","_member_name$match","parameters","match","split","overloaded","prototype","_len","args","_key","apply","_typeof","New","NewWrapper","IDLE_FUNCTION","imports_lib","console_log","types_addr","values_addr","_console","arg_types","_wasm_wrapper$size_t","__any_value_size","_wasm_wrapper$size_t2","any_value_size","i","type_name","type_names","value_addr","interp_log","console","log","console_log2","_console2","date_now","Date","now","host_loop","function_addr","_function","_len2","_key2","setInterval","host_animation_loop","loop","requestAnimationFrame","_toConsumableArray","rdty_sleep","duration","DATA_ADDR","sleeping","asyncify_stop_rewind","I32","asyncify_start_unwind","setTimeout","asyncify_start_rewind","window","Worker","SharedArrayBuffer","assign","runThread","thread_addr","thread_types_addr","thread_values_addr","threads","thread","Thread2","joinThread","async_count","async_promise","Promise","resolve","async_promise_setter","val","promise","then","async_func","async_args","terminateThread","terminate","Atomics","atomic_lock","atomic_unlock","UNLOCKED","LOCKED","atomic_addr","__atomic_malloc_index","wait","Infinity","compareExchange","store","notify","_regeneratorRuntime","e","t","r","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","err","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","_toPrimitive","String","hint","prim","toPrimitive","res","Number","WasmWrapper","Thread","Thread3","Thread4","PromiseBunch","running_count","run","callback1","callback2","callback_next1","callback_next2","all","resolves","_runAsync","_callee","_this2","_args","_callee$","_context","t0","t1","runAsync","_x","run2","_runAsync2","_callee2","_args2","_callee2$","_context2","runAsync2","_x2","that","options","thread_stack_size","typed_array_name","_self$typed_array_nam","_inherits","_class","_super","_createSuper","ArrayBuffer","_possibleConstructorReturn","byteOffset","BYTES_PER_ELEMENT","free","__reattach","kind","type_name_index","__sizeof","typed_array_constructor_name","interp_thread","Boolean","interp_arg","str","empty_array","function_name","data","stack_addr","stack_pointer","worker","onmessage","code","imports","imports_thread","postMessage","_join","join","active","init","_this$wasm_wrapper","work","_Thread","export_name","obj","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","from","test","iter","len","arr2","__CODE_TYPE_BYTECODE__","__CODE_TYPE_FUNCTION__","ERROR_LOG","content","WARN_LOG","DEBUG_INFO","DEBUG_INFO_PUSH","_len3","_key3","DEBUG_LABEL_LOG","thread_id","label","_console3","navigator","hardwareConcurrency","__wasm_wrapper__","ThreadPromiseBunch","__initHeapPointer","__resetHeapPointer","runLog","LOG","__heap_pointer","_this3","__indirect_function_table","get","_async","_callee3","_len4","_key4","_args3","_callee3$","_context3","asyncify_stop_unwind","_x3","_instantiate","_callee4","_ref","_this4","wasm_module_imports","imports_custom","wasm_module","debug","imports_aggregate","wasm_module_instance","_callee4$","_context4","env","module","import_custom","wasm_module_import","WebAssembly","instantiate","byteLength","_x4","_init","_callee5","_ref2","_this5","_ref2$memory","_ref2$memory_params","memory_params","_ref2$imports","_ref2$stack_pointer","_ref2$configureMemory","configureMemory","_ref2$forceLocalMemor","forceLocalMemory","_ref2$initGlobals","initGlobals","_ref2$demangleCxxName","_ref2$debug","_ref2$findOptimalMemo","findOptimalMemorySize","code_type","code_temp","_wasm_module_imports$","_wasm_module_imports$2","imported_memory","shared_memory_allowed","memory_desc","allocate","_wasm_module_imports","_this$demangleCxxName","_callee5$","_context5","minimum","initial","maximum","shared","Function","atob","charCodeAt","getImports","compile","Module","import_desc","Memory","size_pages","max_size_pages","Math","imul","maxByteLength","evt","__main","__thread_id","_x5","_this6","prefix_length","getNewThread","getNewThread2","getNewThread3","getNewThread4","_initThreads","_callee6","thread_count","_this7","_callee6$","_context6","fill","map","initThreads","_x6","terminateThreads","uint8_array","text_decoder","decode","text","text_encoder","encode","_testSimd","_callee7","wasm_buffer","_callee7$","_context7","testSimd","_testAtomic","_callee8","_callee8$","_context8","testAtomic","TextDecoder","TextEncoder","cxx_specific_functions"],"mappings":"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","file":"0.js","sourcesContent":["export default\n{\n\t// https://en.cppreference.com/w/cpp/language/types\n\tbool (addr, length = 1) { return new this.mem.bool.typed_array_constructor(this.memory.buffer, addr, length); },\n\tchar (addr, length = 1) { return new this.mem.char.typed_array_constructor(this.memory.buffer, addr, length); },\n\tint (addr, length = 1) { return new this.mem.int.typed_array_constructor(this.memory.buffer, addr, length); },\n\tshort (addr, length = 1) { return new this.mem.short.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong (addr, length = 1) { return new this.mem.long.typed_array_constructor(this.memory.buffer, addr, length); },\n\tsize_t (addr, length = 1) { return new this.mem.size_t.typed_array_constructor(this.memory.buffer, addr, length); },\n\taddr (addr, length = 1) { return new this.mem.addr.typed_array_constructor(this.memory.buffer, addr, length); },\n\tuint8_t (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length); },\n\tint8_t (addr, length = 1) { return new this.Int8Array(this.memory.buffer, addr, length); },\n\tuint16_t (addr, length = 1) { return new this.Uint16Array(this.memory.buffer, addr, length); },\n\tint16_t (addr, length = 1) { return new this.Int16Array(this.memory.buffer, addr, length); },\n\tuint32_t (addr, length = 1) { return new this.Uint32Array(this.memory.buffer, addr, length); },\n\tint32_t (addr, length = 1) { return new this.Int32Array(this.memory.buffer, addr, length); },\n\tuint64_t (addr, length = 1) { return new this.BigUint64Array(this.memory.buffer, addr, length); },\n\tint64_t (addr, length = 1) { return new this.BigInt64Array(this.memory.buffer, addr, length); },\n\tfloat (addr, length = 1) { return new this.mem.float.typed_array_constructor(this.memory.buffer, addr, length); },\n\tdouble (addr, length = 1) { return new this.mem.double.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong_double (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length * this.mem.long_double.size); },\n\n\taddr2 (name, length = 1) { return this.addr(this.globals[name] || this.exports[name].value, length); },\n\n\tgetCStringLength (addr)\n\t{\n\t\tconst _addr = addr;\n\n\t\t// Find terminating \"\\0\".\n\t\tfor (let vend = 0; ; ++vend)\n\t\t{\n\t\t\t// if (this.char(_addr + vend)[0] === 0)\n\t\t\tif (this.memory_views.UI8[_addr + vend] === 0)\n\t\t\t{\n\t\t\t\treturn vend;\n\t\t\t}\n\t\t}\n\t},\n\n\t// c_string (addr)\n\t// {\n\t// \treturn this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr));\n\t// },\n\n\tc_string (addr)\n\t{\n\t\treturn this.char(addr, this.getCStringLength(addr));\n\t},\n\n\tc_string2 (addr)\n\t{\n\t\t// return this.constructor.convertUint8ArrayToDomString(this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr)));\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.c_string(addr));\n\t},\n\n\tstd_string (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.char\n\t\t\t(\n\t\t\t\tthis.exports.__getStdStringData(addr),\n\n\t\t\t\tthis.exports.__getStdStringSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\tstd_string2 (addr)\n\t{\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.std_string(addr));\n\t},\n\n\tstd_vector (addr, type)\n\t{\n\t\tconst result =\n\t\t\tthis[type]\n\t\t\t(\n\t\t\t\tthis.exports.__getStdVectorData(addr),\n\n\t\t\t\tthis.exports.__getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\t// std_vector_bool (addr) { return this.std_vector(addr, 'bool'); },\n\tstd_vector_char (addr) { return this.std_vector(addr, 'char'); },\n\tstd_vector_int (addr) { return this.std_vector(addr, 'int'); },\n\tstd_vector_short (addr) { return this.std_vector(addr, 'short'); },\n\tstd_vector_long (addr) { return this.std_vector(addr, 'long'); },\n\tstd_vector_size_t (addr) { return this.std_vector(addr, 'size_t'); },\n\tstd_vector_addr (addr) { return this.std_vector(addr, 'addr'); },\n\tstd_vector_uint8_t (addr) { return this.std_vector(addr, 'uint8_t'); },\n\tstd_vector_int8_t (addr) { return this.std_vector(addr, 'int8_t'); },\n\tstd_vector_uint16_t (addr) { return this.std_vector(addr, 'uint16_t'); },\n\tstd_vector_int16_t (addr) { return this.std_vector(addr, 'int16_t'); },\n\tstd_vector_uint32_t (addr) { return this.std_vector(addr, 'uint32_t'); },\n\tstd_vector_int32_t (addr) { return this.std_vector(addr, 'int32_t'); },\n\tstd_vector_uint64_t (addr) { return this.std_vector(addr, 'uint64_t'); },\n\tstd_vector_int64_t (addr) { return this.std_vector(addr, 'int64_t'); },\n\tstd_vector_float (addr) { return this.std_vector(addr, 'float'); },\n\tstd_vector_double (addr) { return this.std_vector(addr, 'double'); },\n\tstd_vector_long_double (addr) { return this.std_vector(addr, 'long_double'); },\n\n\tresizeStdVector (addr, size)\n\t{\n\t\tthis.exports.__resizeStdVector(addr, size);\n\t},\n\n\tupdateStdVectorData (addr, type, _data)\n\t{\n\t\tthis.std_vector(addr, type).set(_data);\n\t},\n\n\n\n\t// demangle (name, name_addr)\n\t// {\n\t// \tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), name_addr);\n\n\t// \tconst demangled_name =\n\t// \t\tthis.constructor.convertUint8ArrayToDomString\n\t// \t\t(this.c_string(this.exports.__demangleCxxName(name_addr)))\n\t// \t\t\t.replace(/, /g, ',');\n\n\t// \treturn demangled_name;\n\t// }\n\n\tdemangleCxxNames ()\n\t{\n\t\tconst demangled_name_max_length = 1024;\n\t\tconst demangled_name_addr = this.exports.__malloc(demangled_name_max_length);\n\n\t\tconst exports_demangled_reduced = {};\n\n\t\tconst exports_demangled =\n\t\t\tObject.keys(this.exports)\n\t\t\t\t.reduce\n\t\t\t\t(\n\t\t\t\t\t(exports_demangled, _name) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_name.startsWith('_Z'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst name = `${ _name }\\0`;\n\n\t\t\t\t\t\t\t// const demangled_name = this.demangle(name, demangled_name_addr);\n\n\t\t\t\t\t\t\tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), demangled_name_addr);\n\n\t\t\t\t\t\t\tconst demangled_name =\n\t\t\t\t\t\t\t\tthis.constructor.convertUint8ArrayToDomString\n\t\t\t\t\t\t\t\t(this.c_string(this.exports.__demangleCxxName(demangled_name_addr)))\n\t\t\t\t\t\t\t\t\t.replace(/, /g, ',');\n\n\t\t\t\t\t\t\tif (exports_demangled[demangled_name])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Array.isArray(exports_demangled[demangled_name]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\texports_demangled[demangled_name].push(this.exports[_name]);\n\n\t\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst first_entry = exports_demangled[demangled_name];\n\n\t\t\t\t\t\t\t\texports_demangled[demangled_name] = [ first_entry, this.exports[_name] ];\n\n\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\texports_demangled[demangled_name] = this.exports[_name];\n\n\t\t\t\t\t\t\texports_demangled_reduced[demangled_name.replace(/\\([^)]*\\)/g, '')] = this.exports[_name];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t},\n\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\tthis.exports.__free(demangled_name_addr);\n\n\t\treturn { exports_demangled, exports_demangled_reduced };\n\t},\n\n\n\n\tClass (name)\n\t{\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass _Class\n\t\t{\n\t\t\tstatic name = name;\n\n\t\t\tstatic overloaded = {};\n\n\n\n\t\t\tconstructor (input)\n\t\t\t{\n\t\t\t\tif (typeof input === 'number')\n\t\t\t\t{\n\t\t\t\t\tthis.addr = input;\n\t\t\t\t}\n\t\t\t\telse if (typeof input === 'string')\n\t\t\t\t{\n\t\t\t\t\t[ this.addr ] = wasm_wrapper.addr2(input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.Object.keys(this.exports_demangled)\n\t\t\t.filter\n\t\t\t(\n\t\t\t\tmember_name => member_name.includes(name),\n\t\t\t)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmember_name =>\n\t\t\t\t{\n\t\t\t\t\tlet member_name_trimmed = member_name.replace(`${ name }::`, '').replace(/\\((.*)+/g, '');\n\n\t\t\t\t\t// Some objects may be exported twice from wasm. TODO: why does it occur?\n\t\t\t\t\tconst wasm_object =\n\t\t\t\t\t\twasm_wrapper.exports_demangled[member_name][0] || wasm_wrapper.exports_demangled[member_name];\n\n\t\t\t\t\tif (typeof wasm_object === 'function')\n\t\t\t\t\t{\n\t\t\t\t\t\tconst parameters =\n\t\t\t\t\t\t\tmember_name.match(/\\((.*)+/g)?.[0].replace(/\\(|( )|\\)/g, '').split(',');\n\n\t\t\t\t\t\tif (parameters.length && parameters[0] === '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparameters.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// static function\n\t\t\t\t\t\tif (parameters.length === wasm_object.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// non-static function\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class.prototype[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Non-wrapped\n\t\t\t\t\t\t\t_Class[`proto_${ member_name_trimmed }`] = wasm_object;\n\n\t\t\t\t\t\t\t_Class.prototype[member_name_trimmed] =\n\t\t\t\t\t\t\t\tfunction (...args)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn wasm_object(this.addr, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof wasm_object === 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t// Presume New() returns a pointer\n\t\tif (_Class.New)\n\t\t{\n\t\t\t_Class.NewWrapper = () => new _Class(_Class.New());\n\t\t}\n\n\n\n\t\treturn _Class;\n\t},\n};\n","const IDLE_FUNCTION = () => 0;\n\n\n\nexport default function (wasm_wrapper)\n{\n\tconst imports_lib =\n\t{\n\t\tconsole_log: (size, types_addr, values_addr) =>\n\t\t{\n\t\t\tconst arg_types = wasm_wrapper.size_t(types_addr, size);\n\n\t\t\tconst args = new Array(size);\n\n\t\t\tconst [ any_value_size ] = wasm_wrapper.size_t(wasm_wrapper.globals.__any_value_size);\n\n\t\t\tfor (let i = 0; i < size; ++i)\n\t\t\t{\n\t\t\t\tconst type_name = wasm_wrapper.type_names[arg_types[i]];\n\n\t\t\t\tconst value_addr = values_addr + (any_value_size * i);\n\n\t\t\t\targs[i] = wasm_wrapper.mem[type_name].interp_log(value_addr);\n\t\t\t}\n\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tconsole_log2: (...args) =>\n\t\t{\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tdate_now: () => Date.now(),\n\n\t\thost_loop: (function_addr, ...args) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\t// setInterval(_function, 1000, ...args);\n\t\t\tsetInterval(_function, 0, ...args);\n\t\t},\n\n\t\thost_animation_loop: (function_addr) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\tconst loop = () =>\n\t\t\t{\n\t\t\t\trequestAnimationFrame(_function);\n\n\t\t\t\t_function(...args);\n\t\t\t};\n\n\t\t\tloop();\n\t\t},\n\n\t\t// For using this function WASM code must be processed by\n\t\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t\trdty_sleep: (duration) =>\n\t\t{\n\t\t\t// Global state for running the program.\n\n\t\t\tconst DATA_ADDR = 16;\n\n\t\t\tif (wasm_wrapper.sleeping)\n\t\t\t{\n\t\t\t\t// We are called as part of a resume/rewind. Stop sleeping.\n\t\t\t\t// console.log('...resume');\n\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We are called in order to start a sleep/unwind.\n\t\t\t\t// console.log('sleep...');\n\t\t\t\t// Fill in the data structure. The first value has the stack location,\n\t\t\t\t// which for simplicity we can start right after the data structure itself.\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t// The end of the stack will not be reached here anyhow.\n\n\t\t\t\t// TODO: use stack_size instead of 1024 * 1024.\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t// // Resume after the proper delay.\n\t\t\t\t// setTimeout\n\t\t\t\t// (\n\t\t\t\t// \t() =>\n\t\t\t\t// \t{\n\t\t\t\t// \t\t// console.log('timeout ended, starting to rewind the stack');\n\t\t\t\t// \t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\t\t\t\t// \t\t// The code is now ready to rewind; to start the process, enter the\n\t\t\t\t// \t\t// first function that should be on the call stack.\n\t\t\t\t// \t},\n\n\t\t\t\t// \tduration,\n\t\t\t\t// );\n\n\t\t\t\tsetTimeout(wasm_wrapper.exports.asyncify_start_rewind, duration, DATA_ADDR);\n\t\t\t}\n\t\t},\n\t};\n\n\t// For using these functions WASM code must be processed by\n\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t// If this is main worker.\n\tif\n\t(\n\t\tself.window &&\n\t\tself.Worker &&\n\t\tself.SharedArrayBuffer\n\t)\n\t{\n\t\tObject.assign\n\t\t(\n\t\t\timports_lib,\n\n\t\t\t{\n\t\t\t\trunThread: (thread_addr, function_addr, thread_types_addr, thread_values_addr) =>\n\t\t\t\t{\n\t\t\t\t\tif (!wasm_wrapper.threads)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.threads = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst thread =\n\t\t\t\t\t\tnew wasm_wrapper.constructor.Thread2\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\twasm_wrapper,\n\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction_addr,\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_types_addr),\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_values_addr)\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t);\n\n\t\t\t\t\twasm_wrapper.threads[thread_addr] = thread;\n\t\t\t\t},\n\n\t\t\t\tjoinThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.async_count = wasm_wrapper.async_count || 0;\n\n\t\t\t\t\t++wasm_wrapper.async_count;\n\n\t\t\t\t\tif (wasm_wrapper.async_count === 1)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.async_promise =\n\t\t\t\t\t\t\tnew Promise\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tresolve =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter = (val) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (val)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst DATA_ADDR = 16;\n\n\t\t\t\t\tif (wasm_wrapper.sleeping)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\n\t\t\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\n\t\t\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t\t\twasm_wrapper.threads[thread_addr].promise\n\t\t\t\t\t\t\t.then\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_func(...wasm_wrapper.async_args);\n\n\t\t\t\t\t\t\t\t\tif (wasm_wrapper.async_count % 2 === 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter(true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tterminateThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.threads[thread_addr].terminate();\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tif\n\t(\n\t\t// self.Worker && // Safari doesn't allow workers to create Worker objects. Only main worker is allowed.\n\t\tself.SharedArrayBuffer &&\n\t\tself.Atomics\n\t)\n\t{\n\t\tif (self.window)\n\t\t{\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock: IDLE_FUNCTION,\n\t\t\t\t\tatomic_unlock: IDLE_FUNCTION,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst UNLOCKED = 0;\n\t\t\tconst LOCKED = 1;\n\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.Atomics.wait(wasm_wrapper.memory_views.I32, __atomic_malloc_index, LOCKED, Infinity);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (self.Atomics.compareExchange(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED, LOCKED) === LOCKED);\n\t\t\t\t\t},\n\n\t\t\t\t\tatomic_unlock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tself.Atomics.store(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED);\n\t\t\t\t\t\tself.Atomics.notify(wasm_wrapper.memory_views.I32, __atomic_malloc_index, 1);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\treturn imports_lib;\n};\n","import '@babel/runtime/regenerator';\n\nimport WasmWrapper from './wasm-wrapper';\nimport Thread from './threads/thread';\nimport Thread2 from './threads/thread2';\nimport Thread3 from './threads/thread3';\nimport Thread4 from './threads/thread4';\n\n\n\nObject.assign\n(\n\tWasmWrapper,\n\n\t{\n\t\tThread,\n\t\tThread2,\n\t\tThread3,\n\t\tThread4,\n\t},\n);\n\nexport default WasmWrapper;\n\n\n\nexport\n{\n\tThread,\n\tThread2,\n\tThread3,\n\tThread4,\n};\n\n\n\nconst IDLE_FUNCTION = () => 0;\n\n\n\nexport class PromiseBunch\n{\n\tconstructor ()\n\t{\n\t\tthis.running_count = 0;\n\t}\n\n\trun (callback1, callback2 = IDLE_FUNCTION)\n\t{\n\t\t++this.running_count;\n\n\t\tif (this.running_count > 1)\n\t\t{\n\t\t\tthis.callback_next1 = callback1;\n\t\t\tthis.callback_next2 = callback2;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Promise.all(callback1())\n\t\t\t.then\n\t\t\t(\n\t\t\t\tresolves =>\n\t\t\t\t{\n\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tasync runAsync (callback1, callback2 = IDLE_FUNCTION)\n\t{\n\t\t++this.running_count;\n\n\t\tif (this.running_count > 1)\n\t\t{\n\t\t\tthis.callback_next1 = callback1;\n\t\t\tthis.callback_next2 = callback2;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Promise.all(await callback1())\n\t\t\t.then\n\t\t\t(\n\t\t\t\tresolves =>\n\t\t\t\t{\n\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\treturn this.runAsync(this.callback_next1, this.callback_next2);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\t/* eslint-disable-next-line class-methods-use-this */\n\trun2 (callback1, callback2 = IDLE_FUNCTION)\n\t{\n\t\treturn Promise.all(callback1()).then(callback2);\n\t}\n\n\t/* eslint-disable-next-line class-methods-use-this */\n\tasync runAsync2 (callback1, callback2 = IDLE_FUNCTION)\n\t{\n\t\treturn Promise.all(await callback1()).then(callback2);\n\t}\n}\n","export default function ()\n{\n\tconst that = this;\n\n\n\n\tthis.options =\n\t\tObject.assign\n\t\t(\n\t\t\t{\n\t\t\t\t// 1024 b * 1024 b == 1048576 b == 1 mb\n\t\t\t\tthread_stack_size: 0x0100000,\n\t\t\t},\n\n\t\t\tthis.options,\n\t\t);\n\n\n\n\t[\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'Uint16Array',\n\t\t'Int16Array',\n\t\t'Uint32Array',\n\t\t'Int32Array',\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'BigUint64Array',\n\t\t'BigInt64Array',\n\t\t'Float32Array',\n\t\t'Float64Array',\n\t]\n\t\t.forEach\n\t\t(\n\t\t\ttyped_array_name =>\n\t\t\t{\n\t\t\t\tif (self[typed_array_name])\n\t\t\t\t{\n\t\t\t\t\tthis[typed_array_name] =\n\t\t\t\t\t\tclass extends self[typed_array_name]\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconstructor (...args)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// if (args.length !== 1)\n\t\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t\t// \tthrow new Error('wasm-wrapper typed array must be constructed with only 1 argument.');\n\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\tif (args[0] instanceof self.ArrayBuffer || (self.SharedArrayBuffer && args[0] instanceof self.SharedArrayBuffer))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (args[0] === that.memory.buffer)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsuper(...args);\n\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthrow new Error('wasm-wrapper typed array can not be backed by array buffer other than wasm-wrapper instance memory buffer.');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet length = 0;\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// length = args[0].length;\n\t\t\t\t\t\t\t\t\t[ { length } ] = args;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlength = args[0];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst byteOffset = that.exports.__malloc(length * self[typed_array_name].BYTES_PER_ELEMENT);\n\n\t\t\t\t\t\t\t\tsuper(that.memory.buffer, byteOffset, length);\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.set(args[0]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.addr = byteOffset;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfree () { that.exports.__free(this.byteOffset); }\n\n\t\t\t\t\t\t\t__reattach () { return new this.constructor(that.memory.buffer, this.byteOffset, this.length); }\n\n\t\t\t\t\t\t\t// slice (...args) {}\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\n\n\t{\n\t\tthis.mem =\n\t\t// TODO: wrap into \"cxx\" prop.\n\t\t// TODO: add \"views\" props instead of using this.memory_views.\n\t\t{\n\t\t\t'bool': { kind: 'Uint' },\n\t\t\t'char': { kind: 'Uint' },\n\t\t\t'int': { kind: 'Int' },\n\t\t\t'short': { kind: 'Int' },\n\t\t\t'long': { kind: 'Int' },\n\t\t\t'size_t': { kind: 'Uint' },\n\t\t\t'addr': { kind: 'Uint' },\n\t\t\t'uint8_t': { kind: 'Uint' },\n\t\t\t'int8_t': { kind: 'Int' },\n\t\t\t'uint16_t': { kind: 'Uint' },\n\t\t\t'int16_t': { kind: 'Int' },\n\t\t\t'uint32_t': { kind: 'Uint' },\n\t\t\t'int32_t': { kind: 'Int' },\n\t\t\t'uint64_t': { kind: 'Uint' },\n\t\t\t'int64_t': { kind: 'Int' },\n\t\t\t'float': { kind: 'Float' },\n\t\t\t'double': { kind: 'Float' },\n\t\t\t'long_double': { kind: 'Float' },\n\t\t\t'c_string': {},\n\t\t};\n\n\t\tthis.type_names = Object.keys(this.mem);\n\n\t\tthis.type_names\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\t(type_name, type_name_index) =>\n\t\t\t\t{\n\t\t\t\t\tconst size = this.exports.__sizeof(type_name_index);\n\n\t\t\t\t\tlet typed_array_constructor_name = `${ this.mem[type_name].kind }${ size * 8 }Array`;\n\n\t\t\t\t\tif (!this[typed_array_constructor_name])\n\t\t\t\t\t{\n\t\t\t\t\t\ttyped_array_constructor_name = `Big${ typed_array_constructor_name }`;\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.mem[type_name],\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\ttyped_array_constructor: this[typed_array_constructor_name],\n\t\t\t\t\t\t\tinterp_log: addr => this[type_name](addr)[0],\n\t\t\t\t\t\t\tinterp_thread: addr => this[type_name](addr),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tthis.mem.bool.interp_log = addr => Boolean(this.bool(addr)[0]),\n\n\t\tthis.mem.c_string.interp_log = addr => this.c_string2(this.addr(addr)[0]);\n\t\tthis.mem.c_string.interp_thread = addr => this.addr(addr);\n\t\tthis.mem.c_string.interp_arg = str => new this.mem.char.typed_array_constructor(this.constructor.convertDomStringToUint8Array(str));\n\t}\n\n\n\n\t{\n\t\tthis.memory_views = {};\n\n\t\tthis.memory_views.UI8 = new this.Uint8Array(this.memory.buffer);\n\t\t// this.memory_views.I8 = new this.Int8Array(this.memory.buffer);\n\t\t// this.memory_views.UI16 = new this.Uint16Array(this.memory.buffer);\n\t\t// this.memory_views.I16 = new this.Int16Array(this.memory.buffer);\n\t\t// this.memory_views.UI32 = new this.Uint32Array(this.memory.buffer);\n\t\tthis.memory_views.I32 = new this.Int32Array(this.memory.buffer);\n\t\t// if (this.BigUint64Array) { this.memory_views.UI64 = new this.BigUint64Array(this.memory.buffer); }\n\t\t// if (this.BigInt64Array) { this.memory_views.I64 = new this.BigInt64Array(this.memory.buffer); }\n\t\t// this.memory_views.F32 = new this.Float32Array(this.memory.buffer);\n\t\t// this.memory_views.F64 = new this.Float64Array(this.memory.buffer);\n\t}\n}\n","import Worker from './thread.1.worker.js';\n\n\n\nconst empty_array = [];\n\n\n\nexport default class Thread\n{\n\tconstructor (wasm_wrapper, function_name, data = empty_array)\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.__malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\t// Should be private?\n\t\tthis.promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker = new Worker();\n\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports_thread: imports } = wasm_wrapper;\n\n\t\t\t\t\t// for (const key in memory)\n\t\t\t\t\t// {\n\t\t\t\t\t// \tif (key !== 'buffer')\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tdelete memory[key];\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\n\t\t\t\t\t\tfunction_name,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tterminate ()\n\t{\n\t\tthis.worker.terminate();\n\n\t\tthis.wasm_wrapper.exports.__free(this.stack_addr);\n\n\t\t// this.promise = null;\n\t}\n\n\tasync join ()\n\t{\n\t\tawait this.promise;\n\n\t\tthis.terminate();\n\t}\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"thread.1.worker.worker.js\");\n}\n","import Worker from './thread2.1.worker.js';\n\n\n\nexport default class Thread2\n{\n\tconstructor (wasm_wrapper, data)\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.__malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\tthis.active = true;\n\n\t\tthis.promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker = new Worker();\n\n\t\t\t\t\t// TODO: free stack memory when thread terminates automatically.\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports_thread: imports } = wasm_wrapper;\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\t}\n\n\tterminate ()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.worker.terminate();\n\n\t\t\tthis.wasm_wrapper.exports.__free(this.stack_addr);\n\n\t\t\tthis.active = false;\n\t\t}\n\t}\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"thread2.1.worker.worker.js\");\n}\n","import Worker from './thread3.1.worker.js';\n\n\n\nexport default class Thread\n{\n\t// TODO: add stack_size option.\n\tconstructor (wasm_wrapper)\n\t{\n\t\tthis.wasm_wrapper = wasm_wrapper;\n\n\t\tthis.stack_addr = this.wasm_wrapper.exports.__malloc(this.wasm_wrapper.options.thread_stack_size);\n\n\t\tthis.stack_pointer = this.stack_addr + this.wasm_wrapper.options.thread_stack_size;\n\n\t\tthis.worker = new Worker();\n\t}\n\n\tinit ()\n\t{\n\t\tconst promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tconst { code, memory, imports_thread: imports } = this.wasm_wrapper;\n\n\t\t\t\t\tconst { stack_pointer } = this;\n\n\t\t\t\t\tthis.worker.postMessage\n\t\t\t\t\t({\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\timports,\n\t\t\t\t\t\tstack_pointer,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn promise;\n\t}\n\n\twork (function_name, data = [])\n\t{\n\t\tconst promise =\n\t\t\tnew Promise\n\t\t\t(\n\t\t\t\tresolve =>\n\t\t\t\t{\n\t\t\t\t\tthis.worker.onmessage = resolve;\n\n\t\t\t\t\tthis.worker.postMessage({ function_name, data });\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn promise;\n\t}\n\n\t// TODO.\n\t// work2 (function_list)\n\t// {\n\t// \tconst promise =\n\t// \t\tnew Promise\n\t// \t\t(\n\t// \t\t\tresolve =>\n\t// \t\t\t{\n\t// \t\t\t\tthis.worker.onmessage = resolve;\n\n\t// \t\t\t\tthis.worker.postMessage({ work_list });\n\t// \t\t\t},\n\t// \t\t);\n\n\t// \treturn promise;\n\t// }\n\n\tterminate ()\n\t{\n\t\tthis.worker.terminate();\n\n\t\tthis.wasm_wrapper.exports.__free(this.stack_addr);\n\n\t\t// this.promise = null;\n\t}\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"thread3.1.worker.worker.js\");\n}\n","import Thread3 from '../thread3';\nimport Worker from './thread4.1.worker.js';\n\n\n\n// TODO: remove class name?\nexport default class Thread extends Thread3\n{\n\t// TODO: add stack_size option.\n\tconstructor (wasm_wrapper)\n\t{\n\t\tsuper(wasm_wrapper);\n\n\t\tthis.exports = {};\n\n\t\tObject.keys(wasm_wrapper.exports).forEach\n\t\t(\n\t\t\texport_name =>\n\t\t\t{\n\t\t\t\tif (typeof wasm_wrapper.exports[export_name] === 'function' && !export_name.startsWith('__'))\n\t\t\t\t{\n\t\t\t\t\tthis.exports[export_name] = (...args) => this.work(export_name, args);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t}\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"thread4.1.worker.worker.js\");\n}\n","// https://webassembly.org\n// https://webassembly.github.io/spec\n// https://github.com/WebAssembly\n// https://developer.mozilla.org/en-US/docs/WebAssembly\n// https://wasi.dev\n// https://lld.llvm.org/WebAssembly.html\n// https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-documents.md\n// https://docs.wasmtime.dev/\n\n\n\n/* eslint-disable */\n\n\n\n/**\n * Using TypedArray.subarray() is preferred\n * when accessing to data\n * to avoid extra memory allocation.\n *\n * Strange std::string behavior:\n * if std::string data length <=11, std::string object address is the same with its data;\n * if >11, std::string object name stores address of beginning of the data.\n * So in second case one can use WasmWrapper::c_string method to get string bytes.\n * Maybe it's not related to data length, but to dynamic memory allocation.\n *\n *\n *\n * If memory is shared then memory growing is not allowed\n * and maximum memory size is specified at compilation.\n *\n *\n *\n * Passing argument by reference works as passing by pointer.\n * So, functions with reference parameters expect address instead of value.\n *\n *\n *\n * TODO: determination capabiity of what wasm memory type is being used.\n */\n\n\n\n// Webpack arraybuffer-loader is required.\n// import test_simd_wasm_buffer from './test-simd/build/clang-wasm32/output/wasm/test-simd.wasm';\n\nimport configureMemory from './memory';\nimport getImports from './imports';\nimport cxx_specific_functions from './cxx-specific';\n\n\n\nconst __CODE_TYPE_BYTECODE__ = 0;\nconst __CODE_TYPE_FUNCTION__ = 1;\n\n\n\nconst IDLE_FUNCTION = () => 0;\n\nconst ERROR_LOG = (...args) => console.log(`%c${ content }`, 'background-color: red; padding: 2px;', ...args.slice(1));\nconst WARN_LOG = (...args) => console.log(`%c${ args[0] }`, 'background-color: #8B8000; padding: 2px;', ...args.slice(1));\n\nconst DEBUG_INFO = [];\n\nconst DEBUG_INFO_PUSH = (...args) => DEBUG_INFO.push(args);\n\nconst DEBUG_LABEL_LOG = thread_id =>\n{\n\tDEBUG_INFO.forEach(label => console.log(`%c${ thread_id }: ${ label[0] }`, 'background-color: #00858A; padding: 2px;', ...label.slice(1)));\n\n\tDEBUG_INFO.length = 0;\n};\n\n\n\nDEBUG_INFO_PUSH(`WASM CONCURRENCY: ${ self.navigator.hardwareConcurrency }`);\n\n\n\nclass WasmWrapper\n{\n\tstatic text_decoder = new TextDecoder('utf-8');\n\tstatic text_encoder = new TextEncoder();\n\n\t// static convertUint8ArrayToDomString (uint8_array)\n\t// {\n\t// \treturn WasmWrapper.text_decoder.decode(uint8_array);\n\t// }\n\n\t// Version for shared buffer backed array.\n\t// Decoding views of shared buffer is not allowed.\n\tstatic convertUint8ArrayToDomString (uint8_array)\n\t{\n\t\t// return WasmWrapper.text_decoder.decode(uint8_array.slice());\n\t\treturn WasmWrapper.text_decoder.decode(new Uint8Array(uint8_array));\n\t}\n\n\tstatic convertDomStringToUint8Array (text)\n\t{\n\t\treturn WasmWrapper.text_encoder.encode(text);\n\t}\n\n\tstatic async testSimd ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\t// webpack arraybuffer-loader has to be installed when using the library with soures files.\n\t\t\t// const wasm_buffer = (await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm')).default;\n\t\t\tconst wasm_buffer = (await import('./test-simd/build/test.wasm')).default;\n\n\t\t\tconst wasm_module = await WebAssembly.compile(wasm_buffer);\n\n\t\t\t// LOG(WebAssembly.Module.exports(wasm_module))\n\t\t\t// LOG(WebAssembly.Module.imports(wasm_module))\n\n\t\t\tconst instance = await WebAssembly.instantiate(wasm_module);\n\n\t\t\t// // Webpack since version 4 has embedded WASM parser.\n\t\t\t// // MIME type \"application/wasm\" must be defined for \".wasm\" extension on server.\n\t\t\t// // TODO: use another type of importing ?\n\t\t\t// await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm');\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tERROR_LOG(`WASM SIMD TEST FAILED: ${ error }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM SIMD: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tstatic async testAtomic ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\tconst wasm_buffer = (await import('./test-atomic/build/test.wasm')).default;\n\n\t\t\tconst wasm_module = await WebAssembly.compile(wasm_buffer);\n\n\t\t\tconst instance = await WebAssembly.instantiate(wasm_module);\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tERROR_LOG(`WASM ATOMIC TEST FAILED: ${ error }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM ATOMIC: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tconstructor (options = {})\n\t{\n\t\tself.__wasm_wrapper__ = this;\n\n\t\tthis.options = options;\n\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass ThreadPromiseBunch\n\t\t{\n\t\t\tconstructor ()\n\t\t\t{\n\t\t\t\t// TODO: rename to run_count.\n\t\t\t\tthis.running_count = 0;\n\t\t\t}\n\n\t\t\trun (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trunLog (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\tLOG('ThreadPromiseBunch start __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tLOG('ThreadPromiseBunch end __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tasync runAsync (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.runAsync(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trun2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync runAsync2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.ThreadPromiseBunch = ThreadPromiseBunch;\n\n\n\n\t\t// configureMemory(this, options);\n\t}\n\n\tfunction (addr)\n\t{\n\t\treturn this.exports.__indirect_function_table.get(addr);\n\t}\n\n\tasync async (_function, ...args)\n\t{\n\t\tthis.async_args = args;\n\n\t\t(this.async_func = _function)(...args);\n\n\t\tthis.exports.asyncify_stop_unwind();\n\n\t\tawait this.async_promise;\n\n\t\tthis.async_count = 0;\n\t}\n\n\tasync instantiate ({ wasm_module_imports, imports_lib, imports_custom, wasm_module, code, debug })\n\t{\n\t\t// Object for passing to threads.\n\t\tthis.imports_thread = { env: {} };\n\n\t\tObject.keys(imports_custom)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmodule =>\n\t\t\t\t{\n\t\t\t\t\tObject.keys(imports_custom[module])\n\t\t\t\t\t\t.forEach\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\timport_custom =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!this.imports_thread[module])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.imports_thread[module] = {};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.imports_thread[module][import_custom] = 0;\n\n\t\t\t\t\t\t\t\t// TODO: use \"|=\" operator ?\n\t\t\t\t\t\t\t\t// If (imports_custom[module][import_custom] === 0) then make it IDLE_FUNCTION.\n\t\t\t\t\t\t\t\timports_custom[module][import_custom] = imports_custom[module][import_custom] || IDLE_FUNCTION;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tconst imports_aggregate = {};\n\n\t\tObject.assign(imports_aggregate, imports_custom);\n\n\t\tObject.assign\n\t\t(\n\t\t\timports_aggregate.env,\n\n\t\t\timports_lib\n\t\t);\n\n\t\t// Imported memory\n\t\tif (this.memory)\n\t\t{\n\t\t\timports_aggregate.env.memory = this.memory;\n\t\t}\n\n\t\twasm_module_imports\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\twasm_module_import =>\n\t\t\t\t{\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module])\n\t\t\t\t\t{\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module][wasm_module_import.name])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWARN_LOG(`Missed ${ wasm_module_import.module } import:`, wasm_module_import.name);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module][wasm_module_import.name] = IDLE_FUNCTION;\n\t\t\t\t\t\t// imports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\n\t\t\t\t\t\t// if (wasm_module_import.name !== 'clock_time_get')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// if (wasm_module_import.name === 'fd_write')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = (...args) => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); LOG(args.map(arg => this.CString2(arg))); };\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\tlet exports = null;\n\n\t\tif (wasm_module)\n\t\t{\n\t\t\tconst wasm_module_instance =\n\t\t\t\tawait WebAssembly.instantiate\n\t\t\t\t// await WebAssembly.instantiateStreaming\n\t\t\t\t(\n\t\t\t\t\twasm_module,\n\n\t\t\t\t\timports_aggregate,\n\t\t\t\t);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM MODULE INSTANCE:', wasm_module_instance);\n\t\t\t}\n\n\t\t\t// this.instance = wasm_module_instance;\n\n\t\t\t({ exports } = wasm_module_instance);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// imports_aggregate.wasi_snapshot_preview1 = {};\n\t\t\t// imports_aggregate.wasi_snapshot_preview1.fd_write = (...args) => LOG(args.map(arg => this.c_string2(arg)));\n\n\t\t\texports = code(imports_aggregate);\n\t\t}\n\n\t\t// Exported memory\n\t\tif (!this.memory)\n\t\t{\n\t\t\tthis.memory = exports.memory;\n\t\t}\n\n\t\t// setInterval(() => LOG(this.memory.buffer), 1000);\n\n\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ this.memory.buffer.byteLength / 65536 } pages (${ this.memory.buffer.byteLength } bytes)`);\n\n\t\treturn exports;\n\t}\n\n\tasync init\n\t({\n\t\t// TODO: reorder.\n\t\tcode,\n\t\tmemory = null,\n\t\t// memory_params = { minimum: 65536, maximum: 65536, initial: 65536, shared: true },\n\t\tmemory_params = { minimum: 2, initial: 2, maximum: 65536, shared: true },\n\t\timports: imports_custom = { env: {} },\n\t\tstack_pointer = undefined,\n\t\tconfigureMemory = true,\n\t\tforceLocalMemory = false,\n\t\tinitGlobals = true,\n\t\tdemangleCxxNames = false,\n\t\tdebug = false,\n\t\tfindOptimalMemorySize = true,\n\t})\n\t{\n\t\tlet code_type = null;\n\n\t\t// Code for passing to other WASM instances (e.g. threads).\n\t\tthis.code = code;\n\n\t\tif (typeof code === 'string')\n\t\t{\n\t\t\tif (code.startsWith('function'))\n\t\t\t{\n\t\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\t\tcode = new Function(code);\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string function -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t\t// base64\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode = Uint8Array.from(atob(code), c => c.charCodeAt(0));\n\n\t\t\t\t// TODO: Make code shared (if can) to speed up passing it to workers. DONE?\n\t\t\t\tif (self.SharedArrayBuffer)\n\t\t\t\t{\n\t\t\t\t\tconst code_temp = code;\n\n\t\t\t\t\tcode = new Uint8Array(new SharedArrayBuffer(code.length));\n\n\t\t\t\t\tcode.set(code_temp);\n\t\t\t\t}\n\n\t\t\t\tthis.code = code;\n\n\t\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string base64 -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t}\n\t\telse if (typeof code === 'function')\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\tthis.code = code.toString();\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: function`);\n\t\t}\n\t\t// Code is an Uint8Array backed (SharedArrayBuffer optionally) or ArrayBuffer or SharedArrayBuffer.\n\t\t// UPD. SharedArrayBuffer can not be used as source for WebAssembly module, only for Uint8Array\n\t\t// backed by SharedArrayBuffer.\n\t\telse\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code.constructor.name }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code_type === __CODE_TYPE_BYTECODE__ ? 'BYTECODE' : 'FUNCTION' }`);\n\n\t\t// DEBUG_LABEL_LOG();\n\n\n\n\t\tconst imports_lib = getImports(this);\n\n\n\n\t\tif (code_type === __CODE_TYPE_BYTECODE__)\n\t\t{\n\t\t\tconst wasm_module = await WebAssembly.compile(code);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM MODULE: ', wasm_module);\n\t\t\t}\n\n\t\t\tconst wasm_module_imports = WebAssembly.Module.imports(wasm_module);\n\t\t\t// const wasm_module_exports = WebAssembly.Module.exports(wasm_module);\n\n\t\t\tthis.memory = null;\n\n\t\t\t// Memory comes from WASM main worker instance to thread instance.\n\t\t\t// is always imported and shared.\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: SHARED')\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst [ imported_memory ] =\n\t\t\t\t\twasm_module_imports\n\t\t\t\t\t\t.filter((import_desc) => (import_desc.kind === 'memory'));\n\n\t\t\t\tconst shared_memory_allowed = Boolean(self.SharedArrayBuffer) && !forceLocalMemory;\n\n\t\t\t\tif (imported_memory)\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\n\t\t\t\t\tlet memory_desc = null;\n\n\t\t\t\t\t// chrome://flags#enable-experimental-webassembly-features must be enabled\n\t\t\t\t\t// to access \"type\" property of \"imported_memory\". It contains memory\n\t\t\t\t\t// type and size info produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\t// \"--import-memory\" linker flag specifies whether memory is imported to WebAssembly module.\n\t\t\t\t\t// \"--shared-memory\" linker flag specifies whether memory is shared between WebAssembly instances.\n\t\t\t\t\t// \"--max-memory=N\" linker flag specifies maximum size of memory for WebAssembly instance.\n\n\t\t\t\t\t// The advantqge of this is that we don't need to provide \"memory_params\"\n\t\t\t\t\t// to crate the memory object. Memory object is created automatically\n\t\t\t\t\t// after reading the \"imported_memory.type\".\n\t\t\t\t\tif (imported_memory.type)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is --initial-memory flag ignored if --shared-memory flag is defined?\n\t\t\t\t\t\t\t// UPD: NO.\n\t\t\t\t\t\t\t// initial: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tinitial: imported_memory.type.minimum,\n\t\t\t\t\t\t\tmaximum: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tshared: imported_memory.type.shared && shared_memory_allowed,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Parameters must match values produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 65536 pages == 4gb, maximum possible memory size for 32-bit WebAssembly instance.\n\t\t\t\t\t\t\tinitial: memory_params.initial,\n\t\t\t\t\t\t\tmaximum: memory_params.maximum, // Must match \"--max-memory=N\" flag.\n\t\t\t\t\t\t\t// shared, // Must match \"--shared-memory\" flag.\n\t\t\t\t\t\t\tshared: memory_params.shared && shared_memory_allowed,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.memory = new WebAssembly.Memory(memory_desc);\n\n\t\t\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ memory_desc.shared ? 'SHARED' : 'NOT SHARED' }`)\n\t\t\t\t}\n\t\t\t\t// TODO: add the case when memory is imported but can be created with arbitrary parameters.\n\t\t\t\t// Is this case possible? Meybe possible only when memory is not shared?\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: EXPORTED')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, wasm_module, debug });\n\t\t}\n\t\t/**\n\t\t * Initializes WasmWrapper instance with JS code compiled from WASM with wasm2js.\n\t\t *\n\t\t * In this case presume WASM instances don't use shared memory and exported memory.\n\t\t *\n\t\t * wasm2js generates code with Atomics, even if its input WASM is compiled without flag \"--shared-memory\".\n\t\t * TODO: use --disable-threads to generating Atomics as --help says.\n\t\t * UPD: There are still Atomics even with --disable-threads flag.\n\t\t * UPD: Removing \"-matomics\" compiler flag helped.\n\t\t *\n\t\t * if (!self.Atomics)\n\t\t * {\n\t\t *   self.Atomics = { load: (arr, index) => arr[index] };\n\t\t * }\n\t\t */\n\t\telse\n\t\t{\n\t\t\tthis.memory = null;\n\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// 1 page == 65536 bytes == 0.0625 mb.\n\t\t\t\t// 1 mb == 16 pages.\n\t\t\t\t// 1gb == 16384 pages.\n\t\t\t\t// this.memory = { buffer: new self.ArrayBuffer(size) };\n\t\t\t\tconst allocate =\n\t\t\t\t\t(size_pages, max_size_pages) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet result = true;\n\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.memory = { buffer: new self.ArrayBuffer(Math.imul(size_pages, 65536), { maxByteLength: Math.imul(max_size_pages, 65536) }) };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (evt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconsole.error(evt);\n\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t};\n\n\t\t\t\t// if (findOptimalMemorySize)\n\t\t\t\t// {\n\t\t\t\t// \tfor (let size = memory_params.initial;; size /= 2)\n\t\t\t\t// \t{\n\t\t\t\t// \t\tif (allocate(size, memory_params.maximum))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\tLOG(size, 'bytes allocated')\n\n\t\t\t\t// \t\t\tbreak;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\t// else\n\t\t\t\t{\n\t\t\t\t\tallocate(memory_params.initial, memory_params.maximum);\n\t\t\t\t}\n\n\t\t\t\tLOG(this.memory.buffer)\n\t\t\t}\n\n\t\t\t// TODO: Find better solution to get import modules used.\n\t\t\t// Now it is hardcoded.\n\t\t\tconst wasm_module_imports =\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tmodule: \"env\",\n\t\t\t\t\tmodule: \"wasi_snapshot_preview1\",\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, code, debug });\n\t\t}\n\n\n\n\t\tif (configureMemory)\n\t\t{\n\t\t\tthis.configureMemory();\n\n\t\t\t// DEBUG_INFO_PUSH(`WASM MEMORY: ${ this.memory.buffer.byteLength / 65536 } pages (${ this.memory.buffer.byteLength } bytes)`);\n\t\t}\n\n\t\tif (this.exports.__main)\n\t\t{\n\t\t\tthis.__thread_id = this.exports.__main(stack_pointer);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LABEL_LOG(this.__thread_id);\n\t\t\t}\n\t\t}\n\n\t\tif (initGlobals)\n\t\t{\n\t\t\tthis.globals = this.initGlobals();\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM GLOBALS:', this.globals)\n\t\t\t}\n\t\t}\n\n\t\tif (demangleCxxNames)\n\t\t{\n\t\t\tconst { exports_demangled, exports_demangled_reduced } = this.demangleCxxNames();\n\n\t\t\tObject.assign(this, { exports_demangled, exports_demangled_reduced });\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM EXPORTS DEMANGLED', this.exports_demangled);\n\t\t\t\tDEBUG_INFO_PUSH('WASM EXPORTS DEMANGLED', this.exports_demangled_reduced);\n\t\t\t}\n\t\t}\n\n\t\t// this.__heap_pointer_initial = this.addr(this.globals.__heap_pointer)[0];\n\t}\n\n\t// resetHeapPointer ()\n\t// {\n\t// \tthis.exports.__setHeapPointer(this.__heap_pointer_initial);\n\t// }\n\n\tinitGlobals ()\n\t{\n\t\tconst globals = {};\n\n\t\tconst prefix_length = '__EXPORT_ADDR__'.length;\n\n\t\tObject.keys(this.exports)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\texport_name =>\n\t\t\t\t{\n\t\t\t\t\tif (export_name.startsWith('__EXPORT_ADDR__'))\n\t\t\t\t\t{\n\t\t\t\t\t\tglobals[export_name.slice(prefix_length)] = this.exports[export_name]();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn globals;\n\t}\n\n\tgetNewThread () { return new WasmWrapper.Thread(this); }\n\tgetNewThread2 () { return new WasmWrapper.Thread2(this); }\n\tgetNewThread3 () { return new WasmWrapper.Thread3(this); }\n\tgetNewThread4 () { return new WasmWrapper.Thread4(this); }\n\n\tasync initThreads (thread_count)\n\t{\n\t\tconst threads =\n\t\t\tnew Array(thread_count)\n\t\t\t\t.fill(null)\n\t\t\t\t.map(() => new WasmWrapper.Thread3(this));\n\n\t\tawait Promise.all(threads.map(thread => thread.init()));\n\n\t\treturn threads;\n\t}\n\n\tterminateThreads (threads)\n\t{\n\t\tthreads\n\t\t\t.reverse()\n\t\t\t.forEach(thread => thread.terminate());\n\t}\n}\n\n\n\nWasmWrapper.prototype.configureMemory = configureMemory;\n\nObject.assign(WasmWrapper.prototype, cxx_specific_functions);\n\n\n\nexport default WasmWrapper;\n"],"sourceRoot":""}