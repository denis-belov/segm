{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/cxx-specific.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/imports.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/memory.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/wasm-wrapper.js","webpack:////Users/Denis/reps/renderity/wasm-wrapper/src/threads/thread/thread.1.worker.js"],"names":["bool","addr","length","arguments","undefined","mem","typed_array_constructor","memory","buffer","char","int","short","long","size_t","uint8_t","Uint8Array","int8_t","Int8Array","uint16_t","Uint16Array","int16_t","Int16Array","uint32_t","Uint32Array","int32_t","Int32Array","uint64_t","BigUint64Array","int64_t","BigInt64Array","float","double","long_double","size","addr2","name","globals","exports","value","getCStringLength","_addr","vend","memory_views","UI8","c_string","c_string2","constructor","convertUint8ArrayToDomString","std_string","result","__getStdStringData","__getStdStringSize","std_string2","std_vector","type","__getStdVectorData","__getStdVectorSize","std_vector_char","std_vector_int","std_vector_short","std_vector_long","std_vector_size_t","std_vector_addr","std_vector_uint8_t","std_vector_int8_t","std_vector_uint16_t","std_vector_int16_t","std_vector_uint32_t","std_vector_int32_t","std_vector_uint64_t","std_vector_int64_t","std_vector_float","std_vector_double","std_vector_long_double","resizeStdVector","__resizeStdVector","updateStdVectorData","_data","set","demangleCxxNames","_this","demangled_name_max_length","demangled_name_addr","__malloc","exports_demangled_reduced","exports_demangled","Object","keys","reduce","_name","startsWith","concat","convertDomStringToUint8Array","demangled_name","__demangleCxxName","replace","Array","isArray","push","first_entry","__free","Class","wasm_wrapper","_Class","_createClass","input","_classCallCheck","_wasm_wrapper$addr","_wasm_wrapper$addr2","_slicedToArray","_defineProperty","self","filter","member_name","includes","forEach","member_name_trimmed","wasm_object","_member_name$match","parameters","match","split","overloaded","prototype","_len","args","_key","apply","_typeof","New","NewWrapper","IDLE_FUNCTION","imports_lib","console_log","types_addr","values_addr","_console","arg_types","_wasm_wrapper$size_t","__any_value_size","_wasm_wrapper$size_t2","any_value_size","i","type_name","type_names","value_addr","interp_log","console","log","console_log2","_console2","date_now","Date","now","host_loop","function_addr","_function","_len2","_key2","setInterval","host_animation_loop","loop","requestAnimationFrame","_toConsumableArray","rdty_sleep","duration","DATA_ADDR","sleeping","asyncify_stop_rewind","I32","asyncify_start_unwind","setTimeout","asyncify_start_rewind","window","Worker","SharedArrayBuffer","assign","runThread","thread_addr","thread_types_addr","thread_values_addr","threads","thread","Thread2","joinThread","async_count","async_promise","Promise","resolve","async_promise_setter","val","promise","then","async_func","async_args","terminateThread","terminate","Atomics","atomic_lock","atomic_unlock","UNLOCKED","LOCKED","atomic_addr","__atomic_malloc_index","wait","Infinity","compareExchange","store","notify","that","options","thread_stack_size","typed_array_name","_self$typed_array_nam","_inherits","_class","_super","_createSuper","_this2","ArrayBuffer","call","_possibleConstructorReturn","Error","byteOffset","BYTES_PER_ELEMENT","key","free","__reattach","kind","type_name_index","__sizeof","typed_array_constructor_name","interp_thread","Boolean","interp_arg","str","_regeneratorRuntime","e","t","r","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","err","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","obj","_toPrimitive","String","hint","prim","toPrimitive","res","Number","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","from","test","iter","len","arr2","__CODE_TYPE_BYTECODE__","__CODE_TYPE_FUNCTION__","ERROR_LOG","content","WARN_LOG","DEBUG_INFO","DEBUG_INFO_PUSH","_len3","_key3","DEBUG_LABEL_LOG","thread_id","label","_console3","navigator","hardwareConcurrency","WasmWrapper","__wasm_wrapper__","ThreadPromiseBunch","running_count","run","callback1","callback2","callback_next1","callback_next2","__initHeapPointer","all","resolves","__resetHeapPointer","runLog","LOG","__heap_pointer","_runAsync","_callee","_this3","_args","_callee$","_context","t0","t1","runAsync","_x","run2","_runAsync2","_callee2","_args2","_callee2$","_context2","runAsync2","_x2","__indirect_function_table","get","_async","_callee3","_len4","_key4","_args3","_callee3$","_context3","asyncify_stop_unwind","_x3","_instantiate","_callee4","_ref","_this4","wasm_module_imports","imports_custom","wasm_module","code","debug","imports_aggregate","wasm_module_instance","_callee4$","_context4","imports_thread","env","module","import_custom","wasm_module_import","WebAssembly","instantiate","byteLength","_x4","_init","_callee5","_ref2","_this5","_ref2$memory","_ref2$memory_params","memory_params","_ref2$imports","_ref2$stack_pointer","stack_pointer","_ref2$configureMemory","configureMemory","_ref2$forceLocalMemor","forceLocalMemory","_ref2$initGlobals","initGlobals","_ref2$demangleCxxName","_ref2$debug","_ref2$findOptimalMemo","findOptimalMemorySize","code_type","code_temp","_wasm_module_imports$","_wasm_module_imports$2","imported_memory","shared_memory_allowed","memory_desc","allocate","_wasm_module_imports","_this$demangleCxxName","_callee5$","_context5","minimum","initial","maximum","shared","imports","Function","atob","charCodeAt","getImports","compile","Module","import_desc","Memory","size_pages","max_size_pages","Math","imul","maxByteLength","evt","__main","__thread_id","init","_x5","_this6","prefix_length","export_name","getNewThread","Thread","getNewThread2","getNewThread3","Thread3","getNewThread4","Thread4","_initThreads","_callee6","thread_count","_this7","_callee6$","_context6","fill","map","initThreads","_x6","terminateThreads","uint8_array","text_decoder","decode","text","text_encoder","encode","_testSimd","_callee7","wasm_buffer","_callee7$","_context7","testSimd","_testAtomic","_callee8","_callee8$","_context8","testAtomic","TextDecoder","TextEncoder","cxx_specific_functions","wasm","onmessage","data","_wasm$exports","postMessage","function_name"],"mappings":"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","file":"thread.1.worker.worker.worker.js","sourcesContent":[" \tself[\"webpackChunk\"] = function webpackChunkCallback(chunkIds, moreModules) {\n \t\tfor(var moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\twhile(chunkIds.length)\n \t\t\tinstalledChunks[chunkIds.pop()] = 1;\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"1\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"thread.1.worker\": 1\n \t};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \tfunction promiseResolve() { return Promise.resolve(); }\n\n \tvar wasmImportObjects = {\n \t\t\"../../renderity/wasm-wrapper/src/test-atomic/build/test.wasm\": function() {\n \t\t\treturn {\n\n \t\t\t};\n \t\t},\n \t\t\"../../renderity/wasm-wrapper/src/test-simd/build/test.wasm\": function() {\n \t\t\treturn {\n\n \t\t\t};\n \t\t},\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n \t\tpromises.push(Promise.resolve().then(function() {\n \t\t\t// \"1\" is the signal for \"already loaded\"\n \t\t\tif(!installedChunks[chunkId]) {\n \t\t\t\timportScripts(__webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".worker.worker.js\");\n \t\t\t}\n \t\t}));\n\n \t\t// Fetch + compile chunk loading for webassembly\n\n \t\tvar wasmModules = {\"0\":[\"../../renderity/wasm-wrapper/src/test-atomic/build/test.wasm\"],\"1\":[\"../../renderity/wasm-wrapper/src/test-simd/build/test.wasm\"]}[chunkId] || [];\n\n \t\twasmModules.forEach(function(wasmModuleId) {\n \t\t\tvar installedWasmModuleData = installedWasmModules[wasmModuleId];\n\n \t\t\t// a Promise means \"currently loading\" or \"already loaded\".\n \t\t\tif(installedWasmModuleData)\n \t\t\t\tpromises.push(installedWasmModuleData);\n \t\t\telse {\n \t\t\t\tvar importObject = wasmImportObjects[wasmModuleId]();\n \t\t\t\tvar req = fetch(__webpack_require__.p + \"\" + {\"../../renderity/wasm-wrapper/src/test-atomic/build/test.wasm\":\"bb6eec8510ea0ed082dd\",\"../../renderity/wasm-wrapper/src/test-simd/build/test.wasm\":\"15c3acd181c9cc8c1774\"}[wasmModuleId] + \".module.wasm\");\n \t\t\t\tvar promise;\n \t\t\t\tif(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\n \t\t\t\t\tpromise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\n \t\t\t\t\t\treturn WebAssembly.instantiate(items[0], items[1]);\n \t\t\t\t\t});\n \t\t\t\t} else if(typeof WebAssembly.instantiateStreaming === 'function') {\n \t\t\t\t\tpromise = WebAssembly.instantiateStreaming(req, importObject);\n \t\t\t\t} else {\n \t\t\t\t\tvar bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\n \t\t\t\t\tpromise = bytesPromise.then(function(bytes) {\n \t\t\t\t\t\treturn WebAssembly.instantiate(bytes, importObject);\n \t\t\t\t\t});\n \t\t\t\t}\n \t\t\t\tpromises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\n \t\t\t\t\treturn __webpack_require__.w[wasmModuleId] = (res.instance || res).exports;\n \t\t\t\t}));\n \t\t\t}\n \t\t});\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all WebAssembly.instance exports\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js?!./node_modules/conditional-compile-loader/index.js?!../../renderity/wasm-wrapper/src/threads/thread/thread.1.worker.js\");\n","export default\n{\n\t// https://en.cppreference.com/w/cpp/language/types\n\tbool (addr, length = 1) { return new this.mem.bool.typed_array_constructor(this.memory.buffer, addr, length); },\n\tchar (addr, length = 1) { return new this.mem.char.typed_array_constructor(this.memory.buffer, addr, length); },\n\tint (addr, length = 1) { return new this.mem.int.typed_array_constructor(this.memory.buffer, addr, length); },\n\tshort (addr, length = 1) { return new this.mem.short.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong (addr, length = 1) { return new this.mem.long.typed_array_constructor(this.memory.buffer, addr, length); },\n\tsize_t (addr, length = 1) { return new this.mem.size_t.typed_array_constructor(this.memory.buffer, addr, length); },\n\taddr (addr, length = 1) { return new this.mem.addr.typed_array_constructor(this.memory.buffer, addr, length); },\n\tuint8_t (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length); },\n\tint8_t (addr, length = 1) { return new this.Int8Array(this.memory.buffer, addr, length); },\n\tuint16_t (addr, length = 1) { return new this.Uint16Array(this.memory.buffer, addr, length); },\n\tint16_t (addr, length = 1) { return new this.Int16Array(this.memory.buffer, addr, length); },\n\tuint32_t (addr, length = 1) { return new this.Uint32Array(this.memory.buffer, addr, length); },\n\tint32_t (addr, length = 1) { return new this.Int32Array(this.memory.buffer, addr, length); },\n\tuint64_t (addr, length = 1) { return new this.BigUint64Array(this.memory.buffer, addr, length); },\n\tint64_t (addr, length = 1) { return new this.BigInt64Array(this.memory.buffer, addr, length); },\n\tfloat (addr, length = 1) { return new this.mem.float.typed_array_constructor(this.memory.buffer, addr, length); },\n\tdouble (addr, length = 1) { return new this.mem.double.typed_array_constructor(this.memory.buffer, addr, length); },\n\tlong_double (addr, length = 1) { return new this.Uint8Array(this.memory.buffer, addr, length * this.mem.long_double.size); },\n\n\taddr2 (name, length = 1) { return this.addr(this.globals[name] || this.exports[name].value, length); },\n\n\tgetCStringLength (addr)\n\t{\n\t\tconst _addr = addr;\n\n\t\t// Find terminating \"\\0\".\n\t\tfor (let vend = 0; ; ++vend)\n\t\t{\n\t\t\t// if (this.char(_addr + vend)[0] === 0)\n\t\t\tif (this.memory_views.UI8[_addr + vend] === 0)\n\t\t\t{\n\t\t\t\treturn vend;\n\t\t\t}\n\t\t}\n\t},\n\n\t// c_string (addr)\n\t// {\n\t// \treturn this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr));\n\t// },\n\n\tc_string (addr)\n\t{\n\t\treturn this.char(addr, this.getCStringLength(addr));\n\t},\n\n\tc_string2 (addr)\n\t{\n\t\t// return this.constructor.convertUint8ArrayToDomString(this.memory_views.UI8.subarray(addr, addr + this.getCStringLength(addr)));\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.c_string(addr));\n\t},\n\n\tstd_string (addr)\n\t{\n\t\tconst result =\n\t\t\tthis.char\n\t\t\t(\n\t\t\t\tthis.exports.__getStdStringData(addr),\n\n\t\t\t\tthis.exports.__getStdStringSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\tstd_string2 (addr)\n\t{\n\t\treturn this.constructor.convertUint8ArrayToDomString(this.std_string(addr));\n\t},\n\n\tstd_vector (addr, type)\n\t{\n\t\tconst result =\n\t\t\tthis[type]\n\t\t\t(\n\t\t\t\tthis.exports.__getStdVectorData(addr),\n\n\t\t\t\tthis.exports.__getStdVectorSize(addr),\n\t\t\t);\n\n\t\treturn result;\n\t},\n\n\t// std_vector_bool (addr) { return this.std_vector(addr, 'bool'); },\n\tstd_vector_char (addr) { return this.std_vector(addr, 'char'); },\n\tstd_vector_int (addr) { return this.std_vector(addr, 'int'); },\n\tstd_vector_short (addr) { return this.std_vector(addr, 'short'); },\n\tstd_vector_long (addr) { return this.std_vector(addr, 'long'); },\n\tstd_vector_size_t (addr) { return this.std_vector(addr, 'size_t'); },\n\tstd_vector_addr (addr) { return this.std_vector(addr, 'addr'); },\n\tstd_vector_uint8_t (addr) { return this.std_vector(addr, 'uint8_t'); },\n\tstd_vector_int8_t (addr) { return this.std_vector(addr, 'int8_t'); },\n\tstd_vector_uint16_t (addr) { return this.std_vector(addr, 'uint16_t'); },\n\tstd_vector_int16_t (addr) { return this.std_vector(addr, 'int16_t'); },\n\tstd_vector_uint32_t (addr) { return this.std_vector(addr, 'uint32_t'); },\n\tstd_vector_int32_t (addr) { return this.std_vector(addr, 'int32_t'); },\n\tstd_vector_uint64_t (addr) { return this.std_vector(addr, 'uint64_t'); },\n\tstd_vector_int64_t (addr) { return this.std_vector(addr, 'int64_t'); },\n\tstd_vector_float (addr) { return this.std_vector(addr, 'float'); },\n\tstd_vector_double (addr) { return this.std_vector(addr, 'double'); },\n\tstd_vector_long_double (addr) { return this.std_vector(addr, 'long_double'); },\n\n\tresizeStdVector (addr, size)\n\t{\n\t\tthis.exports.__resizeStdVector(addr, size);\n\t},\n\n\tupdateStdVectorData (addr, type, _data)\n\t{\n\t\tthis.std_vector(addr, type).set(_data);\n\t},\n\n\n\n\t// demangle (name, name_addr)\n\t// {\n\t// \tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), name_addr);\n\n\t// \tconst demangled_name =\n\t// \t\tthis.constructor.convertUint8ArrayToDomString\n\t// \t\t(this.c_string(this.exports.__demangleCxxName(name_addr)))\n\t// \t\t\t.replace(/, /g, ',');\n\n\t// \treturn demangled_name;\n\t// }\n\n\tdemangleCxxNames ()\n\t{\n\t\tconst demangled_name_max_length = 1024;\n\t\tconst demangled_name_addr = this.exports.__malloc(demangled_name_max_length);\n\n\t\tconst exports_demangled_reduced = {};\n\n\t\tconst exports_demangled =\n\t\t\tObject.keys(this.exports)\n\t\t\t\t.reduce\n\t\t\t\t(\n\t\t\t\t\t(exports_demangled, _name) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (_name.startsWith('_Z'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst name = `${ _name }\\0`;\n\n\t\t\t\t\t\t\t// const demangled_name = this.demangle(name, demangled_name_addr);\n\n\t\t\t\t\t\t\tthis.memory_views.UI8.set(this.constructor.convertDomStringToUint8Array(name), demangled_name_addr);\n\n\t\t\t\t\t\t\tconst demangled_name =\n\t\t\t\t\t\t\t\tthis.constructor.convertUint8ArrayToDomString\n\t\t\t\t\t\t\t\t(this.c_string(this.exports.__demangleCxxName(demangled_name_addr)))\n\t\t\t\t\t\t\t\t\t.replace(/, /g, ',');\n\n\t\t\t\t\t\t\tif (exports_demangled[demangled_name])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Array.isArray(exports_demangled[demangled_name]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\texports_demangled[demangled_name].push(this.exports[_name]);\n\n\t\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst first_entry = exports_demangled[demangled_name];\n\n\t\t\t\t\t\t\t\texports_demangled[demangled_name] = [ first_entry, this.exports[_name] ];\n\n\t\t\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\texports_demangled[demangled_name] = this.exports[_name];\n\n\t\t\t\t\t\t\texports_demangled_reduced[demangled_name.replace(/\\([^)]*\\)/g, '')] = this.exports[_name];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn exports_demangled;\n\t\t\t\t\t},\n\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\tthis.exports.__free(demangled_name_addr);\n\n\t\treturn { exports_demangled, exports_demangled_reduced };\n\t},\n\n\n\n\tClass (name)\n\t{\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass _Class\n\t\t{\n\t\t\tstatic name = name;\n\n\t\t\tstatic overloaded = {};\n\n\n\n\t\t\tconstructor (input)\n\t\t\t{\n\t\t\t\tif (typeof input === 'number')\n\t\t\t\t{\n\t\t\t\t\tthis.addr = input;\n\t\t\t\t}\n\t\t\t\telse if (typeof input === 'string')\n\t\t\t\t{\n\t\t\t\t\t[ this.addr ] = wasm_wrapper.addr2(input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.Object.keys(this.exports_demangled)\n\t\t\t.filter\n\t\t\t(\n\t\t\t\tmember_name => member_name.includes(name),\n\t\t\t)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmember_name =>\n\t\t\t\t{\n\t\t\t\t\tlet member_name_trimmed = member_name.replace(`${ name }::`, '').replace(/\\((.*)+/g, '');\n\n\t\t\t\t\t// Some objects may be exported twice from wasm. TODO: why does it occur?\n\t\t\t\t\tconst wasm_object =\n\t\t\t\t\t\twasm_wrapper.exports_demangled[member_name][0] || wasm_wrapper.exports_demangled[member_name];\n\n\t\t\t\t\tif (typeof wasm_object === 'function')\n\t\t\t\t\t{\n\t\t\t\t\t\tconst parameters =\n\t\t\t\t\t\t\tmember_name.match(/\\((.*)+/g)?.[0].replace(/\\(|( )|\\)/g, '').split(',');\n\n\t\t\t\t\t\tif (parameters.length && parameters[0] === '')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparameters.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// static function\n\t\t\t\t\t\tif (parameters.length === wasm_object.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// non-static function\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (_Class.prototype[member_name_trimmed])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!_Class.overloaded[member_name_trimmed])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t_Class.overloaded[member_name_trimmed] = 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t++_Class.overloaded[member_name_trimmed];\n\n\t\t\t\t\t\t\t\tmember_name_trimmed += `_o${ _Class.overloaded[member_name_trimmed] }`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Non-wrapped\n\t\t\t\t\t\t\t_Class[`proto_${ member_name_trimmed }`] = wasm_object;\n\n\t\t\t\t\t\t\t_Class.prototype[member_name_trimmed] =\n\t\t\t\t\t\t\t\tfunction (...args)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn wasm_object(this.addr, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (typeof wasm_object === 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\t_Class[member_name_trimmed] = wasm_object;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\t// Presume New() returns a pointer\n\t\tif (_Class.New)\n\t\t{\n\t\t\t_Class.NewWrapper = () => new _Class(_Class.New());\n\t\t}\n\n\n\n\t\treturn _Class;\n\t},\n};\n","const IDLE_FUNCTION = () => 0;\n\n\n\nexport default function (wasm_wrapper)\n{\n\tconst imports_lib =\n\t{\n\t\tconsole_log: (size, types_addr, values_addr) =>\n\t\t{\n\t\t\tconst arg_types = wasm_wrapper.size_t(types_addr, size);\n\n\t\t\tconst args = new Array(size);\n\n\t\t\tconst [ any_value_size ] = wasm_wrapper.size_t(wasm_wrapper.globals.__any_value_size);\n\n\t\t\tfor (let i = 0; i < size; ++i)\n\t\t\t{\n\t\t\t\tconst type_name = wasm_wrapper.type_names[arg_types[i]];\n\n\t\t\t\tconst value_addr = values_addr + (any_value_size * i);\n\n\t\t\t\targs[i] = wasm_wrapper.mem[type_name].interp_log(value_addr);\n\t\t\t}\n\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tconsole_log2: (...args) =>\n\t\t{\n\t\t\tconsole.log('%cWASM:', 'color: #bada55', ...args);\n\t\t},\n\n\t\tdate_now: () => Date.now(),\n\n\t\thost_loop: (function_addr, ...args) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\t// setInterval(_function, 1000, ...args);\n\t\t\tsetInterval(_function, 0, ...args);\n\t\t},\n\n\t\thost_animation_loop: (function_addr) =>\n\t\t{\n\t\t\tconst _function = wasm_wrapper.function(function_addr);\n\n\t\t\tconst loop = () =>\n\t\t\t{\n\t\t\t\trequestAnimationFrame(_function);\n\n\t\t\t\t_function(...args);\n\t\t\t};\n\n\t\t\tloop();\n\t\t},\n\n\t\t// For using this function WASM code must be processed by\n\t\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t\trdty_sleep: (duration) =>\n\t\t{\n\t\t\t// Global state for running the program.\n\n\t\t\tconst DATA_ADDR = 16;\n\n\t\t\tif (wasm_wrapper.sleeping)\n\t\t\t{\n\t\t\t\t// We are called as part of a resume/rewind. Stop sleeping.\n\t\t\t\t// console.log('...resume');\n\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We are called in order to start a sleep/unwind.\n\t\t\t\t// console.log('sleep...');\n\t\t\t\t// Fill in the data structure. The first value has the stack location,\n\t\t\t\t// which for simplicity we can start right after the data structure itself.\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t// The end of the stack will not be reached here anyhow.\n\n\t\t\t\t// TODO: use stack_size instead of 1024 * 1024.\n\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t// // Resume after the proper delay.\n\t\t\t\t// setTimeout\n\t\t\t\t// (\n\t\t\t\t// \t() =>\n\t\t\t\t// \t{\n\t\t\t\t// \t\t// console.log('timeout ended, starting to rewind the stack');\n\t\t\t\t// \t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\t\t\t\t// \t\t// The code is now ready to rewind; to start the process, enter the\n\t\t\t\t// \t\t// first function that should be on the call stack.\n\t\t\t\t// \t},\n\n\t\t\t\t// \tduration,\n\t\t\t\t// );\n\n\t\t\t\tsetTimeout(wasm_wrapper.exports.asyncify_start_rewind, duration, DATA_ADDR);\n\t\t\t}\n\t\t},\n\t};\n\n\t// For using these functions WASM code must be processed by\n\t// wasm-opt tool with flags: \"-O1\", \"--asyncify\".\n\t// If this is main worker.\n\tif\n\t(\n\t\tself.window &&\n\t\tself.Worker &&\n\t\tself.SharedArrayBuffer\n\t)\n\t{\n\t\tObject.assign\n\t\t(\n\t\t\timports_lib,\n\n\t\t\t{\n\t\t\t\trunThread: (thread_addr, function_addr, thread_types_addr, thread_values_addr) =>\n\t\t\t\t{\n\t\t\t\t\tif (!wasm_wrapper.threads)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.threads = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst thread =\n\t\t\t\t\t\tnew wasm_wrapper.constructor.Thread2\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\twasm_wrapper,\n\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\tfunction_addr,\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_types_addr),\n\t\t\t\t\t\t\t\twasm_wrapper.exports.__getStdVectorData(thread_values_addr)\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t);\n\n\t\t\t\t\twasm_wrapper.threads[thread_addr] = thread;\n\t\t\t\t},\n\n\t\t\t\tjoinThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.async_count = wasm_wrapper.async_count || 0;\n\n\t\t\t\t\t++wasm_wrapper.async_count;\n\n\t\t\t\t\tif (wasm_wrapper.async_count === 1)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.async_promise =\n\t\t\t\t\t\t\tnew Promise\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tresolve =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter = (val) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (val)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst DATA_ADDR = 16;\n\n\t\t\t\t\tif (wasm_wrapper.sleeping)\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_stop_rewind();\n\n\t\t\t\t\t\twasm_wrapper.sleeping = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR >> 2] = DATA_ADDR + 8;\n\t\t\t\t\t\twasm_wrapper.memory_views.I32[DATA_ADDR + 4 >> 2] = 1024 * 1024;\n\n\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_unwind(DATA_ADDR);\n\n\t\t\t\t\t\twasm_wrapper.sleeping = true;\n\n\t\t\t\t\t\twasm_wrapper.threads[thread_addr].promise\n\t\t\t\t\t\t\t.then\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\twasm_wrapper.exports.asyncify_start_rewind(DATA_ADDR);\n\n\t\t\t\t\t\t\t\t\twasm_wrapper.async_func(...wasm_wrapper.async_args);\n\n\t\t\t\t\t\t\t\t\tif (wasm_wrapper.async_count % 2 === 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\twasm_wrapper.async_promise_setter(true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tterminateThread: (thread_addr) =>\n\t\t\t\t{\n\t\t\t\t\twasm_wrapper.threads[thread_addr].terminate();\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tif\n\t(\n\t\t// self.Worker && // Safari doesn't allow workers to create Worker objects. Only main worker is allowed.\n\t\tself.SharedArrayBuffer &&\n\t\tself.Atomics\n\t)\n\t{\n\t\tif (self.window)\n\t\t{\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock: IDLE_FUNCTION,\n\t\t\t\t\tatomic_unlock: IDLE_FUNCTION,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst UNLOCKED = 0;\n\t\t\tconst LOCKED = 1;\n\n\t\t\tObject.assign\n\t\t\t(\n\t\t\t\timports_lib,\n\n\t\t\t\t{\n\t\t\t\t\tatomic_lock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tself.Atomics.wait(wasm_wrapper.memory_views.I32, __atomic_malloc_index, LOCKED, Infinity);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (self.Atomics.compareExchange(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED, LOCKED) === LOCKED);\n\t\t\t\t\t},\n\n\t\t\t\t\tatomic_unlock (atomic_addr)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst __atomic_malloc_index = atomic_addr / 4;\n\n\t\t\t\t\t\tself.Atomics.store(wasm_wrapper.memory_views.I32, __atomic_malloc_index, UNLOCKED);\n\t\t\t\t\t\tself.Atomics.notify(wasm_wrapper.memory_views.I32, __atomic_malloc_index, 1);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\n\treturn imports_lib;\n};\n","export default function ()\n{\n\tconst that = this;\n\n\n\n\tthis.options =\n\t\tObject.assign\n\t\t(\n\t\t\t{\n\t\t\t\t// 1024 b * 1024 b == 1048576 b == 1 mb\n\t\t\t\tthread_stack_size: 0x0100000,\n\t\t\t},\n\n\t\t\tthis.options,\n\t\t);\n\n\n\n\t[\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'Uint16Array',\n\t\t'Int16Array',\n\t\t'Uint32Array',\n\t\t'Int32Array',\n\t\t'Uint8Array',\n\t\t'Int8Array',\n\t\t'BigUint64Array',\n\t\t'BigInt64Array',\n\t\t'Float32Array',\n\t\t'Float64Array',\n\t]\n\t\t.forEach\n\t\t(\n\t\t\ttyped_array_name =>\n\t\t\t{\n\t\t\t\tif (self[typed_array_name])\n\t\t\t\t{\n\t\t\t\t\tthis[typed_array_name] =\n\t\t\t\t\t\tclass extends self[typed_array_name]\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconstructor (...args)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// if (args.length !== 1)\n\t\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t\t// \tthrow new Error('wasm-wrapper typed array must be constructed with only 1 argument.');\n\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\tif (args[0] instanceof self.ArrayBuffer || (self.SharedArrayBuffer && args[0] instanceof self.SharedArrayBuffer))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (args[0] === that.memory.buffer)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsuper(...args);\n\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthrow new Error('wasm-wrapper typed array can not be backed by array buffer other than wasm-wrapper instance memory buffer.');\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet length = 0;\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// length = args[0].length;\n\t\t\t\t\t\t\t\t\t[ { length } ] = args;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlength = args[0];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst byteOffset = that.exports.__malloc(length * self[typed_array_name].BYTES_PER_ELEMENT);\n\n\t\t\t\t\t\t\t\tsuper(that.memory.buffer, byteOffset, length);\n\n\t\t\t\t\t\t\t\tif (typeof args[0] === 'object')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.set(args[0]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.addr = byteOffset;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfree () { that.exports.__free(this.byteOffset); }\n\n\t\t\t\t\t\t\t__reattach () { return new this.constructor(that.memory.buffer, this.byteOffset, this.length); }\n\n\t\t\t\t\t\t\t// slice (...args) {}\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\n\n\n\t{\n\t\tthis.mem =\n\t\t// TODO: wrap into \"cxx\" prop.\n\t\t// TODO: add \"views\" props instead of using this.memory_views.\n\t\t{\n\t\t\t'bool': { kind: 'Uint' },\n\t\t\t'char': { kind: 'Uint' },\n\t\t\t'int': { kind: 'Int' },\n\t\t\t'short': { kind: 'Int' },\n\t\t\t'long': { kind: 'Int' },\n\t\t\t'size_t': { kind: 'Uint' },\n\t\t\t'addr': { kind: 'Uint' },\n\t\t\t'uint8_t': { kind: 'Uint' },\n\t\t\t'int8_t': { kind: 'Int' },\n\t\t\t'uint16_t': { kind: 'Uint' },\n\t\t\t'int16_t': { kind: 'Int' },\n\t\t\t'uint32_t': { kind: 'Uint' },\n\t\t\t'int32_t': { kind: 'Int' },\n\t\t\t'uint64_t': { kind: 'Uint' },\n\t\t\t'int64_t': { kind: 'Int' },\n\t\t\t'float': { kind: 'Float' },\n\t\t\t'double': { kind: 'Float' },\n\t\t\t'long_double': { kind: 'Float' },\n\t\t\t'c_string': {},\n\t\t};\n\n\t\tthis.type_names = Object.keys(this.mem);\n\n\t\tthis.type_names\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\t(type_name, type_name_index) =>\n\t\t\t\t{\n\t\t\t\t\tconst size = this.exports.__sizeof(type_name_index);\n\n\t\t\t\t\tlet typed_array_constructor_name = `${ this.mem[type_name].kind }${ size * 8 }Array`;\n\n\t\t\t\t\tif (!this[typed_array_constructor_name])\n\t\t\t\t\t{\n\t\t\t\t\t\ttyped_array_constructor_name = `Big${ typed_array_constructor_name }`;\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.mem[type_name],\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\ttyped_array_constructor: this[typed_array_constructor_name],\n\t\t\t\t\t\t\tinterp_log: addr => this[type_name](addr)[0],\n\t\t\t\t\t\t\tinterp_thread: addr => this[type_name](addr),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tthis.mem.bool.interp_log = addr => Boolean(this.bool(addr)[0]),\n\n\t\tthis.mem.c_string.interp_log = addr => this.c_string2(this.addr(addr)[0]);\n\t\tthis.mem.c_string.interp_thread = addr => this.addr(addr);\n\t\tthis.mem.c_string.interp_arg = str => new this.mem.char.typed_array_constructor(this.constructor.convertDomStringToUint8Array(str));\n\t}\n\n\n\n\t{\n\t\tthis.memory_views = {};\n\n\t\tthis.memory_views.UI8 = new this.Uint8Array(this.memory.buffer);\n\t\t// this.memory_views.I8 = new this.Int8Array(this.memory.buffer);\n\t\t// this.memory_views.UI16 = new this.Uint16Array(this.memory.buffer);\n\t\t// this.memory_views.I16 = new this.Int16Array(this.memory.buffer);\n\t\t// this.memory_views.UI32 = new this.Uint32Array(this.memory.buffer);\n\t\tthis.memory_views.I32 = new this.Int32Array(this.memory.buffer);\n\t\t// if (this.BigUint64Array) { this.memory_views.UI64 = new this.BigUint64Array(this.memory.buffer); }\n\t\t// if (this.BigInt64Array) { this.memory_views.I64 = new this.BigInt64Array(this.memory.buffer); }\n\t\t// this.memory_views.F32 = new this.Float32Array(this.memory.buffer);\n\t\t// this.memory_views.F64 = new this.Float64Array(this.memory.buffer);\n\t}\n}\n","// https://webassembly.org\n// https://webassembly.github.io/spec\n// https://github.com/WebAssembly\n// https://developer.mozilla.org/en-US/docs/WebAssembly\n// https://wasi.dev\n// https://lld.llvm.org/WebAssembly.html\n// https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-documents.md\n// https://docs.wasmtime.dev/\n\n\n\n/* eslint-disable */\n\n\n\n/**\n * Using TypedArray.subarray() is preferred\n * when accessing to data\n * to avoid extra memory allocation.\n *\n * Strange std::string behavior:\n * if std::string data length <=11, std::string object address is the same with its data;\n * if >11, std::string object name stores address of beginning of the data.\n * So in second case one can use WasmWrapper::c_string method to get string bytes.\n * Maybe it's not related to data length, but to dynamic memory allocation.\n *\n *\n *\n * If memory is shared then memory growing is not allowed\n * and maximum memory size is specified at compilation.\n *\n *\n *\n * Passing argument by reference works as passing by pointer.\n * So, functions with reference parameters expect address instead of value.\n *\n *\n *\n * TODO: determination capabiity of what wasm memory type is being used.\n */\n\n\n\n// Webpack arraybuffer-loader is required.\n// import test_simd_wasm_buffer from './test-simd/build/clang-wasm32/output/wasm/test-simd.wasm';\n\nimport configureMemory from './memory';\nimport getImports from './imports';\nimport cxx_specific_functions from './cxx-specific';\n\n\n\nconst __CODE_TYPE_BYTECODE__ = 0;\nconst __CODE_TYPE_FUNCTION__ = 1;\n\n\n\nconst IDLE_FUNCTION = () => 0;\n\nconst ERROR_LOG = (...args) => console.log(`%c${ content }`, 'background-color: red; padding: 2px;', ...args.slice(1));\nconst WARN_LOG = (...args) => console.log(`%c${ args[0] }`, 'background-color: #8B8000; padding: 2px;', ...args.slice(1));\n\nconst DEBUG_INFO = [];\n\nconst DEBUG_INFO_PUSH = (...args) => DEBUG_INFO.push(args);\n\nconst DEBUG_LABEL_LOG = thread_id =>\n{\n\tDEBUG_INFO.forEach(label => console.log(`%c${ thread_id }: ${ label[0] }`, 'background-color: #00858A; padding: 2px;', ...label.slice(1)));\n\n\tDEBUG_INFO.length = 0;\n};\n\n\n\nDEBUG_INFO_PUSH(`WASM CONCURRENCY: ${ self.navigator.hardwareConcurrency }`);\n\n\n\nclass WasmWrapper\n{\n\tstatic text_decoder = new TextDecoder('utf-8');\n\tstatic text_encoder = new TextEncoder();\n\n\t// static convertUint8ArrayToDomString (uint8_array)\n\t// {\n\t// \treturn WasmWrapper.text_decoder.decode(uint8_array);\n\t// }\n\n\t// Version for shared buffer backed array.\n\t// Decoding views of shared buffer is not allowed.\n\tstatic convertUint8ArrayToDomString (uint8_array)\n\t{\n\t\t// return WasmWrapper.text_decoder.decode(uint8_array.slice());\n\t\treturn WasmWrapper.text_decoder.decode(new Uint8Array(uint8_array));\n\t}\n\n\tstatic convertDomStringToUint8Array (text)\n\t{\n\t\treturn WasmWrapper.text_encoder.encode(text);\n\t}\n\n\tstatic async testSimd ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\t// webpack arraybuffer-loader has to be installed when using the library with soures files.\n\t\t\t// const wasm_buffer = (await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm')).default;\n\t\t\tconst wasm_buffer = (await import('./test-simd/build/test.wasm')).default;\n\n\t\t\tconst wasm_module = await WebAssembly.compile(wasm_buffer);\n\n\t\t\t// LOG(WebAssembly.Module.exports(wasm_module))\n\t\t\t// LOG(WebAssembly.Module.imports(wasm_module))\n\n\t\t\tconst instance = await WebAssembly.instantiate(wasm_module);\n\n\t\t\t// // Webpack since version 4 has embedded WASM parser.\n\t\t\t// // MIME type \"application/wasm\" must be defined for \".wasm\" extension on server.\n\t\t\t// // TODO: use another type of importing ?\n\t\t\t// await import('./test-simd/build/clang-wasm32/output/wasm/test-simd.wasm');\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tERROR_LOG(`WASM SIMD TEST FAILED: ${ error }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM SIMD: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tstatic async testAtomic ()\n\t{\n\t\tlet result = false;\n\n\t\ttry\n\t\t{\n\t\t\tconst wasm_buffer = (await import('./test-atomic/build/test.wasm')).default;\n\n\t\t\tconst wasm_module = await WebAssembly.compile(wasm_buffer);\n\n\t\t\tconst instance = await WebAssembly.instantiate(wasm_module);\n\n\t\t\tresult = true;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tERROR_LOG(`WASM ATOMIC TEST FAILED: ${ error }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM ATOMIC: ${ result ? 'ON' : 'OFF' }`);\n\n\t\treturn result;\n\t}\n\n\tconstructor (options = {})\n\t{\n\t\tself.__wasm_wrapper__ = this;\n\n\t\tthis.options = options;\n\n\t\tconst wasm_wrapper = this;\n\n\n\n\t\tclass ThreadPromiseBunch\n\t\t{\n\t\t\tconstructor ()\n\t\t\t{\n\t\t\t\t// TODO: rename to run_count.\n\t\t\t\tthis.running_count = 0;\n\t\t\t}\n\n\t\t\trun (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trunLog (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\tLOG('ThreadPromiseBunch start __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tLOG('ThreadPromiseBunch end __heap_pointer', wasm_wrapper.addr(wasm_wrapper.globals.__heap_pointer)[0])\n\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.run(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tasync runAsync (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\t++this.running_count;\n\n\t\t\t\tif (this.running_count > 1)\n\t\t\t\t{\n\t\t\t\t\tthis.callback_next1 = callback1;\n\t\t\t\t\tthis.callback_next2 = callback2;\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(\n\t\t\t\t\t\tresolves =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\t\tcallback2(resolves);\n\n\t\t\t\t\t\t\tif (this.running_count > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\t\treturn this.runAsync(this.callback_next1, this.callback_next2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.running_count = 0;\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\trun2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync runAsync2 (callback1, callback2 = IDLE_FUNCTION)\n\t\t\t{\n\t\t\t\twasm_wrapper.exports.__initHeapPointer();\n\n\t\t\t\treturn Promise.all(await callback1())\n\t\t\t\t\t.then\n\t\t\t\t\t(() =>\n\t\t\t\t\t{\n\t\t\t\t\t\twasm_wrapper.exports.__resetHeapPointer();\n\n\t\t\t\t\t\tcallback2();\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.ThreadPromiseBunch = ThreadPromiseBunch;\n\n\n\n\t\t// configureMemory(this, options);\n\t}\n\n\tfunction (addr)\n\t{\n\t\treturn this.exports.__indirect_function_table.get(addr);\n\t}\n\n\tasync async (_function, ...args)\n\t{\n\t\tthis.async_args = args;\n\n\t\t(this.async_func = _function)(...args);\n\n\t\tthis.exports.asyncify_stop_unwind();\n\n\t\tawait this.async_promise;\n\n\t\tthis.async_count = 0;\n\t}\n\n\tasync instantiate ({ wasm_module_imports, imports_lib, imports_custom, wasm_module, code, debug })\n\t{\n\t\t// Object for passing to threads.\n\t\tthis.imports_thread = { env: {} };\n\n\t\tObject.keys(imports_custom)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\tmodule =>\n\t\t\t\t{\n\t\t\t\t\tObject.keys(imports_custom[module])\n\t\t\t\t\t\t.forEach\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\timport_custom =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!this.imports_thread[module])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.imports_thread[module] = {};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.imports_thread[module][import_custom] = 0;\n\n\t\t\t\t\t\t\t\t// TODO: use \"|=\" operator ?\n\t\t\t\t\t\t\t\t// If (imports_custom[module][import_custom] === 0) then make it IDLE_FUNCTION.\n\t\t\t\t\t\t\t\timports_custom[module][import_custom] = imports_custom[module][import_custom] || IDLE_FUNCTION;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\tconst imports_aggregate = {};\n\n\t\tObject.assign(imports_aggregate, imports_custom);\n\n\t\tObject.assign\n\t\t(\n\t\t\timports_aggregate.env,\n\n\t\t\timports_lib\n\t\t);\n\n\t\t// Imported memory\n\t\tif (this.memory)\n\t\t{\n\t\t\timports_aggregate.env.memory = this.memory;\n\t\t}\n\n\t\twasm_module_imports\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\twasm_module_import =>\n\t\t\t\t{\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module])\n\t\t\t\t\t{\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!imports_aggregate[wasm_module_import.module][wasm_module_import.name])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (debug)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tWARN_LOG(`Missed ${ wasm_module_import.module } import:`, wasm_module_import.name);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\timports_aggregate[wasm_module_import.module][wasm_module_import.name] = IDLE_FUNCTION;\n\t\t\t\t\t\t// imports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\n\t\t\t\t\t\t// if (wasm_module_import.name !== 'clock_time_get')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = () => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); };\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// if (wasm_module_import.name === 'fd_write')\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \timports_aggregate[wasm_module_import.module][wasm_module_import.name] = (...args) => { MISSED_IMPORT_FUNCTION_LOG(`Missed import function called: module \"${ wasm_module_import.module }\", function \"${ wasm_module_import.name }\"`); LOG(args.map(arg => this.CString2(arg))); };\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\tlet exports = null;\n\n\t\tif (wasm_module)\n\t\t{\n\t\t\tconst wasm_module_instance =\n\t\t\t\tawait WebAssembly.instantiate\n\t\t\t\t// await WebAssembly.instantiateStreaming\n\t\t\t\t(\n\t\t\t\t\twasm_module,\n\n\t\t\t\t\timports_aggregate,\n\t\t\t\t);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM MODULE INSTANCE:', wasm_module_instance);\n\t\t\t}\n\n\t\t\t// this.instance = wasm_module_instance;\n\n\t\t\t({ exports } = wasm_module_instance);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// imports_aggregate.wasi_snapshot_preview1 = {};\n\t\t\t// imports_aggregate.wasi_snapshot_preview1.fd_write = (...args) => LOG(args.map(arg => this.c_string2(arg)));\n\n\t\t\texports = code(imports_aggregate);\n\t\t}\n\n\t\t// Exported memory\n\t\tif (!this.memory)\n\t\t{\n\t\t\tthis.memory = exports.memory;\n\t\t}\n\n\t\t// setInterval(() => LOG(this.memory.buffer), 1000);\n\n\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ this.memory.buffer.byteLength / 65536 } pages (${ this.memory.buffer.byteLength } bytes)`);\n\n\t\treturn exports;\n\t}\n\n\tasync init\n\t({\n\t\t// TODO: reorder.\n\t\tcode,\n\t\tmemory = null,\n\t\t// memory_params = { minimum: 65536, maximum: 65536, initial: 65536, shared: true },\n\t\tmemory_params = { minimum: 2, initial: 2, maximum: 65536, shared: true },\n\t\timports: imports_custom = { env: {} },\n\t\tstack_pointer = undefined,\n\t\tconfigureMemory = true,\n\t\tforceLocalMemory = false,\n\t\tinitGlobals = true,\n\t\tdemangleCxxNames = false,\n\t\tdebug = false,\n\t\tfindOptimalMemorySize = true,\n\t})\n\t{\n\t\tlet code_type = null;\n\n\t\t// Code for passing to other WASM instances (e.g. threads).\n\t\tthis.code = code;\n\n\t\tif (typeof code === 'string')\n\t\t{\n\t\t\tif (code.startsWith('function'))\n\t\t\t{\n\t\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\t\tcode = new Function(code);\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string function -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t\t// base64\n\t\t\telse\n\t\t\t{\n\t\t\t\tcode = Uint8Array.from(atob(code), c => c.charCodeAt(0));\n\n\t\t\t\t// TODO: Make code shared (if can) to speed up passing it to workers. DONE?\n\t\t\t\tif (self.SharedArrayBuffer)\n\t\t\t\t{\n\t\t\t\t\tconst code_temp = code;\n\n\t\t\t\t\tcode = new Uint8Array(new SharedArrayBuffer(code.length));\n\n\t\t\t\t\tcode.set(code_temp);\n\t\t\t\t}\n\n\t\t\t\tthis.code = code;\n\n\t\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\t\tDEBUG_INFO_PUSH(`WASM CODE: string base64 -> ${ code.constructor.name }`);\n\t\t\t}\n\t\t}\n\t\telse if (typeof code === 'function')\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_FUNCTION__;\n\n\t\t\tthis.code = code.toString();\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: function`);\n\t\t}\n\t\t// Code is an Uint8Array backed (SharedArrayBuffer optionally) or ArrayBuffer or SharedArrayBuffer.\n\t\t// UPD. SharedArrayBuffer can not be used as source for WebAssembly module, only for Uint8Array\n\t\t// backed by SharedArrayBuffer.\n\t\telse\n\t\t{\n\t\t\tcode_type = __CODE_TYPE_BYTECODE__;\n\n\t\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code.constructor.name }`);\n\t\t}\n\n\t\tDEBUG_INFO_PUSH(`WASM CODE: ${ code_type === __CODE_TYPE_BYTECODE__ ? 'BYTECODE' : 'FUNCTION' }`);\n\n\t\t// DEBUG_LABEL_LOG();\n\n\n\n\t\tconst imports_lib = getImports(this);\n\n\n\n\t\tif (code_type === __CODE_TYPE_BYTECODE__)\n\t\t{\n\t\t\tconst wasm_module = await WebAssembly.compile(code);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM MODULE: ', wasm_module);\n\t\t\t}\n\n\t\t\tconst wasm_module_imports = WebAssembly.Module.imports(wasm_module);\n\t\t\t// const wasm_module_exports = WebAssembly.Module.exports(wasm_module);\n\n\t\t\tthis.memory = null;\n\n\t\t\t// Memory comes from WASM main worker instance to thread instance.\n\t\t\t// is always imported and shared.\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: SHARED')\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst [ imported_memory ] =\n\t\t\t\t\twasm_module_imports\n\t\t\t\t\t\t.filter((import_desc) => (import_desc.kind === 'memory'));\n\n\t\t\t\tconst shared_memory_allowed = Boolean(self.SharedArrayBuffer) && !forceLocalMemory;\n\n\t\t\t\tif (imported_memory)\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: IMPORTED')\n\n\t\t\t\t\tlet memory_desc = null;\n\n\t\t\t\t\t// chrome://flags#enable-experimental-webassembly-features must be enabled\n\t\t\t\t\t// to access \"type\" property of \"imported_memory\". It contains memory\n\t\t\t\t\t// type and size info produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\t// \"--import-memory\" linker flag specifies whether memory is imported to WebAssembly module.\n\t\t\t\t\t// \"--shared-memory\" linker flag specifies whether memory is shared between WebAssembly instances.\n\t\t\t\t\t// \"--max-memory=N\" linker flag specifies maximum size of memory for WebAssembly instance.\n\n\t\t\t\t\t// The advantqge of this is that we don't need to provide \"memory_params\"\n\t\t\t\t\t// to crate the memory object. Memory object is created automatically\n\t\t\t\t\t// after reading the \"imported_memory.type\".\n\t\t\t\t\tif (imported_memory.type)\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is --initial-memory flag ignored if --shared-memory flag is defined?\n\t\t\t\t\t\t\t// UPD: NO.\n\t\t\t\t\t\t\t// initial: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tinitial: imported_memory.type.minimum,\n\t\t\t\t\t\t\tmaximum: imported_memory.type.maximum || imported_memory.type.minimum,\n\t\t\t\t\t\t\tshared: imported_memory.type.shared && shared_memory_allowed,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Parameters must match values produced by the linker (aka defined in WebAssembly module).\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmemory_desc =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// 65536 pages == 4gb, maximum possible memory size for 32-bit WebAssembly instance.\n\t\t\t\t\t\t\tinitial: memory_params.initial,\n\t\t\t\t\t\t\tmaximum: memory_params.maximum, // Must match \"--max-memory=N\" flag.\n\t\t\t\t\t\t\t// shared, // Must match \"--shared-memory\" flag.\n\t\t\t\t\t\t\tshared: memory_params.shared && shared_memory_allowed,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.memory = new WebAssembly.Memory(memory_desc);\n\n\t\t\t\t\tDEBUG_INFO_PUSH(`WASM MEMORY: ${ memory_desc.shared ? 'SHARED' : 'NOT SHARED' }`)\n\t\t\t\t}\n\t\t\t\t// TODO: add the case when memory is imported but can be created with arbitrary parameters.\n\t\t\t\t// Is this case possible? Meybe possible only when memory is not shared?\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDEBUG_INFO_PUSH('WASM MEMORY: EXPORTED')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, wasm_module, debug });\n\t\t}\n\t\t/**\n\t\t * Initializes WasmWrapper instance with JS code compiled from WASM with wasm2js.\n\t\t *\n\t\t * In this case presume WASM instances don't use shared memory and exported memory.\n\t\t *\n\t\t * wasm2js generates code with Atomics, even if its input WASM is compiled without flag \"--shared-memory\".\n\t\t * TODO: use --disable-threads to generating Atomics as --help says.\n\t\t * UPD: There are still Atomics even with --disable-threads flag.\n\t\t * UPD: Removing \"-matomics\" compiler flag helped.\n\t\t *\n\t\t * if (!self.Atomics)\n\t\t * {\n\t\t *   self.Atomics = { load: (arr, index) => arr[index] };\n\t\t * }\n\t\t */\n\t\telse\n\t\t{\n\t\t\tthis.memory = null;\n\n\t\t\tif (memory)\n\t\t\t{\n\t\t\t\tthis.memory = memory;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// 1 page == 65536 bytes == 0.0625 mb.\n\t\t\t\t// 1 mb == 16 pages.\n\t\t\t\t// 1gb == 16384 pages.\n\t\t\t\t// this.memory = { buffer: new self.ArrayBuffer(size) };\n\t\t\t\tconst allocate =\n\t\t\t\t\t(size_pages, max_size_pages) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet result = true;\n\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.memory = { buffer: new self.ArrayBuffer(Math.imul(size_pages, 65536), { maxByteLength: Math.imul(max_size_pages, 65536) }) };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (evt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconsole.error(evt);\n\n\t\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t};\n\n\t\t\t\t// if (findOptimalMemorySize)\n\t\t\t\t// {\n\t\t\t\t// \tfor (let size = memory_params.initial;; size /= 2)\n\t\t\t\t// \t{\n\t\t\t\t// \t\tif (allocate(size, memory_params.maximum))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\tLOG(size, 'bytes allocated')\n\n\t\t\t\t// \t\t\tbreak;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\t// else\n\t\t\t\t{\n\t\t\t\t\tallocate(memory_params.initial, memory_params.maximum);\n\t\t\t\t}\n\n\t\t\t\tLOG(this.memory.buffer)\n\t\t\t}\n\n\t\t\t// TODO: Find better solution to get import modules used.\n\t\t\t// Now it is hardcoded.\n\t\t\tconst wasm_module_imports =\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tmodule: \"env\",\n\t\t\t\t\tmodule: \"wasi_snapshot_preview1\",\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tthis.exports = await this.instantiate({ wasm_module_imports, imports_lib, imports_custom, code, debug });\n\t\t}\n\n\n\n\t\tif (configureMemory)\n\t\t{\n\t\t\tthis.configureMemory();\n\n\t\t\t// DEBUG_INFO_PUSH(`WASM MEMORY: ${ this.memory.buffer.byteLength / 65536 } pages (${ this.memory.buffer.byteLength } bytes)`);\n\t\t}\n\n\t\tif (this.exports.__main)\n\t\t{\n\t\t\tthis.__thread_id = this.exports.__main(stack_pointer);\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_LABEL_LOG(this.__thread_id);\n\t\t\t}\n\t\t}\n\n\t\tif (initGlobals)\n\t\t{\n\t\t\tthis.globals = this.initGlobals();\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM GLOBALS:', this.globals)\n\t\t\t}\n\t\t}\n\n\t\tif (demangleCxxNames)\n\t\t{\n\t\t\tconst { exports_demangled, exports_demangled_reduced } = this.demangleCxxNames();\n\n\t\t\tObject.assign(this, { exports_demangled, exports_demangled_reduced });\n\n\t\t\tif (debug)\n\t\t\t{\n\t\t\t\tDEBUG_INFO_PUSH('WASM EXPORTS DEMANGLED', this.exports_demangled);\n\t\t\t\tDEBUG_INFO_PUSH('WASM EXPORTS DEMANGLED', this.exports_demangled_reduced);\n\t\t\t}\n\t\t}\n\n\t\t// this.__heap_pointer_initial = this.addr(this.globals.__heap_pointer)[0];\n\t}\n\n\t// resetHeapPointer ()\n\t// {\n\t// \tthis.exports.__setHeapPointer(this.__heap_pointer_initial);\n\t// }\n\n\tinitGlobals ()\n\t{\n\t\tconst globals = {};\n\n\t\tconst prefix_length = '__EXPORT_ADDR__'.length;\n\n\t\tObject.keys(this.exports)\n\t\t\t.forEach\n\t\t\t(\n\t\t\t\texport_name =>\n\t\t\t\t{\n\t\t\t\t\tif (export_name.startsWith('__EXPORT_ADDR__'))\n\t\t\t\t\t{\n\t\t\t\t\t\tglobals[export_name.slice(prefix_length)] = this.exports[export_name]();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\n\t\treturn globals;\n\t}\n\n\tgetNewThread () { return new WasmWrapper.Thread(this); }\n\tgetNewThread2 () { return new WasmWrapper.Thread2(this); }\n\tgetNewThread3 () { return new WasmWrapper.Thread3(this); }\n\tgetNewThread4 () { return new WasmWrapper.Thread4(this); }\n\n\tasync initThreads (thread_count)\n\t{\n\t\tconst threads =\n\t\t\tnew Array(thread_count)\n\t\t\t\t.fill(null)\n\t\t\t\t.map(() => new WasmWrapper.Thread3(this));\n\n\t\tawait Promise.all(threads.map(thread => thread.init()));\n\n\t\treturn threads;\n\t}\n\n\tterminateThreads (threads)\n\t{\n\t\tthreads\n\t\t\t.reverse()\n\t\t\t.forEach(thread => thread.terminate());\n\t}\n}\n\n\n\nWasmWrapper.prototype.configureMemory = configureMemory;\n\nObject.assign(WasmWrapper.prototype, cxx_specific_functions);\n\n\n\nexport default WasmWrapper;\n","import WasmWrapper from '../../wasm-wrapper';\n\nconst wasm = new WasmWrapper();\n\nonmessage = ({ data }) => wasm.init(data).then(() => postMessage(wasm.exports[data.function_name](...data.data)));\n\nexport default 0;\n"],"sourceRoot":""}